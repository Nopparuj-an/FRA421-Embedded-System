
LAB5 Power Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033fc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080034bc  080034bc  000134bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003528  08003528  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003528  08003528  00013528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003530  08003530  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003530  08003530  00013530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003534  08003534  00013534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08003544  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08003544  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc8d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018fe  00000000  00000000  0002bcc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002d5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a10  00000000  00000000  0002e078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010aaf  00000000  00000000  0002ea88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c3bf  00000000  00000000  0003f537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006860a  00000000  00000000  0004b8f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b3f00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002648  00000000  00000000  000b3f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080034a4 	.word	0x080034a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080034a4 	.word	0x080034a4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 faf2 	bl	8000a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f876 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f998 	bl	80007e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004b8:	f000 f966 	bl	8000788 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004bc:	f000 f8e2 	bl	8000684 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim2);
 80004c0:	4b30      	ldr	r3, [pc, #192]	; (8000584 <main+0xdc>)
 80004c2:	0018      	movs	r0, r3
 80004c4:	f001 fdda 	bl	800207c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004c8:	4b2e      	ldr	r3, [pc, #184]	; (8000584 <main+0xdc>)
 80004ca:	2100      	movs	r1, #0
 80004cc:	0018      	movs	r0, r3
 80004ce:	f001 fe61 	bl	8002194 <HAL_TIM_PWM_Start>
	HAL_Delay(5000);
 80004d2:	4b2d      	ldr	r3, [pc, #180]	; (8000588 <main+0xe0>)
 80004d4:	0018      	movs	r0, r3
 80004d6:	f000 fb4d 	bl	8000b74 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		//simulate task
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 400);
 80004da:	4b2a      	ldr	r3, [pc, #168]	; (8000584 <main+0xdc>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	22c8      	movs	r2, #200	; 0xc8
 80004e0:	0052      	lsls	r2, r2, #1
 80004e2:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(3000);
 80004e4:	4b29      	ldr	r3, [pc, #164]	; (800058c <main+0xe4>)
 80004e6:	0018      	movs	r0, r3
 80004e8:	f000 fb44 	bl	8000b74 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2800);
 80004ec:	4b25      	ldr	r3, [pc, #148]	; (8000584 <main+0xdc>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	22af      	movs	r2, #175	; 0xaf
 80004f2:	0112      	lsls	r2, r2, #4
 80004f4:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(3000);
 80004f6:	4b25      	ldr	r3, [pc, #148]	; (800058c <main+0xe4>)
 80004f8:	0018      	movs	r0, r3
 80004fa:	f000 fb3b 	bl	8000b74 <HAL_Delay>

		if (Enter.Sleep) {
 80004fe:	4b24      	ldr	r3, [pc, #144]	; (8000590 <main+0xe8>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d011      	beq.n	800052a <main+0x82>
			HAL_SuspendTick();
 8000506:	f000 fb59 	bl	8000bbc <HAL_SuspendTick>
			HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 800050a:	2007      	movs	r0, #7
 800050c:	f000 fc42 	bl	8000d94 <HAL_NVIC_ClearPendingIRQ>
			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8000510:	4b20      	ldr	r3, [pc, #128]	; (8000594 <main+0xec>)
 8000512:	2280      	movs	r2, #128	; 0x80
 8000514:	0192      	lsls	r2, r2, #6
 8000516:	615a      	str	r2, [r3, #20]
			HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE);
 8000518:	2102      	movs	r1, #2
 800051a:	2000      	movs	r0, #0
 800051c:	f000 fdd8 	bl	80010d0 <HAL_PWR_EnterSLEEPMode>
			//CPU PAUSE HERE
			HAL_ResumeTick();
 8000520:	f000 fb5a 	bl	8000bd8 <HAL_ResumeTick>
			Enter.Sleep = 0;
 8000524:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <main+0xe8>)
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
		}

		if (Enter.Stop) {
 800052a:	4b19      	ldr	r3, [pc, #100]	; (8000590 <main+0xe8>)
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d013      	beq.n	800055a <main+0xb2>
			HAL_SuspendTick();
 8000532:	f000 fb43 	bl	8000bbc <HAL_SuspendTick>
			HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8000536:	2007      	movs	r0, #7
 8000538:	f000 fc2c 	bl	8000d94 <HAL_NVIC_ClearPendingIRQ>
			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 800053c:	4b15      	ldr	r3, [pc, #84]	; (8000594 <main+0xec>)
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	0192      	lsls	r2, r2, #6
 8000542:	615a      	str	r2, [r3, #20]
			HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE);
 8000544:	2102      	movs	r1, #2
 8000546:	2000      	movs	r0, #0
 8000548:	f000 fe1a 	bl	8001180 <HAL_PWR_EnterSTOPMode>
			//CPU PAUSE HERE
			SystemClock_Config();
 800054c:	f000 f828 	bl	80005a0 <SystemClock_Config>
			HAL_ResumeTick();
 8000550:	f000 fb42 	bl	8000bd8 <HAL_ResumeTick>
			Enter.Stop = 0;
 8000554:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <main+0xe8>)
 8000556:	2200      	movs	r2, #0
 8000558:	605a      	str	r2, [r3, #4]
		}

		if (Enter.Standby) {
 800055a:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <main+0xe8>)
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d00c      	beq.n	800057c <main+0xd4>
			HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2);
 8000562:	2380      	movs	r3, #128	; 0x80
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	0018      	movs	r0, r3
 8000568:	f000 fda2 	bl	80010b0 <HAL_PWR_EnableWakeUpPin>
			__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800056c:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <main+0xf0>)
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <main+0xf0>)
 8000572:	2104      	movs	r1, #4
 8000574:	430a      	orrs	r2, r1
 8000576:	601a      	str	r2, [r3, #0]
			//we can read __HAL_PWR_GET_FLAG(PWR_FLAG_WU) to identify reset cause
			//or read PWR->CSR
			HAL_PWR_EnterSTANDBYMode();
 8000578:	f000 fe5e 	bl	8001238 <HAL_PWR_EnterSTANDBYMode>
			//code will never run up to here
		}
		__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST);
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <main+0xf4>)
 800057e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 400);
 8000580:	e7ab      	b.n	80004da <main+0x32>
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	20000028 	.word	0x20000028
 8000588:	00001388 	.word	0x00001388
 800058c:	00000bb8 	.word	0x00000bb8
 8000590:	200000f0 	.word	0x200000f0
 8000594:	40010400 	.word	0x40010400
 8000598:	40007000 	.word	0x40007000
 800059c:	40021000 	.word	0x40021000

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b099      	sub	sp, #100	; 0x64
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	242c      	movs	r4, #44	; 0x2c
 80005a8:	193b      	adds	r3, r7, r4
 80005aa:	0018      	movs	r0, r3
 80005ac:	2334      	movs	r3, #52	; 0x34
 80005ae:	001a      	movs	r2, r3
 80005b0:	2100      	movs	r1, #0
 80005b2:	f002 ff6f 	bl	8003494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b6:	2318      	movs	r3, #24
 80005b8:	18fb      	adds	r3, r7, r3
 80005ba:	0018      	movs	r0, r3
 80005bc:	2314      	movs	r3, #20
 80005be:	001a      	movs	r2, r3
 80005c0:	2100      	movs	r1, #0
 80005c2:	f002 ff67 	bl	8003494 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005c6:	003b      	movs	r3, r7
 80005c8:	0018      	movs	r0, r3
 80005ca:	2318      	movs	r3, #24
 80005cc:	001a      	movs	r2, r3
 80005ce:	2100      	movs	r1, #0
 80005d0:	f002 ff60 	bl	8003494 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	4b29      	ldr	r3, [pc, #164]	; (800067c <SystemClock_Config+0xdc>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a29      	ldr	r2, [pc, #164]	; (8000680 <SystemClock_Config+0xe0>)
 80005da:	401a      	ands	r2, r3
 80005dc:	4b27      	ldr	r3, [pc, #156]	; (800067c <SystemClock_Config+0xdc>)
 80005de:	2180      	movs	r1, #128	; 0x80
 80005e0:	0109      	lsls	r1, r1, #4
 80005e2:	430a      	orrs	r2, r1
 80005e4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e6:	0021      	movs	r1, r4
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2201      	movs	r2, #1
 80005ec:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	22a0      	movs	r2, #160	; 0xa0
 80005f2:	02d2      	lsls	r2, r2, #11
 80005f4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	2202      	movs	r2, #2
 80005fa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	0252      	lsls	r2, r2, #9
 8000602:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	22c0      	movs	r2, #192	; 0xc0
 8000608:	0312      	lsls	r2, r2, #12
 800060a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2280      	movs	r2, #128	; 0x80
 8000610:	03d2      	lsls	r2, r2, #15
 8000612:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	187b      	adds	r3, r7, r1
 8000616:	0018      	movs	r0, r3
 8000618:	f000 fe24 	bl	8001264 <HAL_RCC_OscConfig>
 800061c:	1e03      	subs	r3, r0, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000620:	f000 f92a 	bl	8000878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	2118      	movs	r1, #24
 8000626:	187b      	adds	r3, r7, r1
 8000628:	220f      	movs	r2, #15
 800062a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2203      	movs	r2, #3
 8000630:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2101      	movs	r1, #1
 8000648:	0018      	movs	r0, r3
 800064a:	f001 f987 	bl	800195c <HAL_RCC_ClockConfig>
 800064e:	1e03      	subs	r3, r0, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000652:	f000 f911 	bl	8000878 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000656:	003b      	movs	r3, r7
 8000658:	2202      	movs	r2, #2
 800065a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800065c:	003b      	movs	r3, r7
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000662:	003b      	movs	r3, r7
 8000664:	0018      	movs	r0, r3
 8000666:	f001 fb9d 	bl	8001da4 <HAL_RCCEx_PeriphCLKConfig>
 800066a:	1e03      	subs	r3, r0, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800066e:	f000 f903 	bl	8000878 <Error_Handler>
  }
}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b019      	add	sp, #100	; 0x64
 8000678:	bd90      	pop	{r4, r7, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	40007000 	.word	0x40007000
 8000680:	ffffe7ff 	.word	0xffffe7ff

08000684 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800068a:	2318      	movs	r3, #24
 800068c:	18fb      	adds	r3, r7, r3
 800068e:	0018      	movs	r0, r3
 8000690:	2310      	movs	r3, #16
 8000692:	001a      	movs	r2, r3
 8000694:	2100      	movs	r1, #0
 8000696:	f002 fefd 	bl	8003494 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069a:	2310      	movs	r3, #16
 800069c:	18fb      	adds	r3, r7, r3
 800069e:	0018      	movs	r0, r3
 80006a0:	2308      	movs	r3, #8
 80006a2:	001a      	movs	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	f002 fef5 	bl	8003494 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006aa:	003b      	movs	r3, r7
 80006ac:	0018      	movs	r0, r3
 80006ae:	2310      	movs	r3, #16
 80006b0:	001a      	movs	r2, r3
 80006b2:	2100      	movs	r1, #0
 80006b4:	f002 feee 	bl	8003494 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006b8:	4b31      	ldr	r3, [pc, #196]	; (8000780 <MX_TIM2_Init+0xfc>)
 80006ba:	2280      	movs	r2, #128	; 0x80
 80006bc:	05d2      	lsls	r2, r2, #23
 80006be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 80006c0:	4b2f      	ldr	r3, [pc, #188]	; (8000780 <MX_TIM2_Init+0xfc>)
 80006c2:	4a30      	ldr	r2, [pc, #192]	; (8000784 <MX_TIM2_Init+0x100>)
 80006c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c6:	4b2e      	ldr	r3, [pc, #184]	; (8000780 <MX_TIM2_Init+0xfc>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3200;
 80006cc:	4b2c      	ldr	r3, [pc, #176]	; (8000780 <MX_TIM2_Init+0xfc>)
 80006ce:	22c8      	movs	r2, #200	; 0xc8
 80006d0:	0112      	lsls	r2, r2, #4
 80006d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d4:	4b2a      	ldr	r3, [pc, #168]	; (8000780 <MX_TIM2_Init+0xfc>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006da:	4b29      	ldr	r3, [pc, #164]	; (8000780 <MX_TIM2_Init+0xfc>)
 80006dc:	2200      	movs	r2, #0
 80006de:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006e0:	4b27      	ldr	r3, [pc, #156]	; (8000780 <MX_TIM2_Init+0xfc>)
 80006e2:	0018      	movs	r0, r3
 80006e4:	f001 fc8a 	bl	8001ffc <HAL_TIM_Base_Init>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80006ec:	f000 f8c4 	bl	8000878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f0:	2118      	movs	r1, #24
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2280      	movs	r2, #128	; 0x80
 80006f6:	0152      	lsls	r2, r2, #5
 80006f8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006fa:	187a      	adds	r2, r7, r1
 80006fc:	4b20      	ldr	r3, [pc, #128]	; (8000780 <MX_TIM2_Init+0xfc>)
 80006fe:	0011      	movs	r1, r2
 8000700:	0018      	movs	r0, r3
 8000702:	f001 fe99 	bl	8002438 <HAL_TIM_ConfigClockSource>
 8000706:	1e03      	subs	r3, r0, #0
 8000708:	d001      	beq.n	800070e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800070a:	f000 f8b5 	bl	8000878 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_TIM2_Init+0xfc>)
 8000710:	0018      	movs	r0, r3
 8000712:	f001 fcf7 	bl	8002104 <HAL_TIM_PWM_Init>
 8000716:	1e03      	subs	r3, r0, #0
 8000718:	d001      	beq.n	800071e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800071a:	f000 f8ad 	bl	8000878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800071e:	2110      	movs	r1, #16
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2200      	movs	r2, #0
 800072a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800072c:	187a      	adds	r2, r7, r1
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_TIM2_Init+0xfc>)
 8000730:	0011      	movs	r1, r2
 8000732:	0018      	movs	r0, r3
 8000734:	f002 f96a 	bl	8002a0c <HAL_TIMEx_MasterConfigSynchronization>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800073c:	f000 f89c 	bl	8000878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000740:	003b      	movs	r3, r7
 8000742:	2260      	movs	r2, #96	; 0x60
 8000744:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1600;
 8000746:	003b      	movs	r3, r7
 8000748:	22c8      	movs	r2, #200	; 0xc8
 800074a:	00d2      	lsls	r2, r2, #3
 800074c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800074e:	003b      	movs	r3, r7
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000754:	003b      	movs	r3, r7
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800075a:	0039      	movs	r1, r7
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_TIM2_Init+0xfc>)
 800075e:	2200      	movs	r2, #0
 8000760:	0018      	movs	r0, r3
 8000762:	f001 fda3 	bl	80022ac <HAL_TIM_PWM_ConfigChannel>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 800076a:	f000 f885 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800076e:	4b04      	ldr	r3, [pc, #16]	; (8000780 <MX_TIM2_Init+0xfc>)
 8000770:	0018      	movs	r0, r3
 8000772:	f000 f8b1 	bl	80008d8 <HAL_TIM_MspPostInit>

}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	46bd      	mov	sp, r7
 800077a:	b00a      	add	sp, #40	; 0x28
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	20000028 	.word	0x20000028
 8000784:	0000270f 	.word	0x0000270f

08000788 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 800078e:	4a15      	ldr	r2, [pc, #84]	; (80007e4 <MX_USART2_UART_Init+0x5c>)
 8000790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 8000794:	22e1      	movs	r2, #225	; 0xe1
 8000796:	0252      	lsls	r2, r2, #9
 8000798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007cc:	0018      	movs	r0, r3
 80007ce:	f002 f975 	bl	8002abc <HAL_UART_Init>
 80007d2:	1e03      	subs	r3, r0, #0
 80007d4:	d001      	beq.n	80007da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007d6:	f000 f84f 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000068 	.word	0x20000068
 80007e4:	40004400 	.word	0x40004400

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b089      	sub	sp, #36	; 0x24
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	240c      	movs	r4, #12
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	0018      	movs	r0, r3
 80007f4:	2314      	movs	r3, #20
 80007f6:	001a      	movs	r2, r3
 80007f8:	2100      	movs	r1, #0
 80007fa:	f002 fe4b 	bl	8003494 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <MX_GPIO_Init+0x88>)
 8000800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000802:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <MX_GPIO_Init+0x88>)
 8000804:	2104      	movs	r1, #4
 8000806:	430a      	orrs	r2, r1
 8000808:	62da      	str	r2, [r3, #44]	; 0x2c
 800080a:	4b19      	ldr	r3, [pc, #100]	; (8000870 <MX_GPIO_Init+0x88>)
 800080c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080e:	2204      	movs	r2, #4
 8000810:	4013      	ands	r3, r2
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <MX_GPIO_Init+0x88>)
 8000818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <MX_GPIO_Init+0x88>)
 800081c:	2180      	movs	r1, #128	; 0x80
 800081e:	430a      	orrs	r2, r1
 8000820:	62da      	str	r2, [r3, #44]	; 0x2c
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <MX_GPIO_Init+0x88>)
 8000824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000826:	2280      	movs	r2, #128	; 0x80
 8000828:	4013      	ands	r3, r2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <MX_GPIO_Init+0x88>)
 8000830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_GPIO_Init+0x88>)
 8000834:	2101      	movs	r1, #1
 8000836:	430a      	orrs	r2, r1
 8000838:	62da      	str	r2, [r3, #44]	; 0x2c
 800083a:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <MX_GPIO_Init+0x88>)
 800083c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083e:	2201      	movs	r2, #1
 8000840:	4013      	ands	r3, r2
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000846:	193b      	adds	r3, r7, r4
 8000848:	2280      	movs	r2, #128	; 0x80
 800084a:	0192      	lsls	r2, r2, #6
 800084c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_FALLING;
 800084e:	193b      	adds	r3, r7, r4
 8000850:	2288      	movs	r2, #136	; 0x88
 8000852:	0392      	lsls	r2, r2, #14
 8000854:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	193b      	adds	r3, r7, r4
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085c:	193b      	adds	r3, r7, r4
 800085e:	4a05      	ldr	r2, [pc, #20]	; (8000874 <MX_GPIO_Init+0x8c>)
 8000860:	0019      	movs	r1, r3
 8000862:	0010      	movs	r0, r2
 8000864:	f000 faa6 	bl	8000db4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	b009      	add	sp, #36	; 0x24
 800086e:	bd90      	pop	{r4, r7, pc}
 8000870:	40021000 	.word	0x40021000
 8000874:	50000800 	.word	0x50000800

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000880:	e7fe      	b.n	8000880 <Error_Handler+0x8>
	...

08000884 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <HAL_MspInit+0x24>)
 800088a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <HAL_MspInit+0x24>)
 800088e:	2101      	movs	r1, #1
 8000890:	430a      	orrs	r2, r1
 8000892:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <HAL_MspInit+0x24>)
 8000896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000898:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <HAL_MspInit+0x24>)
 800089a:	2180      	movs	r1, #128	; 0x80
 800089c:	0549      	lsls	r1, r1, #21
 800089e:	430a      	orrs	r2, r1
 80008a0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40021000 	.word	0x40021000

080008ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	05db      	lsls	r3, r3, #23
 80008bc:	429a      	cmp	r2, r3
 80008be:	d105      	bne.n	80008cc <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008c0:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <HAL_TIM_Base_MspInit+0x28>)
 80008c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008c4:	4b03      	ldr	r3, [pc, #12]	; (80008d4 <HAL_TIM_Base_MspInit+0x28>)
 80008c6:	2101      	movs	r1, #1
 80008c8:	430a      	orrs	r2, r1
 80008ca:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	b002      	add	sp, #8
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40021000 	.word	0x40021000

080008d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b089      	sub	sp, #36	; 0x24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	240c      	movs	r4, #12
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	0018      	movs	r0, r3
 80008e6:	2314      	movs	r3, #20
 80008e8:	001a      	movs	r2, r3
 80008ea:	2100      	movs	r1, #0
 80008ec:	f002 fdd2 	bl	8003494 <memset>
  if(htim->Instance==TIM2)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	05db      	lsls	r3, r3, #23
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d122      	bne.n	8000942 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fc:	4b13      	ldr	r3, [pc, #76]	; (800094c <HAL_TIM_MspPostInit+0x74>)
 80008fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_TIM_MspPostInit+0x74>)
 8000902:	2101      	movs	r1, #1
 8000904:	430a      	orrs	r2, r1
 8000906:	62da      	str	r2, [r3, #44]	; 0x2c
 8000908:	4b10      	ldr	r3, [pc, #64]	; (800094c <HAL_TIM_MspPostInit+0x74>)
 800090a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800090c:	2201      	movs	r2, #1
 800090e:	4013      	ands	r3, r2
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000914:	0021      	movs	r1, r4
 8000916:	187b      	adds	r3, r7, r1
 8000918:	2220      	movs	r2, #32
 800091a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	187b      	adds	r3, r7, r1
 800091e:	2202      	movs	r2, #2
 8000920:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2205      	movs	r2, #5
 8000932:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	187a      	adds	r2, r7, r1
 8000936:	23a0      	movs	r3, #160	; 0xa0
 8000938:	05db      	lsls	r3, r3, #23
 800093a:	0011      	movs	r1, r2
 800093c:	0018      	movs	r0, r3
 800093e:	f000 fa39 	bl	8000db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	b009      	add	sp, #36	; 0x24
 8000948:	bd90      	pop	{r4, r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	40021000 	.word	0x40021000

08000950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b089      	sub	sp, #36	; 0x24
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	240c      	movs	r4, #12
 800095a:	193b      	adds	r3, r7, r4
 800095c:	0018      	movs	r0, r3
 800095e:	2314      	movs	r3, #20
 8000960:	001a      	movs	r2, r3
 8000962:	2100      	movs	r1, #0
 8000964:	f002 fd96 	bl	8003494 <memset>
  if(huart->Instance==USART2)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a18      	ldr	r2, [pc, #96]	; (80009d0 <HAL_UART_MspInit+0x80>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d129      	bne.n	80009c6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <HAL_UART_MspInit+0x84>)
 8000974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <HAL_UART_MspInit+0x84>)
 8000978:	2180      	movs	r1, #128	; 0x80
 800097a:	0289      	lsls	r1, r1, #10
 800097c:	430a      	orrs	r2, r1
 800097e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <HAL_UART_MspInit+0x84>)
 8000982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000984:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <HAL_UART_MspInit+0x84>)
 8000986:	2101      	movs	r1, #1
 8000988:	430a      	orrs	r2, r1
 800098a:	62da      	str	r2, [r3, #44]	; 0x2c
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <HAL_UART_MspInit+0x84>)
 800098e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000990:	2201      	movs	r2, #1
 8000992:	4013      	ands	r3, r2
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000998:	0021      	movs	r1, r4
 800099a:	187b      	adds	r3, r7, r1
 800099c:	220c      	movs	r2, #12
 800099e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	2202      	movs	r2, #2
 80009a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2203      	movs	r2, #3
 80009b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2204      	movs	r2, #4
 80009b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	187a      	adds	r2, r7, r1
 80009ba:	23a0      	movs	r3, #160	; 0xa0
 80009bc:	05db      	lsls	r3, r3, #23
 80009be:	0011      	movs	r1, r2
 80009c0:	0018      	movs	r0, r3
 80009c2:	f000 f9f7 	bl	8000db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b009      	add	sp, #36	; 0x24
 80009cc:	bd90      	pop	{r4, r7, pc}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	40004400 	.word	0x40004400
 80009d4:	40021000 	.word	0x40021000

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <NMI_Handler+0x4>

080009de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <HardFault_Handler+0x4>

080009e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fc:	f000 f89e 	bl	8000b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000a10:	4813      	ldr	r0, [pc, #76]	; (8000a60 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000a12:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a14:	f7ff fff7 	bl	8000a06 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000a18:	4812      	ldr	r0, [pc, #72]	; (8000a64 <LoopForever+0x6>)
    LDR R1, [R0]
 8000a1a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000a1c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000a1e:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <LoopForever+0xa>)
    CMP R1, R2
 8000a20:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000a22:	d105      	bne.n	8000a30 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000a24:	4811      	ldr	r0, [pc, #68]	; (8000a6c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000a26:	4912      	ldr	r1, [pc, #72]	; (8000a70 <LoopForever+0x12>)
    STR R1, [R0]
 8000a28:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000a2a:	4812      	ldr	r0, [pc, #72]	; (8000a74 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000a2c:	4912      	ldr	r1, [pc, #72]	; (8000a78 <LoopForever+0x1a>)
    STR R1, [R0]
 8000a2e:	6001      	str	r1, [r0, #0]

08000a30 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a30:	4812      	ldr	r0, [pc, #72]	; (8000a7c <LoopForever+0x1e>)
  ldr r1, =_edata
 8000a32:	4913      	ldr	r1, [pc, #76]	; (8000a80 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000a34:	4a13      	ldr	r2, [pc, #76]	; (8000a84 <LoopForever+0x26>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a38:	e002      	b.n	8000a40 <LoopCopyDataInit>

08000a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3e:	3304      	adds	r3, #4

08000a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a44:	d3f9      	bcc.n	8000a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a46:	4a10      	ldr	r2, [pc, #64]	; (8000a88 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000a48:	4c10      	ldr	r4, [pc, #64]	; (8000a8c <LoopForever+0x2e>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a4c:	e001      	b.n	8000a52 <LoopFillZerobss>

08000a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a50:	3204      	adds	r2, #4

08000a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a54:	d3fb      	bcc.n	8000a4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a56:	f002 fcf9 	bl	800344c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5a:	f7ff fd25 	bl	80004a8 <main>

08000a5e <LoopForever>:

LoopForever:
    b LoopForever
 8000a5e:	e7fe      	b.n	8000a5e <LoopForever>
   ldr   r0, =_estack
 8000a60:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8000a64:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000a68:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000a6c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000a70:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000a74:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000a78:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a84:	08003538 	.word	0x08003538
  ldr r2, =_sbss
 8000a88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a8c:	20000100 	.word	0x20000100

08000a90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a90:	e7fe      	b.n	8000a90 <ADC1_IRQHandler>
	...

08000a94 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <HAL_Init+0x3c>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <HAL_Init+0x3c>)
 8000aa6:	2140      	movs	r1, #64	; 0x40
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aac:	2000      	movs	r0, #0
 8000aae:	f000 f811 	bl	8000ad4 <HAL_InitTick>
 8000ab2:	1e03      	subs	r3, r0, #0
 8000ab4:	d003      	beq.n	8000abe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	2201      	movs	r2, #1
 8000aba:	701a      	strb	r2, [r3, #0]
 8000abc:	e001      	b.n	8000ac2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000abe:	f7ff fee1 	bl	8000884 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
}
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b002      	add	sp, #8
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	40022000 	.word	0x40022000

08000ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000adc:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <HAL_InitTick+0x5c>)
 8000ade:	681c      	ldr	r4, [r3, #0]
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <HAL_InitTick+0x60>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	0019      	movs	r1, r3
 8000ae6:	23fa      	movs	r3, #250	; 0xfa
 8000ae8:	0098      	lsls	r0, r3, #2
 8000aea:	f7ff fb0d 	bl	8000108 <__udivsi3>
 8000aee:	0003      	movs	r3, r0
 8000af0:	0019      	movs	r1, r3
 8000af2:	0020      	movs	r0, r4
 8000af4:	f7ff fb08 	bl	8000108 <__udivsi3>
 8000af8:	0003      	movs	r3, r0
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 f93d 	bl	8000d7a <HAL_SYSTICK_Config>
 8000b00:	1e03      	subs	r3, r0, #0
 8000b02:	d001      	beq.n	8000b08 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e00f      	b.n	8000b28 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b03      	cmp	r3, #3
 8000b0c:	d80b      	bhi.n	8000b26 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	2301      	movs	r3, #1
 8000b12:	425b      	negs	r3, r3
 8000b14:	2200      	movs	r2, #0
 8000b16:	0018      	movs	r0, r3
 8000b18:	f000 f91a 	bl	8000d50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_InitTick+0x64>)
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	e000      	b.n	8000b28 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	0018      	movs	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b003      	add	sp, #12
 8000b2e:	bd90      	pop	{r4, r7, pc}
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20000004 	.word	0x20000004

08000b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_IncTick+0x1c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	001a      	movs	r2, r3
 8000b46:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_IncTick+0x20>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	18d2      	adds	r2, r2, r3
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <HAL_IncTick+0x20>)
 8000b4e:	601a      	str	r2, [r3, #0]
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	200000fc 	.word	0x200000fc

08000b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b02      	ldr	r3, [pc, #8]	; (8000b70 <HAL_GetTick+0x10>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	0018      	movs	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	200000fc 	.word	0x200000fc

08000b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b7c:	f7ff fff0 	bl	8000b60 <HAL_GetTick>
 8000b80:	0003      	movs	r3, r0
 8000b82:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	d005      	beq.n	8000b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_Delay+0x44>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	001a      	movs	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	189b      	adds	r3, r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	f7ff ffe0 	bl	8000b60 <HAL_GetTick>
 8000ba0:	0002      	movs	r2, r0
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d8f7      	bhi.n	8000b9c <HAL_Delay+0x28>
  {
  }
}
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	b004      	add	sp, #16
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	20000008 	.word	0x20000008

08000bbc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <HAL_SuspendTick+0x18>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <HAL_SuspendTick+0x18>)
 8000bc6:	2102      	movs	r1, #2
 8000bc8:	438a      	bics	r2, r1
 8000bca:	601a      	str	r2, [r3, #0]
}
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	e000e010 	.word	0xe000e010

08000bd8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <HAL_ResumeTick+0x18>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <HAL_ResumeTick+0x18>)
 8000be2:	2102      	movs	r1, #2
 8000be4:	430a      	orrs	r2, r1
 8000be6:	601a      	str	r2, [r3, #0]
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	e000e010 	.word	0xe000e010

08000bf4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	0002      	movs	r2, r0
 8000bfc:	1dfb      	adds	r3, r7, #7
 8000bfe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c00:	1dfb      	adds	r3, r7, #7
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b7f      	cmp	r3, #127	; 0x7f
 8000c06:	d80a      	bhi.n	8000c1e <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c08:	1dfb      	adds	r3, r7, #7
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	001a      	movs	r2, r3
 8000c0e:	231f      	movs	r3, #31
 8000c10:	4013      	ands	r3, r2
 8000c12:	4905      	ldr	r1, [pc, #20]	; (8000c28 <__NVIC_ClearPendingIRQ+0x34>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	409a      	lsls	r2, r3
 8000c18:	23c0      	movs	r3, #192	; 0xc0
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	50ca      	str	r2, [r1, r3]
  }
}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b002      	add	sp, #8
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	e000e100 	.word	0xe000e100

08000c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	0002      	movs	r2, r0
 8000c34:	6039      	str	r1, [r7, #0]
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b7f      	cmp	r3, #127	; 0x7f
 8000c40:	d828      	bhi.n	8000c94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c42:	4a2f      	ldr	r2, [pc, #188]	; (8000d00 <__NVIC_SetPriority+0xd4>)
 8000c44:	1dfb      	adds	r3, r7, #7
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b25b      	sxtb	r3, r3
 8000c4a:	089b      	lsrs	r3, r3, #2
 8000c4c:	33c0      	adds	r3, #192	; 0xc0
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	589b      	ldr	r3, [r3, r2]
 8000c52:	1dfa      	adds	r2, r7, #7
 8000c54:	7812      	ldrb	r2, [r2, #0]
 8000c56:	0011      	movs	r1, r2
 8000c58:	2203      	movs	r2, #3
 8000c5a:	400a      	ands	r2, r1
 8000c5c:	00d2      	lsls	r2, r2, #3
 8000c5e:	21ff      	movs	r1, #255	; 0xff
 8000c60:	4091      	lsls	r1, r2
 8000c62:	000a      	movs	r2, r1
 8000c64:	43d2      	mvns	r2, r2
 8000c66:	401a      	ands	r2, r3
 8000c68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	019b      	lsls	r3, r3, #6
 8000c6e:	22ff      	movs	r2, #255	; 0xff
 8000c70:	401a      	ands	r2, r3
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	0018      	movs	r0, r3
 8000c78:	2303      	movs	r3, #3
 8000c7a:	4003      	ands	r3, r0
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c80:	481f      	ldr	r0, [pc, #124]	; (8000d00 <__NVIC_SetPriority+0xd4>)
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	b25b      	sxtb	r3, r3
 8000c88:	089b      	lsrs	r3, r3, #2
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	33c0      	adds	r3, #192	; 0xc0
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c92:	e031      	b.n	8000cf8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c94:	4a1b      	ldr	r2, [pc, #108]	; (8000d04 <__NVIC_SetPriority+0xd8>)
 8000c96:	1dfb      	adds	r3, r7, #7
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	0019      	movs	r1, r3
 8000c9c:	230f      	movs	r3, #15
 8000c9e:	400b      	ands	r3, r1
 8000ca0:	3b08      	subs	r3, #8
 8000ca2:	089b      	lsrs	r3, r3, #2
 8000ca4:	3306      	adds	r3, #6
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	18d3      	adds	r3, r2, r3
 8000caa:	3304      	adds	r3, #4
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	1dfa      	adds	r2, r7, #7
 8000cb0:	7812      	ldrb	r2, [r2, #0]
 8000cb2:	0011      	movs	r1, r2
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	400a      	ands	r2, r1
 8000cb8:	00d2      	lsls	r2, r2, #3
 8000cba:	21ff      	movs	r1, #255	; 0xff
 8000cbc:	4091      	lsls	r1, r2
 8000cbe:	000a      	movs	r2, r1
 8000cc0:	43d2      	mvns	r2, r2
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	019b      	lsls	r3, r3, #6
 8000cca:	22ff      	movs	r2, #255	; 0xff
 8000ccc:	401a      	ands	r2, r3
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	4003      	ands	r3, r0
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cdc:	4809      	ldr	r0, [pc, #36]	; (8000d04 <__NVIC_SetPriority+0xd8>)
 8000cde:	1dfb      	adds	r3, r7, #7
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	001c      	movs	r4, r3
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	4023      	ands	r3, r4
 8000ce8:	3b08      	subs	r3, #8
 8000cea:	089b      	lsrs	r3, r3, #2
 8000cec:	430a      	orrs	r2, r1
 8000cee:	3306      	adds	r3, #6
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	18c3      	adds	r3, r0, r3
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	601a      	str	r2, [r3, #0]
}
 8000cf8:	46c0      	nop			; (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	b003      	add	sp, #12
 8000cfe:	bd90      	pop	{r4, r7, pc}
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	1e5a      	subs	r2, r3, #1
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	045b      	lsls	r3, r3, #17
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d301      	bcc.n	8000d20 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e010      	b.n	8000d42 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d20:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <SysTick_Config+0x44>)
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	3a01      	subs	r2, #1
 8000d26:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d28:	2301      	movs	r3, #1
 8000d2a:	425b      	negs	r3, r3
 8000d2c:	2103      	movs	r1, #3
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f7ff ff7c 	bl	8000c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <SysTick_Config+0x44>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3a:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <SysTick_Config+0x44>)
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	0018      	movs	r0, r3
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b002      	add	sp, #8
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	e000e010 	.word	0xe000e010

08000d50 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
 8000d5a:	210f      	movs	r1, #15
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	1c02      	adds	r2, r0, #0
 8000d60:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	0011      	movs	r1, r2
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff ff5d 	bl	8000c2c <__NVIC_SetPriority>
}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b004      	add	sp, #16
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	0018      	movs	r0, r3
 8000d86:	f7ff ffbf 	bl	8000d08 <SysTick_Config>
 8000d8a:	0003      	movs	r3, r0
}
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b002      	add	sp, #8
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	0002      	movs	r2, r0
 8000d9c:	1dfb      	adds	r3, r7, #7
 8000d9e:	701a      	strb	r2, [r3, #0]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8000da0:	1dfb      	adds	r3, r7, #7
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b25b      	sxtb	r3, r3
 8000da6:	0018      	movs	r0, r3
 8000da8:	f7ff ff24 	bl	8000bf4 <__NVIC_ClearPendingIRQ>
}
 8000dac:	46c0      	nop			; (mov r8, r8)
 8000dae:	46bd      	mov	sp, r7
 8000db0:	b002      	add	sp, #8
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000dca:	e155      	b.n	8001078 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	4091      	lsls	r1, r2
 8000dd6:	000a      	movs	r2, r1
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d100      	bne.n	8000de4 <HAL_GPIO_Init+0x30>
 8000de2:	e146      	b.n	8001072 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2203      	movs	r2, #3
 8000dea:	4013      	ands	r3, r2
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d005      	beq.n	8000dfc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2203      	movs	r2, #3
 8000df6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d130      	bne.n	8000e5e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	409a      	lsls	r2, r3
 8000e0a:	0013      	movs	r3, r2
 8000e0c:	43da      	mvns	r2, r3
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	68da      	ldr	r2, [r3, #12]
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	409a      	lsls	r2, r3
 8000e1e:	0013      	movs	r3, r2
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e32:	2201      	movs	r2, #1
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
 8000e38:	0013      	movs	r3, r2
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	091b      	lsrs	r3, r3, #4
 8000e48:	2201      	movs	r2, #1
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
 8000e50:	0013      	movs	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2203      	movs	r2, #3
 8000e64:	4013      	ands	r3, r2
 8000e66:	2b03      	cmp	r3, #3
 8000e68:	d017      	beq.n	8000e9a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	2203      	movs	r2, #3
 8000e76:	409a      	lsls	r2, r3
 8000e78:	0013      	movs	r3, r2
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	689a      	ldr	r2, [r3, #8]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	409a      	lsls	r2, r3
 8000e8c:	0013      	movs	r3, r2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d123      	bne.n	8000eee <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	08da      	lsrs	r2, r3, #3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3208      	adds	r2, #8
 8000eae:	0092      	lsls	r2, r2, #2
 8000eb0:	58d3      	ldr	r3, [r2, r3]
 8000eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	2207      	movs	r2, #7
 8000eb8:	4013      	ands	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	220f      	movs	r2, #15
 8000ebe:	409a      	lsls	r2, r3
 8000ec0:	0013      	movs	r3, r2
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	691a      	ldr	r2, [r3, #16]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	2107      	movs	r1, #7
 8000ed2:	400b      	ands	r3, r1
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	409a      	lsls	r2, r3
 8000ed8:	0013      	movs	r3, r2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	08da      	lsrs	r2, r3, #3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3208      	adds	r2, #8
 8000ee8:	0092      	lsls	r2, r2, #2
 8000eea:	6939      	ldr	r1, [r7, #16]
 8000eec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	2203      	movs	r2, #3
 8000efa:	409a      	lsls	r2, r3
 8000efc:	0013      	movs	r3, r2
 8000efe:	43da      	mvns	r2, r3
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	401a      	ands	r2, r3
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	409a      	lsls	r2, r3
 8000f14:	0013      	movs	r3, r2
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	23c0      	movs	r3, #192	; 0xc0
 8000f28:	029b      	lsls	r3, r3, #10
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	d100      	bne.n	8000f30 <HAL_GPIO_Init+0x17c>
 8000f2e:	e0a0      	b.n	8001072 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f30:	4b57      	ldr	r3, [pc, #348]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 8000f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f34:	4b56      	ldr	r3, [pc, #344]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 8000f36:	2101      	movs	r1, #1
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f3c:	4a55      	ldr	r2, [pc, #340]	; (8001094 <HAL_GPIO_Init+0x2e0>)
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	089b      	lsrs	r3, r3, #2
 8000f42:	3302      	adds	r3, #2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	589b      	ldr	r3, [r3, r2]
 8000f48:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	4013      	ands	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	220f      	movs	r2, #15
 8000f54:	409a      	lsls	r2, r3
 8000f56:	0013      	movs	r3, r2
 8000f58:	43da      	mvns	r2, r3
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	23a0      	movs	r3, #160	; 0xa0
 8000f64:	05db      	lsls	r3, r3, #23
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d01f      	beq.n	8000faa <HAL_GPIO_Init+0x1f6>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4a      	ldr	r2, [pc, #296]	; (8001098 <HAL_GPIO_Init+0x2e4>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d019      	beq.n	8000fa6 <HAL_GPIO_Init+0x1f2>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a49      	ldr	r2, [pc, #292]	; (800109c <HAL_GPIO_Init+0x2e8>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d013      	beq.n	8000fa2 <HAL_GPIO_Init+0x1ee>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a48      	ldr	r2, [pc, #288]	; (80010a0 <HAL_GPIO_Init+0x2ec>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d00d      	beq.n	8000f9e <HAL_GPIO_Init+0x1ea>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a47      	ldr	r2, [pc, #284]	; (80010a4 <HAL_GPIO_Init+0x2f0>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d007      	beq.n	8000f9a <HAL_GPIO_Init+0x1e6>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a46      	ldr	r2, [pc, #280]	; (80010a8 <HAL_GPIO_Init+0x2f4>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d101      	bne.n	8000f96 <HAL_GPIO_Init+0x1e2>
 8000f92:	2305      	movs	r3, #5
 8000f94:	e00a      	b.n	8000fac <HAL_GPIO_Init+0x1f8>
 8000f96:	2306      	movs	r3, #6
 8000f98:	e008      	b.n	8000fac <HAL_GPIO_Init+0x1f8>
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	e006      	b.n	8000fac <HAL_GPIO_Init+0x1f8>
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e004      	b.n	8000fac <HAL_GPIO_Init+0x1f8>
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	e002      	b.n	8000fac <HAL_GPIO_Init+0x1f8>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e000      	b.n	8000fac <HAL_GPIO_Init+0x1f8>
 8000faa:	2300      	movs	r3, #0
 8000fac:	697a      	ldr	r2, [r7, #20]
 8000fae:	2103      	movs	r1, #3
 8000fb0:	400a      	ands	r2, r1
 8000fb2:	0092      	lsls	r2, r2, #2
 8000fb4:	4093      	lsls	r3, r2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fbc:	4935      	ldr	r1, [pc, #212]	; (8001094 <HAL_GPIO_Init+0x2e0>)
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	089b      	lsrs	r3, r3, #2
 8000fc2:	3302      	adds	r3, #2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fca:	4b38      	ldr	r3, [pc, #224]	; (80010ac <HAL_GPIO_Init+0x2f8>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	2380      	movs	r3, #128	; 0x80
 8000fe0:	035b      	lsls	r3, r3, #13
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fee:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <HAL_GPIO_Init+0x2f8>)
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ff4:	4b2d      	ldr	r3, [pc, #180]	; (80010ac <HAL_GPIO_Init+0x2f8>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	43da      	mvns	r2, r3
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685a      	ldr	r2, [r3, #4]
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	039b      	lsls	r3, r3, #14
 800100c:	4013      	ands	r3, r2
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001018:	4b24      	ldr	r3, [pc, #144]	; (80010ac <HAL_GPIO_Init+0x2f8>)
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800101e:	4b23      	ldr	r3, [pc, #140]	; (80010ac <HAL_GPIO_Init+0x2f8>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	43da      	mvns	r2, r3
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	2380      	movs	r3, #128	; 0x80
 8001034:	029b      	lsls	r3, r3, #10
 8001036:	4013      	ands	r3, r2
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001042:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <HAL_GPIO_Init+0x2f8>)
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001048:	4b18      	ldr	r3, [pc, #96]	; (80010ac <HAL_GPIO_Init+0x2f8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	43da      	mvns	r2, r3
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	025b      	lsls	r3, r3, #9
 8001060:	4013      	ands	r3, r2
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <HAL_GPIO_Init+0x2f8>)
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	3301      	adds	r3, #1
 8001076:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	40da      	lsrs	r2, r3
 8001080:	1e13      	subs	r3, r2, #0
 8001082:	d000      	beq.n	8001086 <HAL_GPIO_Init+0x2d2>
 8001084:	e6a2      	b.n	8000dcc <HAL_GPIO_Init+0x18>
  }
}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	b006      	add	sp, #24
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40021000 	.word	0x40021000
 8001094:	40010000 	.word	0x40010000
 8001098:	50000400 	.word	0x50000400
 800109c:	50000800 	.word	0x50000800
 80010a0:	50000c00 	.word	0x50000c00
 80010a4:	50001000 	.word	0x50001000
 80010a8:	50001c00 	.word	0x50001c00
 80010ac:	40010400 	.word	0x40010400

080010b0 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2
  *           @arg PWR_WAKEUP_PIN3 for stm32l07xxx and stm32l08xxx devices only.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <HAL_PWR_EnableWakeUpPin+0x1c>)
 80010ba:	6859      	ldr	r1, [r3, #4]
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <HAL_PWR_EnableWakeUpPin+0x1c>)
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	430a      	orrs	r2, r1
 80010c2:	605a      	str	r2, [r3, #4]
}
 80010c4:	46c0      	nop			; (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	b002      	add	sp, #8
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40007000 	.word	0x40007000

080010d0 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	000a      	movs	r2, r1
 80010da:	1cfb      	adds	r3, r7, #3
 80010dc:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80010e2:	4b23      	ldr	r3, [pc, #140]	; (8001170 <HAL_PWR_EnterSLEEPMode+0xa0>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80010ee:	4b21      	ldr	r3, [pc, #132]	; (8001174 <HAL_PWR_EnterSLEEPMode+0xa4>)
 80010f0:	6a1b      	ldr	r3, [r3, #32]
 80010f2:	2201      	movs	r2, #1
 80010f4:	4013      	ands	r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d008      	beq.n	8001110 <HAL_PWR_EnterSLEEPMode+0x40>
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d005      	beq.n	8001110 <HAL_PWR_EnterSLEEPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8001104:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b19      	ldr	r3, [pc, #100]	; (8001170 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800110a:	491b      	ldr	r1, [pc, #108]	; (8001178 <HAL_PWR_EnterSLEEPMode+0xa8>)
 800110c:	400a      	ands	r2, r1
 800110e:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	617b      	str	r3, [r7, #20]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	2203      	movs	r2, #3
 800111a:	4393      	bics	r3, r2
 800111c:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4313      	orrs	r3, r2
 8001124:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8001126:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <HAL_PWR_EnterSLEEPMode+0xac>)
 800112e:	691a      	ldr	r2, [r3, #16]
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_PWR_EnterSLEEPMode+0xac>)
 8001132:	2104      	movs	r1, #4
 8001134:	438a      	bics	r2, r1
 8001136:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001138:	1cfb      	adds	r3, r7, #3
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d101      	bne.n	8001144 <HAL_PWR_EnterSLEEPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001140:	bf30      	wfi
 8001142:	e002      	b.n	800114a <HAL_PWR_EnterSLEEPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001144:	bf40      	sev
    __WFE();
 8001146:	bf20      	wfe
    __WFE();
 8001148:	bf20      	wfe
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d009      	beq.n	8001164 <HAL_PWR_EnterSLEEPMode+0x94>
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d006      	beq.n	8001164 <HAL_PWR_EnterSLEEPMode+0x94>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4b05      	ldr	r3, [pc, #20]	; (8001170 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800115c:	2180      	movs	r1, #128	; 0x80
 800115e:	0089      	lsls	r1, r1, #2
 8001160:	430a      	orrs	r2, r1
 8001162:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8001164:	46c0      	nop			; (mov r8, r8)

}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	46bd      	mov	sp, r7
 800116a:	b006      	add	sp, #24
 800116c:	bd80      	pop	{r7, pc}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	40007000 	.word	0x40007000
 8001174:	40010000 	.word	0x40010000
 8001178:	fffffdff 	.word	0xfffffdff
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	000a      	movs	r2, r1
 800118a:	1cfb      	adds	r3, r7, #3
 800118c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 800119e:	4b23      	ldr	r3, [pc, #140]	; (800122c <HAL_PWR_EnterSTOPMode+0xac>)
 80011a0:	6a1b      	ldr	r3, [r3, #32]
 80011a2:	2201      	movs	r2, #1
 80011a4:	4013      	ands	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d008      	beq.n	80011c0 <HAL_PWR_EnterSTOPMode+0x40>
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d005      	beq.n	80011c0 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80011b4:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <HAL_PWR_EnterSTOPMode+0xa8>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <HAL_PWR_EnterSTOPMode+0xa8>)
 80011ba:	491d      	ldr	r1, [pc, #116]	; (8001230 <HAL_PWR_EnterSTOPMode+0xb0>)
 80011bc:	400a      	ands	r2, r1
 80011be:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <HAL_PWR_EnterSTOPMode+0xa8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	2203      	movs	r2, #3
 80011ca:	4393      	bics	r3, r2
 80011cc:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <HAL_PWR_EnterSTOPMode+0xa8>)
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_PWR_EnterSTOPMode+0xb4>)
 80011de:	691a      	ldr	r2, [r3, #16]
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <HAL_PWR_EnterSTOPMode+0xb4>)
 80011e2:	2104      	movs	r1, #4
 80011e4:	430a      	orrs	r2, r1
 80011e6:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80011e8:	1cfb      	adds	r3, r7, #3
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d101      	bne.n	80011f4 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80011f0:	bf30      	wfi
 80011f2:	e002      	b.n	80011fa <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80011f4:	bf40      	sev
    __WFE();
 80011f6:	bf20      	wfe
    __WFE();
 80011f8:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <HAL_PWR_EnterSTOPMode+0xb4>)
 80011fc:	691a      	ldr	r2, [r3, #16]
 80011fe:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001200:	2104      	movs	r1, #4
 8001202:	438a      	bics	r2, r1
 8001204:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d009      	beq.n	8001220 <HAL_PWR_EnterSTOPMode+0xa0>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d006      	beq.n	8001220 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	4b04      	ldr	r3, [pc, #16]	; (8001228 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001218:	2180      	movs	r1, #128	; 0x80
 800121a:	0089      	lsls	r1, r1, #2
 800121c:	430a      	orrs	r2, r1
 800121e:	601a      	str	r2, [r3, #0]
  }
}
 8001220:	46c0      	nop			; (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	b006      	add	sp, #24
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40007000 	.word	0x40007000
 800122c:	40010000 	.word	0x40010000
 8001230:	fffffdff 	.word	0xfffffdff
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800123c:	4b07      	ldr	r3, [pc, #28]	; (800125c <HAL_PWR_EnterSTANDBYMode+0x24>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_PWR_EnterSTANDBYMode+0x24>)
 8001242:	2102      	movs	r1, #2
 8001244:	430a      	orrs	r2, r1
 8001246:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800124a:	691a      	ldr	r2, [r3, #16]
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800124e:	2104      	movs	r1, #4
 8001250:	430a      	orrs	r2, r1
 8001252:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8001254:	bf30      	wfi
}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40007000 	.word	0x40007000
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001264:	b5b0      	push	{r4, r5, r7, lr}
 8001266:	b08a      	sub	sp, #40	; 0x28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d102      	bne.n	8001278 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	f000 fb6c 	bl	8001950 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001278:	4bc8      	ldr	r3, [pc, #800]	; (800159c <HAL_RCC_OscConfig+0x338>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	220c      	movs	r2, #12
 800127e:	4013      	ands	r3, r2
 8001280:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001282:	4bc6      	ldr	r3, [pc, #792]	; (800159c <HAL_RCC_OscConfig+0x338>)
 8001284:	68da      	ldr	r2, [r3, #12]
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	025b      	lsls	r3, r3, #9
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2201      	movs	r2, #1
 8001294:	4013      	ands	r3, r2
 8001296:	d100      	bne.n	800129a <HAL_RCC_OscConfig+0x36>
 8001298:	e07d      	b.n	8001396 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	2b08      	cmp	r3, #8
 800129e:	d007      	beq.n	80012b0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	2b0c      	cmp	r3, #12
 80012a4:	d112      	bne.n	80012cc <HAL_RCC_OscConfig+0x68>
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	2380      	movs	r3, #128	; 0x80
 80012aa:	025b      	lsls	r3, r3, #9
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d10d      	bne.n	80012cc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b0:	4bba      	ldr	r3, [pc, #744]	; (800159c <HAL_RCC_OscConfig+0x338>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	2380      	movs	r3, #128	; 0x80
 80012b6:	029b      	lsls	r3, r3, #10
 80012b8:	4013      	ands	r3, r2
 80012ba:	d100      	bne.n	80012be <HAL_RCC_OscConfig+0x5a>
 80012bc:	e06a      	b.n	8001394 <HAL_RCC_OscConfig+0x130>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d166      	bne.n	8001394 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	f000 fb42 	bl	8001950 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	025b      	lsls	r3, r3, #9
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d107      	bne.n	80012e8 <HAL_RCC_OscConfig+0x84>
 80012d8:	4bb0      	ldr	r3, [pc, #704]	; (800159c <HAL_RCC_OscConfig+0x338>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4baf      	ldr	r3, [pc, #700]	; (800159c <HAL_RCC_OscConfig+0x338>)
 80012de:	2180      	movs	r1, #128	; 0x80
 80012e0:	0249      	lsls	r1, r1, #9
 80012e2:	430a      	orrs	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	e027      	b.n	8001338 <HAL_RCC_OscConfig+0xd4>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	23a0      	movs	r3, #160	; 0xa0
 80012ee:	02db      	lsls	r3, r3, #11
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d10e      	bne.n	8001312 <HAL_RCC_OscConfig+0xae>
 80012f4:	4ba9      	ldr	r3, [pc, #676]	; (800159c <HAL_RCC_OscConfig+0x338>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4ba8      	ldr	r3, [pc, #672]	; (800159c <HAL_RCC_OscConfig+0x338>)
 80012fa:	2180      	movs	r1, #128	; 0x80
 80012fc:	02c9      	lsls	r1, r1, #11
 80012fe:	430a      	orrs	r2, r1
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	4ba6      	ldr	r3, [pc, #664]	; (800159c <HAL_RCC_OscConfig+0x338>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4ba5      	ldr	r3, [pc, #660]	; (800159c <HAL_RCC_OscConfig+0x338>)
 8001308:	2180      	movs	r1, #128	; 0x80
 800130a:	0249      	lsls	r1, r1, #9
 800130c:	430a      	orrs	r2, r1
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	e012      	b.n	8001338 <HAL_RCC_OscConfig+0xd4>
 8001312:	4ba2      	ldr	r3, [pc, #648]	; (800159c <HAL_RCC_OscConfig+0x338>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4ba1      	ldr	r3, [pc, #644]	; (800159c <HAL_RCC_OscConfig+0x338>)
 8001318:	49a1      	ldr	r1, [pc, #644]	; (80015a0 <HAL_RCC_OscConfig+0x33c>)
 800131a:	400a      	ands	r2, r1
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	4b9f      	ldr	r3, [pc, #636]	; (800159c <HAL_RCC_OscConfig+0x338>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	025b      	lsls	r3, r3, #9
 8001326:	4013      	ands	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4b9b      	ldr	r3, [pc, #620]	; (800159c <HAL_RCC_OscConfig+0x338>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b9a      	ldr	r3, [pc, #616]	; (800159c <HAL_RCC_OscConfig+0x338>)
 8001332:	499c      	ldr	r1, [pc, #624]	; (80015a4 <HAL_RCC_OscConfig+0x340>)
 8001334:	400a      	ands	r2, r1
 8001336:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d014      	beq.n	800136a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fc0e 	bl	8000b60 <HAL_GetTick>
 8001344:	0003      	movs	r3, r0
 8001346:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800134a:	f7ff fc09 	bl	8000b60 <HAL_GetTick>
 800134e:	0002      	movs	r2, r0
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b64      	cmp	r3, #100	; 0x64
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e2f9      	b.n	8001950 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800135c:	4b8f      	ldr	r3, [pc, #572]	; (800159c <HAL_RCC_OscConfig+0x338>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	029b      	lsls	r3, r3, #10
 8001364:	4013      	ands	r3, r2
 8001366:	d0f0      	beq.n	800134a <HAL_RCC_OscConfig+0xe6>
 8001368:	e015      	b.n	8001396 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136a:	f7ff fbf9 	bl	8000b60 <HAL_GetTick>
 800136e:	0003      	movs	r3, r0
 8001370:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001374:	f7ff fbf4 	bl	8000b60 <HAL_GetTick>
 8001378:	0002      	movs	r2, r0
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b64      	cmp	r3, #100	; 0x64
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e2e4      	b.n	8001950 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001386:	4b85      	ldr	r3, [pc, #532]	; (800159c <HAL_RCC_OscConfig+0x338>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	2380      	movs	r3, #128	; 0x80
 800138c:	029b      	lsls	r3, r3, #10
 800138e:	4013      	ands	r3, r2
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0x110>
 8001392:	e000      	b.n	8001396 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001394:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2202      	movs	r2, #2
 800139c:	4013      	ands	r3, r2
 800139e:	d100      	bne.n	80013a2 <HAL_RCC_OscConfig+0x13e>
 80013a0:	e099      	b.n	80014d6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	2220      	movs	r2, #32
 80013ac:	4013      	ands	r3, r2
 80013ae:	d009      	beq.n	80013c4 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80013b0:	4b7a      	ldr	r3, [pc, #488]	; (800159c <HAL_RCC_OscConfig+0x338>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b79      	ldr	r3, [pc, #484]	; (800159c <HAL_RCC_OscConfig+0x338>)
 80013b6:	2120      	movs	r1, #32
 80013b8:	430a      	orrs	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	2220      	movs	r2, #32
 80013c0:	4393      	bics	r3, r2
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d005      	beq.n	80013d6 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	2b0c      	cmp	r3, #12
 80013ce:	d13e      	bne.n	800144e <HAL_RCC_OscConfig+0x1ea>
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d13b      	bne.n	800144e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80013d6:	4b71      	ldr	r3, [pc, #452]	; (800159c <HAL_RCC_OscConfig+0x338>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2204      	movs	r2, #4
 80013dc:	4013      	ands	r3, r2
 80013de:	d004      	beq.n	80013ea <HAL_RCC_OscConfig+0x186>
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e2b2      	b.n	8001950 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ea:	4b6c      	ldr	r3, [pc, #432]	; (800159c <HAL_RCC_OscConfig+0x338>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	4a6e      	ldr	r2, [pc, #440]	; (80015a8 <HAL_RCC_OscConfig+0x344>)
 80013f0:	4013      	ands	r3, r2
 80013f2:	0019      	movs	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	021a      	lsls	r2, r3, #8
 80013fa:	4b68      	ldr	r3, [pc, #416]	; (800159c <HAL_RCC_OscConfig+0x338>)
 80013fc:	430a      	orrs	r2, r1
 80013fe:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001400:	4b66      	ldr	r3, [pc, #408]	; (800159c <HAL_RCC_OscConfig+0x338>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2209      	movs	r2, #9
 8001406:	4393      	bics	r3, r2
 8001408:	0019      	movs	r1, r3
 800140a:	4b64      	ldr	r3, [pc, #400]	; (800159c <HAL_RCC_OscConfig+0x338>)
 800140c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800140e:	430a      	orrs	r2, r1
 8001410:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001412:	f000 fbeb 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 8001416:	0001      	movs	r1, r0
 8001418:	4b60      	ldr	r3, [pc, #384]	; (800159c <HAL_RCC_OscConfig+0x338>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	091b      	lsrs	r3, r3, #4
 800141e:	220f      	movs	r2, #15
 8001420:	4013      	ands	r3, r2
 8001422:	4a62      	ldr	r2, [pc, #392]	; (80015ac <HAL_RCC_OscConfig+0x348>)
 8001424:	5cd3      	ldrb	r3, [r2, r3]
 8001426:	000a      	movs	r2, r1
 8001428:	40da      	lsrs	r2, r3
 800142a:	4b61      	ldr	r3, [pc, #388]	; (80015b0 <HAL_RCC_OscConfig+0x34c>)
 800142c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800142e:	4b61      	ldr	r3, [pc, #388]	; (80015b4 <HAL_RCC_OscConfig+0x350>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2513      	movs	r5, #19
 8001434:	197c      	adds	r4, r7, r5
 8001436:	0018      	movs	r0, r3
 8001438:	f7ff fb4c 	bl	8000ad4 <HAL_InitTick>
 800143c:	0003      	movs	r3, r0
 800143e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001440:	197b      	adds	r3, r7, r5
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d046      	beq.n	80014d6 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001448:	197b      	adds	r3, r7, r5
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	e280      	b.n	8001950 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	2b00      	cmp	r3, #0
 8001452:	d027      	beq.n	80014a4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001454:	4b51      	ldr	r3, [pc, #324]	; (800159c <HAL_RCC_OscConfig+0x338>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2209      	movs	r2, #9
 800145a:	4393      	bics	r3, r2
 800145c:	0019      	movs	r1, r3
 800145e:	4b4f      	ldr	r3, [pc, #316]	; (800159c <HAL_RCC_OscConfig+0x338>)
 8001460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001462:	430a      	orrs	r2, r1
 8001464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001466:	f7ff fb7b 	bl	8000b60 <HAL_GetTick>
 800146a:	0003      	movs	r3, r0
 800146c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001470:	f7ff fb76 	bl	8000b60 <HAL_GetTick>
 8001474:	0002      	movs	r2, r0
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e266      	b.n	8001950 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001482:	4b46      	ldr	r3, [pc, #280]	; (800159c <HAL_RCC_OscConfig+0x338>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2204      	movs	r2, #4
 8001488:	4013      	ands	r3, r2
 800148a:	d0f1      	beq.n	8001470 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148c:	4b43      	ldr	r3, [pc, #268]	; (800159c <HAL_RCC_OscConfig+0x338>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	4a45      	ldr	r2, [pc, #276]	; (80015a8 <HAL_RCC_OscConfig+0x344>)
 8001492:	4013      	ands	r3, r2
 8001494:	0019      	movs	r1, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	021a      	lsls	r2, r3, #8
 800149c:	4b3f      	ldr	r3, [pc, #252]	; (800159c <HAL_RCC_OscConfig+0x338>)
 800149e:	430a      	orrs	r2, r1
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	e018      	b.n	80014d6 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a4:	4b3d      	ldr	r3, [pc, #244]	; (800159c <HAL_RCC_OscConfig+0x338>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b3c      	ldr	r3, [pc, #240]	; (800159c <HAL_RCC_OscConfig+0x338>)
 80014aa:	2101      	movs	r1, #1
 80014ac:	438a      	bics	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fb56 	bl	8000b60 <HAL_GetTick>
 80014b4:	0003      	movs	r3, r0
 80014b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ba:	f7ff fb51 	bl	8000b60 <HAL_GetTick>
 80014be:	0002      	movs	r2, r0
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e241      	b.n	8001950 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014cc:	4b33      	ldr	r3, [pc, #204]	; (800159c <HAL_RCC_OscConfig+0x338>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2204      	movs	r2, #4
 80014d2:	4013      	ands	r3, r2
 80014d4:	d1f1      	bne.n	80014ba <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2210      	movs	r2, #16
 80014dc:	4013      	ands	r3, r2
 80014de:	d100      	bne.n	80014e2 <HAL_RCC_OscConfig+0x27e>
 80014e0:	e0a1      	b.n	8001626 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d140      	bne.n	800156a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014e8:	4b2c      	ldr	r3, [pc, #176]	; (800159c <HAL_RCC_OscConfig+0x338>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4013      	ands	r3, r2
 80014f2:	d005      	beq.n	8001500 <HAL_RCC_OscConfig+0x29c>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e227      	b.n	8001950 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001500:	4b26      	ldr	r3, [pc, #152]	; (800159c <HAL_RCC_OscConfig+0x338>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	4a2c      	ldr	r2, [pc, #176]	; (80015b8 <HAL_RCC_OscConfig+0x354>)
 8001506:	4013      	ands	r3, r2
 8001508:	0019      	movs	r1, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a1a      	ldr	r2, [r3, #32]
 800150e:	4b23      	ldr	r3, [pc, #140]	; (800159c <HAL_RCC_OscConfig+0x338>)
 8001510:	430a      	orrs	r2, r1
 8001512:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001514:	4b21      	ldr	r3, [pc, #132]	; (800159c <HAL_RCC_OscConfig+0x338>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	021b      	lsls	r3, r3, #8
 800151a:	0a19      	lsrs	r1, r3, #8
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	061a      	lsls	r2, r3, #24
 8001522:	4b1e      	ldr	r3, [pc, #120]	; (800159c <HAL_RCC_OscConfig+0x338>)
 8001524:	430a      	orrs	r2, r1
 8001526:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	0b5b      	lsrs	r3, r3, #13
 800152e:	3301      	adds	r3, #1
 8001530:	2280      	movs	r2, #128	; 0x80
 8001532:	0212      	lsls	r2, r2, #8
 8001534:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <HAL_RCC_OscConfig+0x338>)
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	091b      	lsrs	r3, r3, #4
 800153c:	210f      	movs	r1, #15
 800153e:	400b      	ands	r3, r1
 8001540:	491a      	ldr	r1, [pc, #104]	; (80015ac <HAL_RCC_OscConfig+0x348>)
 8001542:	5ccb      	ldrb	r3, [r1, r3]
 8001544:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001546:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <HAL_RCC_OscConfig+0x34c>)
 8001548:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800154a:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <HAL_RCC_OscConfig+0x350>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2513      	movs	r5, #19
 8001550:	197c      	adds	r4, r7, r5
 8001552:	0018      	movs	r0, r3
 8001554:	f7ff fabe 	bl	8000ad4 <HAL_InitTick>
 8001558:	0003      	movs	r3, r0
 800155a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800155c:	197b      	adds	r3, r7, r5
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d060      	beq.n	8001626 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001564:	197b      	adds	r3, r7, r5
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	e1f2      	b.n	8001950 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d03f      	beq.n	80015f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001572:	4b0a      	ldr	r3, [pc, #40]	; (800159c <HAL_RCC_OscConfig+0x338>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_RCC_OscConfig+0x338>)
 8001578:	2180      	movs	r1, #128	; 0x80
 800157a:	0049      	lsls	r1, r1, #1
 800157c:	430a      	orrs	r2, r1
 800157e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff faee 	bl	8000b60 <HAL_GetTick>
 8001584:	0003      	movs	r3, r0
 8001586:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001588:	e018      	b.n	80015bc <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800158a:	f7ff fae9 	bl	8000b60 <HAL_GetTick>
 800158e:	0002      	movs	r2, r0
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d911      	bls.n	80015bc <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e1d9      	b.n	8001950 <HAL_RCC_OscConfig+0x6ec>
 800159c:	40021000 	.word	0x40021000
 80015a0:	fffeffff 	.word	0xfffeffff
 80015a4:	fffbffff 	.word	0xfffbffff
 80015a8:	ffffe0ff 	.word	0xffffe0ff
 80015ac:	080034bc 	.word	0x080034bc
 80015b0:	20000000 	.word	0x20000000
 80015b4:	20000004 	.word	0x20000004
 80015b8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015bc:	4bc9      	ldr	r3, [pc, #804]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4013      	ands	r3, r2
 80015c6:	d0e0      	beq.n	800158a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c8:	4bc6      	ldr	r3, [pc, #792]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	4ac6      	ldr	r2, [pc, #792]	; (80018e8 <HAL_RCC_OscConfig+0x684>)
 80015ce:	4013      	ands	r3, r2
 80015d0:	0019      	movs	r1, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1a      	ldr	r2, [r3, #32]
 80015d6:	4bc3      	ldr	r3, [pc, #780]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 80015d8:	430a      	orrs	r2, r1
 80015da:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015dc:	4bc1      	ldr	r3, [pc, #772]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	0a19      	lsrs	r1, r3, #8
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	061a      	lsls	r2, r3, #24
 80015ea:	4bbe      	ldr	r3, [pc, #760]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 80015ec:	430a      	orrs	r2, r1
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	e019      	b.n	8001626 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015f2:	4bbc      	ldr	r3, [pc, #752]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	4bbb      	ldr	r3, [pc, #748]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 80015f8:	49bc      	ldr	r1, [pc, #752]	; (80018ec <HAL_RCC_OscConfig+0x688>)
 80015fa:	400a      	ands	r2, r1
 80015fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fe:	f7ff faaf 	bl	8000b60 <HAL_GetTick>
 8001602:	0003      	movs	r3, r0
 8001604:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001608:	f7ff faaa 	bl	8000b60 <HAL_GetTick>
 800160c:	0002      	movs	r2, r0
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e19a      	b.n	8001950 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800161a:	4bb2      	ldr	r3, [pc, #712]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4013      	ands	r3, r2
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2208      	movs	r2, #8
 800162c:	4013      	ands	r3, r2
 800162e:	d036      	beq.n	800169e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d019      	beq.n	800166c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001638:	4baa      	ldr	r3, [pc, #680]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 800163a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800163c:	4ba9      	ldr	r3, [pc, #676]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 800163e:	2101      	movs	r1, #1
 8001640:	430a      	orrs	r2, r1
 8001642:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001644:	f7ff fa8c 	bl	8000b60 <HAL_GetTick>
 8001648:	0003      	movs	r3, r0
 800164a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800164e:	f7ff fa87 	bl	8000b60 <HAL_GetTick>
 8001652:	0002      	movs	r2, r0
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e177      	b.n	8001950 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001660:	4ba0      	ldr	r3, [pc, #640]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 8001662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001664:	2202      	movs	r2, #2
 8001666:	4013      	ands	r3, r2
 8001668:	d0f1      	beq.n	800164e <HAL_RCC_OscConfig+0x3ea>
 800166a:	e018      	b.n	800169e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800166c:	4b9d      	ldr	r3, [pc, #628]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 800166e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001670:	4b9c      	ldr	r3, [pc, #624]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 8001672:	2101      	movs	r1, #1
 8001674:	438a      	bics	r2, r1
 8001676:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001678:	f7ff fa72 	bl	8000b60 <HAL_GetTick>
 800167c:	0003      	movs	r3, r0
 800167e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001682:	f7ff fa6d 	bl	8000b60 <HAL_GetTick>
 8001686:	0002      	movs	r2, r0
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e15d      	b.n	8001950 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001694:	4b93      	ldr	r3, [pc, #588]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 8001696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001698:	2202      	movs	r2, #2
 800169a:	4013      	ands	r3, r2
 800169c:	d1f1      	bne.n	8001682 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2204      	movs	r2, #4
 80016a4:	4013      	ands	r3, r2
 80016a6:	d100      	bne.n	80016aa <HAL_RCC_OscConfig+0x446>
 80016a8:	e0ae      	b.n	8001808 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016aa:	2023      	movs	r0, #35	; 0x23
 80016ac:	183b      	adds	r3, r7, r0
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016b2:	4b8c      	ldr	r3, [pc, #560]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 80016b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016b6:	2380      	movs	r3, #128	; 0x80
 80016b8:	055b      	lsls	r3, r3, #21
 80016ba:	4013      	ands	r3, r2
 80016bc:	d109      	bne.n	80016d2 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016be:	4b89      	ldr	r3, [pc, #548]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 80016c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016c2:	4b88      	ldr	r3, [pc, #544]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 80016c4:	2180      	movs	r1, #128	; 0x80
 80016c6:	0549      	lsls	r1, r1, #21
 80016c8:	430a      	orrs	r2, r1
 80016ca:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80016cc:	183b      	adds	r3, r7, r0
 80016ce:	2201      	movs	r2, #1
 80016d0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d2:	4b87      	ldr	r3, [pc, #540]	; (80018f0 <HAL_RCC_OscConfig+0x68c>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4013      	ands	r3, r2
 80016dc:	d11a      	bne.n	8001714 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016de:	4b84      	ldr	r3, [pc, #528]	; (80018f0 <HAL_RCC_OscConfig+0x68c>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4b83      	ldr	r3, [pc, #524]	; (80018f0 <HAL_RCC_OscConfig+0x68c>)
 80016e4:	2180      	movs	r1, #128	; 0x80
 80016e6:	0049      	lsls	r1, r1, #1
 80016e8:	430a      	orrs	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ec:	f7ff fa38 	bl	8000b60 <HAL_GetTick>
 80016f0:	0003      	movs	r3, r0
 80016f2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f6:	f7ff fa33 	bl	8000b60 <HAL_GetTick>
 80016fa:	0002      	movs	r2, r0
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b64      	cmp	r3, #100	; 0x64
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e123      	b.n	8001950 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001708:	4b79      	ldr	r3, [pc, #484]	; (80018f0 <HAL_RCC_OscConfig+0x68c>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	4013      	ands	r3, r2
 8001712:	d0f0      	beq.n	80016f6 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	429a      	cmp	r2, r3
 800171e:	d107      	bne.n	8001730 <HAL_RCC_OscConfig+0x4cc>
 8001720:	4b70      	ldr	r3, [pc, #448]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 8001722:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001724:	4b6f      	ldr	r3, [pc, #444]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 8001726:	2180      	movs	r1, #128	; 0x80
 8001728:	0049      	lsls	r1, r1, #1
 800172a:	430a      	orrs	r2, r1
 800172c:	651a      	str	r2, [r3, #80]	; 0x50
 800172e:	e031      	b.n	8001794 <HAL_RCC_OscConfig+0x530>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d10c      	bne.n	8001752 <HAL_RCC_OscConfig+0x4ee>
 8001738:	4b6a      	ldr	r3, [pc, #424]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 800173a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800173c:	4b69      	ldr	r3, [pc, #420]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 800173e:	496b      	ldr	r1, [pc, #428]	; (80018ec <HAL_RCC_OscConfig+0x688>)
 8001740:	400a      	ands	r2, r1
 8001742:	651a      	str	r2, [r3, #80]	; 0x50
 8001744:	4b67      	ldr	r3, [pc, #412]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 8001746:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001748:	4b66      	ldr	r3, [pc, #408]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 800174a:	496a      	ldr	r1, [pc, #424]	; (80018f4 <HAL_RCC_OscConfig+0x690>)
 800174c:	400a      	ands	r2, r1
 800174e:	651a      	str	r2, [r3, #80]	; 0x50
 8001750:	e020      	b.n	8001794 <HAL_RCC_OscConfig+0x530>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	23a0      	movs	r3, #160	; 0xa0
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	429a      	cmp	r2, r3
 800175c:	d10e      	bne.n	800177c <HAL_RCC_OscConfig+0x518>
 800175e:	4b61      	ldr	r3, [pc, #388]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 8001760:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001762:	4b60      	ldr	r3, [pc, #384]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 8001764:	2180      	movs	r1, #128	; 0x80
 8001766:	00c9      	lsls	r1, r1, #3
 8001768:	430a      	orrs	r2, r1
 800176a:	651a      	str	r2, [r3, #80]	; 0x50
 800176c:	4b5d      	ldr	r3, [pc, #372]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 800176e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001770:	4b5c      	ldr	r3, [pc, #368]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 8001772:	2180      	movs	r1, #128	; 0x80
 8001774:	0049      	lsls	r1, r1, #1
 8001776:	430a      	orrs	r2, r1
 8001778:	651a      	str	r2, [r3, #80]	; 0x50
 800177a:	e00b      	b.n	8001794 <HAL_RCC_OscConfig+0x530>
 800177c:	4b59      	ldr	r3, [pc, #356]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 800177e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001780:	4b58      	ldr	r3, [pc, #352]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 8001782:	495a      	ldr	r1, [pc, #360]	; (80018ec <HAL_RCC_OscConfig+0x688>)
 8001784:	400a      	ands	r2, r1
 8001786:	651a      	str	r2, [r3, #80]	; 0x50
 8001788:	4b56      	ldr	r3, [pc, #344]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 800178a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800178c:	4b55      	ldr	r3, [pc, #340]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 800178e:	4959      	ldr	r1, [pc, #356]	; (80018f4 <HAL_RCC_OscConfig+0x690>)
 8001790:	400a      	ands	r2, r1
 8001792:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d015      	beq.n	80017c8 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179c:	f7ff f9e0 	bl	8000b60 <HAL_GetTick>
 80017a0:	0003      	movs	r3, r0
 80017a2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017a4:	e009      	b.n	80017ba <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a6:	f7ff f9db 	bl	8000b60 <HAL_GetTick>
 80017aa:	0002      	movs	r2, r0
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	4a51      	ldr	r2, [pc, #324]	; (80018f8 <HAL_RCC_OscConfig+0x694>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e0ca      	b.n	8001950 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017ba:	4b4a      	ldr	r3, [pc, #296]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 80017bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4013      	ands	r3, r2
 80017c4:	d0ef      	beq.n	80017a6 <HAL_RCC_OscConfig+0x542>
 80017c6:	e014      	b.n	80017f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c8:	f7ff f9ca 	bl	8000b60 <HAL_GetTick>
 80017cc:	0003      	movs	r3, r0
 80017ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017d0:	e009      	b.n	80017e6 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d2:	f7ff f9c5 	bl	8000b60 <HAL_GetTick>
 80017d6:	0002      	movs	r2, r0
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	4a46      	ldr	r2, [pc, #280]	; (80018f8 <HAL_RCC_OscConfig+0x694>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e0b4      	b.n	8001950 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017e6:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 80017e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4013      	ands	r3, r2
 80017f0:	d1ef      	bne.n	80017d2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017f2:	2323      	movs	r3, #35	; 0x23
 80017f4:	18fb      	adds	r3, r7, r3
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d105      	bne.n	8001808 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017fc:	4b39      	ldr	r3, [pc, #228]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 80017fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001800:	4b38      	ldr	r3, [pc, #224]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 8001802:	493e      	ldr	r1, [pc, #248]	; (80018fc <HAL_RCC_OscConfig+0x698>)
 8001804:	400a      	ands	r2, r1
 8001806:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180c:	2b00      	cmp	r3, #0
 800180e:	d100      	bne.n	8001812 <HAL_RCC_OscConfig+0x5ae>
 8001810:	e09d      	b.n	800194e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	2b0c      	cmp	r3, #12
 8001816:	d100      	bne.n	800181a <HAL_RCC_OscConfig+0x5b6>
 8001818:	e076      	b.n	8001908 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	2b02      	cmp	r3, #2
 8001820:	d145      	bne.n	80018ae <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001822:	4b30      	ldr	r3, [pc, #192]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 8001828:	4935      	ldr	r1, [pc, #212]	; (8001900 <HAL_RCC_OscConfig+0x69c>)
 800182a:	400a      	ands	r2, r1
 800182c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff f997 	bl	8000b60 <HAL_GetTick>
 8001832:	0003      	movs	r3, r0
 8001834:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001838:	f7ff f992 	bl	8000b60 <HAL_GetTick>
 800183c:	0002      	movs	r2, r0
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e082      	b.n	8001950 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800184a:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	049b      	lsls	r3, r3, #18
 8001852:	4013      	ands	r3, r2
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001856:	4b23      	ldr	r3, [pc, #140]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	4a2a      	ldr	r2, [pc, #168]	; (8001904 <HAL_RCC_OscConfig+0x6a0>)
 800185c:	4013      	ands	r3, r2
 800185e:	0019      	movs	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	431a      	orrs	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	431a      	orrs	r2, r3
 8001870:	4b1c      	ldr	r3, [pc, #112]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 8001872:	430a      	orrs	r2, r1
 8001874:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001876:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 800187c:	2180      	movs	r1, #128	; 0x80
 800187e:	0449      	lsls	r1, r1, #17
 8001880:	430a      	orrs	r2, r1
 8001882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff f96c 	bl	8000b60 <HAL_GetTick>
 8001888:	0003      	movs	r3, r0
 800188a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800188e:	f7ff f967 	bl	8000b60 <HAL_GetTick>
 8001892:	0002      	movs	r2, r0
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e057      	b.n	8001950 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018a0:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	049b      	lsls	r3, r3, #18
 80018a8:	4013      	ands	r3, r2
 80018aa:	d0f0      	beq.n	800188e <HAL_RCC_OscConfig+0x62a>
 80018ac:	e04f      	b.n	800194e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ae:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 80018b4:	4912      	ldr	r1, [pc, #72]	; (8001900 <HAL_RCC_OscConfig+0x69c>)
 80018b6:	400a      	ands	r2, r1
 80018b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ba:	f7ff f951 	bl	8000b60 <HAL_GetTick>
 80018be:	0003      	movs	r3, r0
 80018c0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c4:	f7ff f94c 	bl	8000b60 <HAL_GetTick>
 80018c8:	0002      	movs	r2, r0
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e03c      	b.n	8001950 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018d6:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <HAL_RCC_OscConfig+0x680>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	2380      	movs	r3, #128	; 0x80
 80018dc:	049b      	lsls	r3, r3, #18
 80018de:	4013      	ands	r3, r2
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x660>
 80018e2:	e034      	b.n	800194e <HAL_RCC_OscConfig+0x6ea>
 80018e4:	40021000 	.word	0x40021000
 80018e8:	ffff1fff 	.word	0xffff1fff
 80018ec:	fffffeff 	.word	0xfffffeff
 80018f0:	40007000 	.word	0x40007000
 80018f4:	fffffbff 	.word	0xfffffbff
 80018f8:	00001388 	.word	0x00001388
 80018fc:	efffffff 	.word	0xefffffff
 8001900:	feffffff 	.word	0xfeffffff
 8001904:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	2b01      	cmp	r3, #1
 800190e:	d101      	bne.n	8001914 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e01d      	b.n	8001950 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001914:	4b10      	ldr	r3, [pc, #64]	; (8001958 <HAL_RCC_OscConfig+0x6f4>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	025b      	lsls	r3, r3, #9
 8001920:	401a      	ands	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001926:	429a      	cmp	r2, r3
 8001928:	d10f      	bne.n	800194a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	23f0      	movs	r3, #240	; 0xf0
 800192e:	039b      	lsls	r3, r3, #14
 8001930:	401a      	ands	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001936:	429a      	cmp	r2, r3
 8001938:	d107      	bne.n	800194a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	23c0      	movs	r3, #192	; 0xc0
 800193e:	041b      	lsls	r3, r3, #16
 8001940:	401a      	ands	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001946:	429a      	cmp	r2, r3
 8001948:	d001      	beq.n	800194e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	0018      	movs	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	b00a      	add	sp, #40	; 0x28
 8001956:	bdb0      	pop	{r4, r5, r7, pc}
 8001958:	40021000 	.word	0x40021000

0800195c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800195c:	b5b0      	push	{r4, r5, r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e128      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001970:	4b96      	ldr	r3, [pc, #600]	; (8001bcc <HAL_RCC_ClockConfig+0x270>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2201      	movs	r2, #1
 8001976:	4013      	ands	r3, r2
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d91e      	bls.n	80019bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197e:	4b93      	ldr	r3, [pc, #588]	; (8001bcc <HAL_RCC_ClockConfig+0x270>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2201      	movs	r2, #1
 8001984:	4393      	bics	r3, r2
 8001986:	0019      	movs	r1, r3
 8001988:	4b90      	ldr	r3, [pc, #576]	; (8001bcc <HAL_RCC_ClockConfig+0x270>)
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001990:	f7ff f8e6 	bl	8000b60 <HAL_GetTick>
 8001994:	0003      	movs	r3, r0
 8001996:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001998:	e009      	b.n	80019ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800199a:	f7ff f8e1 	bl	8000b60 <HAL_GetTick>
 800199e:	0002      	movs	r2, r0
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	4a8a      	ldr	r2, [pc, #552]	; (8001bd0 <HAL_RCC_ClockConfig+0x274>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e109      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ae:	4b87      	ldr	r3, [pc, #540]	; (8001bcc <HAL_RCC_ClockConfig+0x270>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2201      	movs	r2, #1
 80019b4:	4013      	ands	r3, r2
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d1ee      	bne.n	800199a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2202      	movs	r2, #2
 80019c2:	4013      	ands	r3, r2
 80019c4:	d009      	beq.n	80019da <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c6:	4b83      	ldr	r3, [pc, #524]	; (8001bd4 <HAL_RCC_ClockConfig+0x278>)
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	22f0      	movs	r2, #240	; 0xf0
 80019cc:	4393      	bics	r3, r2
 80019ce:	0019      	movs	r1, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	4b7f      	ldr	r3, [pc, #508]	; (8001bd4 <HAL_RCC_ClockConfig+0x278>)
 80019d6:	430a      	orrs	r2, r1
 80019d8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2201      	movs	r2, #1
 80019e0:	4013      	ands	r3, r2
 80019e2:	d100      	bne.n	80019e6 <HAL_RCC_ClockConfig+0x8a>
 80019e4:	e089      	b.n	8001afa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d107      	bne.n	80019fe <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019ee:	4b79      	ldr	r3, [pc, #484]	; (8001bd4 <HAL_RCC_ClockConfig+0x278>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	029b      	lsls	r3, r3, #10
 80019f6:	4013      	ands	r3, r2
 80019f8:	d120      	bne.n	8001a3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e0e1      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d107      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a06:	4b73      	ldr	r3, [pc, #460]	; (8001bd4 <HAL_RCC_ClockConfig+0x278>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	2380      	movs	r3, #128	; 0x80
 8001a0c:	049b      	lsls	r3, r3, #18
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d114      	bne.n	8001a3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e0d5      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d106      	bne.n	8001a2c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a1e:	4b6d      	ldr	r3, [pc, #436]	; (8001bd4 <HAL_RCC_ClockConfig+0x278>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2204      	movs	r2, #4
 8001a24:	4013      	ands	r3, r2
 8001a26:	d109      	bne.n	8001a3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0ca      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a2c:	4b69      	ldr	r3, [pc, #420]	; (8001bd4 <HAL_RCC_ClockConfig+0x278>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4013      	ands	r3, r2
 8001a36:	d101      	bne.n	8001a3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e0c2      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a3c:	4b65      	ldr	r3, [pc, #404]	; (8001bd4 <HAL_RCC_ClockConfig+0x278>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	2203      	movs	r2, #3
 8001a42:	4393      	bics	r3, r2
 8001a44:	0019      	movs	r1, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	4b62      	ldr	r3, [pc, #392]	; (8001bd4 <HAL_RCC_ClockConfig+0x278>)
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a50:	f7ff f886 	bl	8000b60 <HAL_GetTick>
 8001a54:	0003      	movs	r3, r0
 8001a56:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d111      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a60:	e009      	b.n	8001a76 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a62:	f7ff f87d 	bl	8000b60 <HAL_GetTick>
 8001a66:	0002      	movs	r2, r0
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	4a58      	ldr	r2, [pc, #352]	; (8001bd0 <HAL_RCC_ClockConfig+0x274>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e0a5      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a76:	4b57      	ldr	r3, [pc, #348]	; (8001bd4 <HAL_RCC_ClockConfig+0x278>)
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d1ef      	bne.n	8001a62 <HAL_RCC_ClockConfig+0x106>
 8001a82:	e03a      	b.n	8001afa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d111      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a8c:	e009      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8e:	f7ff f867 	bl	8000b60 <HAL_GetTick>
 8001a92:	0002      	movs	r2, r0
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	4a4d      	ldr	r2, [pc, #308]	; (8001bd0 <HAL_RCC_ClockConfig+0x274>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e08f      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa2:	4b4c      	ldr	r3, [pc, #304]	; (8001bd4 <HAL_RCC_ClockConfig+0x278>)
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b0c      	cmp	r3, #12
 8001aac:	d1ef      	bne.n	8001a8e <HAL_RCC_ClockConfig+0x132>
 8001aae:	e024      	b.n	8001afa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d11b      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ab8:	e009      	b.n	8001ace <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aba:	f7ff f851 	bl	8000b60 <HAL_GetTick>
 8001abe:	0002      	movs	r2, r0
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	4a42      	ldr	r2, [pc, #264]	; (8001bd0 <HAL_RCC_ClockConfig+0x274>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e079      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ace:	4b41      	ldr	r3, [pc, #260]	; (8001bd4 <HAL_RCC_ClockConfig+0x278>)
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d1ef      	bne.n	8001aba <HAL_RCC_ClockConfig+0x15e>
 8001ada:	e00e      	b.n	8001afa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001adc:	f7ff f840 	bl	8000b60 <HAL_GetTick>
 8001ae0:	0002      	movs	r2, r0
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	4a3a      	ldr	r2, [pc, #232]	; (8001bd0 <HAL_RCC_ClockConfig+0x274>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e068      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001af0:	4b38      	ldr	r3, [pc, #224]	; (8001bd4 <HAL_RCC_ClockConfig+0x278>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	220c      	movs	r2, #12
 8001af6:	4013      	ands	r3, r2
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001afa:	4b34      	ldr	r3, [pc, #208]	; (8001bcc <HAL_RCC_ClockConfig+0x270>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2201      	movs	r2, #1
 8001b00:	4013      	ands	r3, r2
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d21e      	bcs.n	8001b46 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b08:	4b30      	ldr	r3, [pc, #192]	; (8001bcc <HAL_RCC_ClockConfig+0x270>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	4393      	bics	r3, r2
 8001b10:	0019      	movs	r1, r3
 8001b12:	4b2e      	ldr	r3, [pc, #184]	; (8001bcc <HAL_RCC_ClockConfig+0x270>)
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b1a:	f7ff f821 	bl	8000b60 <HAL_GetTick>
 8001b1e:	0003      	movs	r3, r0
 8001b20:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b22:	e009      	b.n	8001b38 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b24:	f7ff f81c 	bl	8000b60 <HAL_GetTick>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	4a28      	ldr	r2, [pc, #160]	; (8001bd0 <HAL_RCC_ClockConfig+0x274>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e044      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b38:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <HAL_RCC_ClockConfig+0x270>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	4013      	ands	r3, r2
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d1ee      	bne.n	8001b24 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d009      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b50:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <HAL_RCC_ClockConfig+0x278>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	4a20      	ldr	r2, [pc, #128]	; (8001bd8 <HAL_RCC_ClockConfig+0x27c>)
 8001b56:	4013      	ands	r3, r2
 8001b58:	0019      	movs	r1, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <HAL_RCC_ClockConfig+0x278>)
 8001b60:	430a      	orrs	r2, r1
 8001b62:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2208      	movs	r2, #8
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d00a      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b6e:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <HAL_RCC_ClockConfig+0x278>)
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	4a1a      	ldr	r2, [pc, #104]	; (8001bdc <HAL_RCC_ClockConfig+0x280>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	0019      	movs	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	00da      	lsls	r2, r3, #3
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <HAL_RCC_ClockConfig+0x278>)
 8001b80:	430a      	orrs	r2, r1
 8001b82:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b84:	f000 f832 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 8001b88:	0001      	movs	r1, r0
 8001b8a:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <HAL_RCC_ClockConfig+0x278>)
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	091b      	lsrs	r3, r3, #4
 8001b90:	220f      	movs	r2, #15
 8001b92:	4013      	ands	r3, r2
 8001b94:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <HAL_RCC_ClockConfig+0x284>)
 8001b96:	5cd3      	ldrb	r3, [r2, r3]
 8001b98:	000a      	movs	r2, r1
 8001b9a:	40da      	lsrs	r2, r3
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <HAL_RCC_ClockConfig+0x288>)
 8001b9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_RCC_ClockConfig+0x28c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	250b      	movs	r5, #11
 8001ba6:	197c      	adds	r4, r7, r5
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f7fe ff93 	bl	8000ad4 <HAL_InitTick>
 8001bae:	0003      	movs	r3, r0
 8001bb0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001bb2:	197b      	adds	r3, r7, r5
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d002      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001bba:	197b      	adds	r3, r7, r5
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	e000      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	b004      	add	sp, #16
 8001bc8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	40022000 	.word	0x40022000
 8001bd0:	00001388 	.word	0x00001388
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	fffff8ff 	.word	0xfffff8ff
 8001bdc:	ffffc7ff 	.word	0xffffc7ff
 8001be0:	080034bc 	.word	0x080034bc
 8001be4:	20000000 	.word	0x20000000
 8001be8:	20000004 	.word	0x20000004

08001bec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bec:	b5b0      	push	{r4, r5, r7, lr}
 8001bee:	b08e      	sub	sp, #56	; 0x38
 8001bf0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001bf2:	4b4c      	ldr	r3, [pc, #304]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bfa:	230c      	movs	r3, #12
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b0c      	cmp	r3, #12
 8001c00:	d014      	beq.n	8001c2c <HAL_RCC_GetSysClockFreq+0x40>
 8001c02:	d900      	bls.n	8001c06 <HAL_RCC_GetSysClockFreq+0x1a>
 8001c04:	e07b      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x112>
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d002      	beq.n	8001c10 <HAL_RCC_GetSysClockFreq+0x24>
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d00b      	beq.n	8001c26 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c0e:	e076      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c10:	4b44      	ldr	r3, [pc, #272]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2210      	movs	r2, #16
 8001c16:	4013      	ands	r3, r2
 8001c18:	d002      	beq.n	8001c20 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001c1a:	4b43      	ldr	r3, [pc, #268]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c1c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001c1e:	e07c      	b.n	8001d1a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001c20:	4b42      	ldr	r3, [pc, #264]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x140>)
 8001c22:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c24:	e079      	b.n	8001d1a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c26:	4b42      	ldr	r3, [pc, #264]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x144>)
 8001c28:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c2a:	e076      	b.n	8001d1a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2e:	0c9a      	lsrs	r2, r3, #18
 8001c30:	230f      	movs	r3, #15
 8001c32:	401a      	ands	r2, r3
 8001c34:	4b3f      	ldr	r3, [pc, #252]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x148>)
 8001c36:	5c9b      	ldrb	r3, [r3, r2]
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3c:	0d9a      	lsrs	r2, r3, #22
 8001c3e:	2303      	movs	r3, #3
 8001c40:	4013      	ands	r3, r2
 8001c42:	3301      	adds	r3, #1
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c46:	4b37      	ldr	r3, [pc, #220]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	025b      	lsls	r3, r3, #9
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d01a      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c54:	61bb      	str	r3, [r7, #24]
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
 8001c5a:	4a35      	ldr	r2, [pc, #212]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x144>)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	69b8      	ldr	r0, [r7, #24]
 8001c60:	69f9      	ldr	r1, [r7, #28]
 8001c62:	f7fe fafd 	bl	8000260 <__aeabi_lmul>
 8001c66:	0002      	movs	r2, r0
 8001c68:	000b      	movs	r3, r1
 8001c6a:	0010      	movs	r0, r2
 8001c6c:	0019      	movs	r1, r3
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f7fe fad1 	bl	8000220 <__aeabi_uldivmod>
 8001c7e:	0002      	movs	r2, r0
 8001c80:	000b      	movs	r3, r1
 8001c82:	0013      	movs	r3, r2
 8001c84:	637b      	str	r3, [r7, #52]	; 0x34
 8001c86:	e037      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c88:	4b26      	ldr	r3, [pc, #152]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2210      	movs	r2, #16
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d01a      	beq.n	8001cc8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	4a23      	ldr	r2, [pc, #140]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	68b8      	ldr	r0, [r7, #8]
 8001ca0:	68f9      	ldr	r1, [r7, #12]
 8001ca2:	f7fe fadd 	bl	8000260 <__aeabi_lmul>
 8001ca6:	0002      	movs	r2, r0
 8001ca8:	000b      	movs	r3, r1
 8001caa:	0010      	movs	r0, r2
 8001cac:	0019      	movs	r1, r3
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	603b      	str	r3, [r7, #0]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f7fe fab1 	bl	8000220 <__aeabi_uldivmod>
 8001cbe:	0002      	movs	r2, r0
 8001cc0:	000b      	movs	r3, r1
 8001cc2:	0013      	movs	r3, r2
 8001cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8001cc6:	e017      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cca:	0018      	movs	r0, r3
 8001ccc:	2300      	movs	r3, #0
 8001cce:	0019      	movs	r1, r3
 8001cd0:	4a16      	ldr	r2, [pc, #88]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x140>)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f7fe fac4 	bl	8000260 <__aeabi_lmul>
 8001cd8:	0002      	movs	r2, r0
 8001cda:	000b      	movs	r3, r1
 8001cdc:	0010      	movs	r0, r2
 8001cde:	0019      	movs	r1, r3
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	001c      	movs	r4, r3
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	001d      	movs	r5, r3
 8001ce8:	0022      	movs	r2, r4
 8001cea:	002b      	movs	r3, r5
 8001cec:	f7fe fa98 	bl	8000220 <__aeabi_uldivmod>
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	000b      	movs	r3, r1
 8001cf4:	0013      	movs	r3, r2
 8001cf6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cfa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cfc:	e00d      	b.n	8001d1a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	0b5b      	lsrs	r3, r3, #13
 8001d04:	2207      	movs	r2, #7
 8001d06:	4013      	ands	r3, r2
 8001d08:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	2280      	movs	r2, #128	; 0x80
 8001d10:	0212      	lsls	r2, r2, #8
 8001d12:	409a      	lsls	r2, r3
 8001d14:	0013      	movs	r3, r2
 8001d16:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d18:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	b00e      	add	sp, #56	; 0x38
 8001d22:	bdb0      	pop	{r4, r5, r7, pc}
 8001d24:	40021000 	.word	0x40021000
 8001d28:	003d0900 	.word	0x003d0900
 8001d2c:	00f42400 	.word	0x00f42400
 8001d30:	007a1200 	.word	0x007a1200
 8001d34:	080034d4 	.word	0x080034d4

08001d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d3c:	4b02      	ldr	r3, [pc, #8]	; (8001d48 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	0018      	movs	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	20000000 	.word	0x20000000

08001d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d50:	f7ff fff2 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d54:	0001      	movs	r1, r0
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	0a1b      	lsrs	r3, r3, #8
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	4013      	ands	r3, r2
 8001d60:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d62:	5cd3      	ldrb	r3, [r2, r3]
 8001d64:	40d9      	lsrs	r1, r3
 8001d66:	000b      	movs	r3, r1
}
 8001d68:	0018      	movs	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	40021000 	.word	0x40021000
 8001d74:	080034cc 	.word	0x080034cc

08001d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d7c:	f7ff ffdc 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d80:	0001      	movs	r1, r0
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	0adb      	lsrs	r3, r3, #11
 8001d88:	2207      	movs	r2, #7
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d8e:	5cd3      	ldrb	r3, [r2, r3]
 8001d90:	40d9      	lsrs	r1, r3
 8001d92:	000b      	movs	r3, r1
}
 8001d94:	0018      	movs	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	080034cc 	.word	0x080034cc

08001da4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001dac:	2017      	movs	r0, #23
 8001dae:	183b      	adds	r3, r7, r0
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2220      	movs	r2, #32
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d100      	bne.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001dbe:	e0c7      	b.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc0:	4b84      	ldr	r3, [pc, #528]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	055b      	lsls	r3, r3, #21
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d109      	bne.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dcc:	4b81      	ldr	r3, [pc, #516]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dd0:	4b80      	ldr	r3, [pc, #512]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001dd2:	2180      	movs	r1, #128	; 0x80
 8001dd4:	0549      	lsls	r1, r1, #21
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001dda:	183b      	adds	r3, r7, r0
 8001ddc:	2201      	movs	r2, #1
 8001dde:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de0:	4b7d      	ldr	r3, [pc, #500]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4013      	ands	r3, r2
 8001dea:	d11a      	bne.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dec:	4b7a      	ldr	r3, [pc, #488]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b79      	ldr	r3, [pc, #484]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001df2:	2180      	movs	r1, #128	; 0x80
 8001df4:	0049      	lsls	r1, r1, #1
 8001df6:	430a      	orrs	r2, r1
 8001df8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dfa:	f7fe feb1 	bl	8000b60 <HAL_GetTick>
 8001dfe:	0003      	movs	r3, r0
 8001e00:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e02:	e008      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e04:	f7fe feac 	bl	8000b60 <HAL_GetTick>
 8001e08:	0002      	movs	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b64      	cmp	r3, #100	; 0x64
 8001e10:	d901      	bls.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e0d9      	b.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e16:	4b70      	ldr	r3, [pc, #448]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	2380      	movs	r3, #128	; 0x80
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001e22:	4b6c      	ldr	r3, [pc, #432]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	23c0      	movs	r3, #192	; 0xc0
 8001e28:	039b      	lsls	r3, r3, #14
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	23c0      	movs	r3, #192	; 0xc0
 8001e34:	039b      	lsls	r3, r3, #14
 8001e36:	4013      	ands	r3, r2
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d013      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	23c0      	movs	r3, #192	; 0xc0
 8001e44:	029b      	lsls	r3, r3, #10
 8001e46:	401a      	ands	r2, r3
 8001e48:	23c0      	movs	r3, #192	; 0xc0
 8001e4a:	029b      	lsls	r3, r3, #10
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d10a      	bne.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001e50:	4b60      	ldr	r3, [pc, #384]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	029b      	lsls	r3, r3, #10
 8001e58:	401a      	ands	r2, r3
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	029b      	lsls	r3, r3, #10
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d101      	bne.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e0b1      	b.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001e66:	4b5b      	ldr	r3, [pc, #364]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e6a:	23c0      	movs	r3, #192	; 0xc0
 8001e6c:	029b      	lsls	r3, r3, #10
 8001e6e:	4013      	ands	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d03b      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	23c0      	movs	r3, #192	; 0xc0
 8001e7e:	029b      	lsls	r3, r3, #10
 8001e80:	4013      	ands	r3, r2
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d033      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d02e      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001e92:	4b50      	ldr	r3, [pc, #320]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e96:	4a51      	ldr	r2, [pc, #324]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e9c:	4b4d      	ldr	r3, [pc, #308]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ea0:	4b4c      	ldr	r3, [pc, #304]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ea2:	2180      	movs	r1, #128	; 0x80
 8001ea4:	0309      	lsls	r1, r1, #12
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eaa:	4b4a      	ldr	r3, [pc, #296]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001eac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eae:	4b49      	ldr	r3, [pc, #292]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001eb0:	494b      	ldr	r1, [pc, #300]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001eb2:	400a      	ands	r2, r1
 8001eb4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001eb6:	4b47      	ldr	r3, [pc, #284]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d014      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec6:	f7fe fe4b 	bl	8000b60 <HAL_GetTick>
 8001eca:	0003      	movs	r3, r0
 8001ecc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ece:	e009      	b.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed0:	f7fe fe46 	bl	8000b60 <HAL_GetTick>
 8001ed4:	0002      	movs	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	4a42      	ldr	r2, [pc, #264]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e072      	b.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ee4:	4b3b      	ldr	r3, [pc, #236]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ee6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4013      	ands	r3, r2
 8001eee:	d0ef      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d01f      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	23c0      	movs	r3, #192	; 0xc0
 8001f00:	029b      	lsls	r3, r3, #10
 8001f02:	401a      	ands	r2, r3
 8001f04:	23c0      	movs	r3, #192	; 0xc0
 8001f06:	029b      	lsls	r3, r3, #10
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d10c      	bne.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8001f0c:	4b31      	ldr	r3, [pc, #196]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a35      	ldr	r2, [pc, #212]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	0019      	movs	r1, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	23c0      	movs	r3, #192	; 0xc0
 8001f1c:	039b      	lsls	r3, r3, #14
 8001f1e:	401a      	ands	r2, r3
 8001f20:	4b2c      	ldr	r3, [pc, #176]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f22:	430a      	orrs	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	4b2b      	ldr	r3, [pc, #172]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f28:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	23c0      	movs	r3, #192	; 0xc0
 8001f30:	029b      	lsls	r3, r3, #10
 8001f32:	401a      	ands	r2, r3
 8001f34:	4b27      	ldr	r3, [pc, #156]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f36:	430a      	orrs	r2, r1
 8001f38:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f3a:	2317      	movs	r3, #23
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d105      	bne.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f44:	4b23      	ldr	r3, [pc, #140]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f48:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f4a:	4928      	ldr	r1, [pc, #160]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f4c:	400a      	ands	r2, r1
 8001f4e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2202      	movs	r2, #2
 8001f56:	4013      	ands	r3, r2
 8001f58:	d009      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f5a:	4b1e      	ldr	r3, [pc, #120]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	220c      	movs	r2, #12
 8001f60:	4393      	bics	r3, r2
 8001f62:	0019      	movs	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2204      	movs	r2, #4
 8001f74:	4013      	ands	r3, r2
 8001f76:	d009      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f78:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7c:	4a1c      	ldr	r2, [pc, #112]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	0019      	movs	r1, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2208      	movs	r2, #8
 8001f92:	4013      	ands	r3, r2
 8001f94:	d009      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f96:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9a:	4a16      	ldr	r2, [pc, #88]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	0019      	movs	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2280      	movs	r2, #128	; 0x80
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d009      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001fb4:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb8:	4a0f      	ldr	r2, [pc, #60]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	0019      	movs	r1, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	695a      	ldr	r2, [r3, #20]
 8001fc2:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	0018      	movs	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b006      	add	sp, #24
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40007000 	.word	0x40007000
 8001fdc:	fffcffff 	.word	0xfffcffff
 8001fe0:	fff7ffff 	.word	0xfff7ffff
 8001fe4:	00001388 	.word	0x00001388
 8001fe8:	ffcfffff 	.word	0xffcfffff
 8001fec:	efffffff 	.word	0xefffffff
 8001ff0:	fffff3ff 	.word	0xfffff3ff
 8001ff4:	ffffcfff 	.word	0xffffcfff
 8001ff8:	fff3ffff 	.word	0xfff3ffff

08001ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e032      	b.n	8002074 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2239      	movs	r2, #57	; 0x39
 8002012:	5c9b      	ldrb	r3, [r3, r2]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d107      	bne.n	800202a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2238      	movs	r2, #56	; 0x38
 800201e:	2100      	movs	r1, #0
 8002020:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	0018      	movs	r0, r3
 8002026:	f7fe fc41 	bl	80008ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2239      	movs	r2, #57	; 0x39
 800202e:	2102      	movs	r1, #2
 8002030:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3304      	adds	r3, #4
 800203a:	0019      	movs	r1, r3
 800203c:	0010      	movs	r0, r2
 800203e:	f000 facf 	bl	80025e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	223e      	movs	r2, #62	; 0x3e
 8002046:	2101      	movs	r1, #1
 8002048:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	223a      	movs	r2, #58	; 0x3a
 800204e:	2101      	movs	r1, #1
 8002050:	5499      	strb	r1, [r3, r2]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	223b      	movs	r2, #59	; 0x3b
 8002056:	2101      	movs	r1, #1
 8002058:	5499      	strb	r1, [r3, r2]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	223c      	movs	r2, #60	; 0x3c
 800205e:	2101      	movs	r1, #1
 8002060:	5499      	strb	r1, [r3, r2]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	223d      	movs	r2, #61	; 0x3d
 8002066:	2101      	movs	r1, #1
 8002068:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2239      	movs	r2, #57	; 0x39
 800206e:	2101      	movs	r1, #1
 8002070:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	0018      	movs	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	b002      	add	sp, #8
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2239      	movs	r2, #57	; 0x39
 8002088:	5c9b      	ldrb	r3, [r3, r2]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b01      	cmp	r3, #1
 800208e:	d001      	beq.n	8002094 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e02e      	b.n	80020f2 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2239      	movs	r2, #57	; 0x39
 8002098:	2102      	movs	r1, #2
 800209a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	05db      	lsls	r3, r3, #23
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d009      	beq.n	80020bc <HAL_TIM_Base_Start+0x40>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a13      	ldr	r2, [pc, #76]	; (80020fc <HAL_TIM_Base_Start+0x80>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d004      	beq.n	80020bc <HAL_TIM_Base_Start+0x40>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a12      	ldr	r2, [pc, #72]	; (8002100 <HAL_TIM_Base_Start+0x84>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d111      	bne.n	80020e0 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2207      	movs	r2, #7
 80020c4:	4013      	ands	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2b06      	cmp	r3, #6
 80020cc:	d010      	beq.n	80020f0 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2101      	movs	r1, #1
 80020da:	430a      	orrs	r2, r1
 80020dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020de:	e007      	b.n	80020f0 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2101      	movs	r1, #1
 80020ec:	430a      	orrs	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	0018      	movs	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	b004      	add	sp, #16
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	40010800 	.word	0x40010800
 8002100:	40011400 	.word	0x40011400

08002104 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e032      	b.n	800217c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2239      	movs	r2, #57	; 0x39
 800211a:	5c9b      	ldrb	r3, [r3, r2]
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d107      	bne.n	8002132 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2238      	movs	r2, #56	; 0x38
 8002126:	2100      	movs	r1, #0
 8002128:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	0018      	movs	r0, r3
 800212e:	f000 f829 	bl	8002184 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2239      	movs	r2, #57	; 0x39
 8002136:	2102      	movs	r1, #2
 8002138:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3304      	adds	r3, #4
 8002142:	0019      	movs	r1, r3
 8002144:	0010      	movs	r0, r2
 8002146:	f000 fa4b 	bl	80025e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	223e      	movs	r2, #62	; 0x3e
 800214e:	2101      	movs	r1, #1
 8002150:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	223a      	movs	r2, #58	; 0x3a
 8002156:	2101      	movs	r1, #1
 8002158:	5499      	strb	r1, [r3, r2]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	223b      	movs	r2, #59	; 0x3b
 800215e:	2101      	movs	r1, #1
 8002160:	5499      	strb	r1, [r3, r2]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	223c      	movs	r2, #60	; 0x3c
 8002166:	2101      	movs	r1, #1
 8002168:	5499      	strb	r1, [r3, r2]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	223d      	movs	r2, #61	; 0x3d
 800216e:	2101      	movs	r1, #1
 8002170:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2239      	movs	r2, #57	; 0x39
 8002176:	2101      	movs	r1, #1
 8002178:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	0018      	movs	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	b002      	add	sp, #8
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800218c:	46c0      	nop			; (mov r8, r8)
 800218e:	46bd      	mov	sp, r7
 8002190:	b002      	add	sp, #8
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d108      	bne.n	80021b6 <HAL_TIM_PWM_Start+0x22>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	223a      	movs	r2, #58	; 0x3a
 80021a8:	5c9b      	ldrb	r3, [r3, r2]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	3b01      	subs	r3, #1
 80021ae:	1e5a      	subs	r2, r3, #1
 80021b0:	4193      	sbcs	r3, r2
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	e01f      	b.n	80021f6 <HAL_TIM_PWM_Start+0x62>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d108      	bne.n	80021ce <HAL_TIM_PWM_Start+0x3a>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	223b      	movs	r2, #59	; 0x3b
 80021c0:	5c9b      	ldrb	r3, [r3, r2]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	3b01      	subs	r3, #1
 80021c6:	1e5a      	subs	r2, r3, #1
 80021c8:	4193      	sbcs	r3, r2
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	e013      	b.n	80021f6 <HAL_TIM_PWM_Start+0x62>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d108      	bne.n	80021e6 <HAL_TIM_PWM_Start+0x52>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	223c      	movs	r2, #60	; 0x3c
 80021d8:	5c9b      	ldrb	r3, [r3, r2]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	3b01      	subs	r3, #1
 80021de:	1e5a      	subs	r2, r3, #1
 80021e0:	4193      	sbcs	r3, r2
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	e007      	b.n	80021f6 <HAL_TIM_PWM_Start+0x62>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	223d      	movs	r2, #61	; 0x3d
 80021ea:	5c9b      	ldrb	r3, [r3, r2]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	3b01      	subs	r3, #1
 80021f0:	1e5a      	subs	r2, r3, #1
 80021f2:	4193      	sbcs	r3, r2
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e04d      	b.n	800229a <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d104      	bne.n	800220e <HAL_TIM_PWM_Start+0x7a>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	223a      	movs	r2, #58	; 0x3a
 8002208:	2102      	movs	r1, #2
 800220a:	5499      	strb	r1, [r3, r2]
 800220c:	e013      	b.n	8002236 <HAL_TIM_PWM_Start+0xa2>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	2b04      	cmp	r3, #4
 8002212:	d104      	bne.n	800221e <HAL_TIM_PWM_Start+0x8a>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	223b      	movs	r2, #59	; 0x3b
 8002218:	2102      	movs	r1, #2
 800221a:	5499      	strb	r1, [r3, r2]
 800221c:	e00b      	b.n	8002236 <HAL_TIM_PWM_Start+0xa2>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	2b08      	cmp	r3, #8
 8002222:	d104      	bne.n	800222e <HAL_TIM_PWM_Start+0x9a>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	223c      	movs	r2, #60	; 0x3c
 8002228:	2102      	movs	r1, #2
 800222a:	5499      	strb	r1, [r3, r2]
 800222c:	e003      	b.n	8002236 <HAL_TIM_PWM_Start+0xa2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	223d      	movs	r2, #61	; 0x3d
 8002232:	2102      	movs	r1, #2
 8002234:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6839      	ldr	r1, [r7, #0]
 800223c:	2201      	movs	r2, #1
 800223e:	0018      	movs	r0, r3
 8002240:	f000 fbc0 	bl	80029c4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	05db      	lsls	r3, r3, #23
 800224c:	429a      	cmp	r2, r3
 800224e:	d009      	beq.n	8002264 <HAL_TIM_PWM_Start+0xd0>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a13      	ldr	r2, [pc, #76]	; (80022a4 <HAL_TIM_PWM_Start+0x110>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d004      	beq.n	8002264 <HAL_TIM_PWM_Start+0xd0>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a12      	ldr	r2, [pc, #72]	; (80022a8 <HAL_TIM_PWM_Start+0x114>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d111      	bne.n	8002288 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2207      	movs	r2, #7
 800226c:	4013      	ands	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b06      	cmp	r3, #6
 8002274:	d010      	beq.n	8002298 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2101      	movs	r1, #1
 8002282:	430a      	orrs	r2, r1
 8002284:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002286:	e007      	b.n	8002298 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2101      	movs	r1, #1
 8002294:	430a      	orrs	r2, r1
 8002296:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	0018      	movs	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	b004      	add	sp, #16
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	40010800 	.word	0x40010800
 80022a8:	40011400 	.word	0x40011400

080022ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022b8:	2317      	movs	r3, #23
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2238      	movs	r2, #56	; 0x38
 80022c4:	5c9b      	ldrb	r3, [r3, r2]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d101      	bne.n	80022ce <HAL_TIM_PWM_ConfigChannel+0x22>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e0ad      	b.n	800242a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2238      	movs	r2, #56	; 0x38
 80022d2:	2101      	movs	r1, #1
 80022d4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b0c      	cmp	r3, #12
 80022da:	d100      	bne.n	80022de <HAL_TIM_PWM_ConfigChannel+0x32>
 80022dc:	e076      	b.n	80023cc <HAL_TIM_PWM_ConfigChannel+0x120>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b0c      	cmp	r3, #12
 80022e2:	d900      	bls.n	80022e6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80022e4:	e095      	b.n	8002412 <HAL_TIM_PWM_ConfigChannel+0x166>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d04e      	beq.n	800238a <HAL_TIM_PWM_ConfigChannel+0xde>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d900      	bls.n	80022f4 <HAL_TIM_PWM_ConfigChannel+0x48>
 80022f2:	e08e      	b.n	8002412 <HAL_TIM_PWM_ConfigChannel+0x166>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_TIM_PWM_ConfigChannel+0x56>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d021      	beq.n	8002344 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002300:	e087      	b.n	8002412 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	0011      	movs	r1, r2
 800230a:	0018      	movs	r0, r3
 800230c:	f000 f9bc 	bl	8002688 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699a      	ldr	r2, [r3, #24]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2108      	movs	r1, #8
 800231c:	430a      	orrs	r2, r1
 800231e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699a      	ldr	r2, [r3, #24]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2104      	movs	r1, #4
 800232c:	438a      	bics	r2, r1
 800232e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6999      	ldr	r1, [r3, #24]
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	619a      	str	r2, [r3, #24]
      break;
 8002342:	e06b      	b.n	800241c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	0011      	movs	r1, r2
 800234c:	0018      	movs	r0, r3
 800234e:	f000 f9d7 	bl	8002700 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	699a      	ldr	r2, [r3, #24]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2180      	movs	r1, #128	; 0x80
 800235e:	0109      	lsls	r1, r1, #4
 8002360:	430a      	orrs	r2, r1
 8002362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699a      	ldr	r2, [r3, #24]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4931      	ldr	r1, [pc, #196]	; (8002434 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002370:	400a      	ands	r2, r1
 8002372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6999      	ldr	r1, [r3, #24]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	021a      	lsls	r2, r3, #8
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	619a      	str	r2, [r3, #24]
      break;
 8002388:	e048      	b.n	800241c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	0011      	movs	r1, r2
 8002392:	0018      	movs	r0, r3
 8002394:	f000 f9f6 	bl	8002784 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	69da      	ldr	r2, [r3, #28]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2108      	movs	r1, #8
 80023a4:	430a      	orrs	r2, r1
 80023a6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	69da      	ldr	r2, [r3, #28]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2104      	movs	r1, #4
 80023b4:	438a      	bics	r2, r1
 80023b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	69d9      	ldr	r1, [r3, #28]
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	61da      	str	r2, [r3, #28]
      break;
 80023ca:	e027      	b.n	800241c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	0011      	movs	r1, r2
 80023d4:	0018      	movs	r0, r3
 80023d6:	f000 fa15 	bl	8002804 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	69da      	ldr	r2, [r3, #28]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2180      	movs	r1, #128	; 0x80
 80023e6:	0109      	lsls	r1, r1, #4
 80023e8:	430a      	orrs	r2, r1
 80023ea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	69da      	ldr	r2, [r3, #28]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	490f      	ldr	r1, [pc, #60]	; (8002434 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80023f8:	400a      	ands	r2, r1
 80023fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	69d9      	ldr	r1, [r3, #28]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	021a      	lsls	r2, r3, #8
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	61da      	str	r2, [r3, #28]
      break;
 8002410:	e004      	b.n	800241c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002412:	2317      	movs	r3, #23
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
      break;
 800241a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2238      	movs	r2, #56	; 0x38
 8002420:	2100      	movs	r1, #0
 8002422:	5499      	strb	r1, [r3, r2]

  return status;
 8002424:	2317      	movs	r3, #23
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	781b      	ldrb	r3, [r3, #0]
}
 800242a:	0018      	movs	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	b006      	add	sp, #24
 8002430:	bd80      	pop	{r7, pc}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	fffffbff 	.word	0xfffffbff

08002438 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002442:	230f      	movs	r3, #15
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2238      	movs	r2, #56	; 0x38
 800244e:	5c9b      	ldrb	r3, [r3, r2]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <HAL_TIM_ConfigClockSource+0x20>
 8002454:	2302      	movs	r3, #2
 8002456:	e0bc      	b.n	80025d2 <HAL_TIM_ConfigClockSource+0x19a>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2238      	movs	r2, #56	; 0x38
 800245c:	2101      	movs	r1, #1
 800245e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2239      	movs	r2, #57	; 0x39
 8002464:	2102      	movs	r1, #2
 8002466:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2277      	movs	r2, #119	; 0x77
 8002474:	4393      	bics	r3, r2
 8002476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	4a58      	ldr	r2, [pc, #352]	; (80025dc <HAL_TIM_ConfigClockSource+0x1a4>)
 800247c:	4013      	ands	r3, r2
 800247e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	0192      	lsls	r2, r2, #6
 8002490:	4293      	cmp	r3, r2
 8002492:	d040      	beq.n	8002516 <HAL_TIM_ConfigClockSource+0xde>
 8002494:	2280      	movs	r2, #128	; 0x80
 8002496:	0192      	lsls	r2, r2, #6
 8002498:	4293      	cmp	r3, r2
 800249a:	d900      	bls.n	800249e <HAL_TIM_ConfigClockSource+0x66>
 800249c:	e088      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x178>
 800249e:	2280      	movs	r2, #128	; 0x80
 80024a0:	0152      	lsls	r2, r2, #5
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d100      	bne.n	80024a8 <HAL_TIM_ConfigClockSource+0x70>
 80024a6:	e088      	b.n	80025ba <HAL_TIM_ConfigClockSource+0x182>
 80024a8:	2280      	movs	r2, #128	; 0x80
 80024aa:	0152      	lsls	r2, r2, #5
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d900      	bls.n	80024b2 <HAL_TIM_ConfigClockSource+0x7a>
 80024b0:	e07e      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x178>
 80024b2:	2b70      	cmp	r3, #112	; 0x70
 80024b4:	d018      	beq.n	80024e8 <HAL_TIM_ConfigClockSource+0xb0>
 80024b6:	d900      	bls.n	80024ba <HAL_TIM_ConfigClockSource+0x82>
 80024b8:	e07a      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x178>
 80024ba:	2b60      	cmp	r3, #96	; 0x60
 80024bc:	d04f      	beq.n	800255e <HAL_TIM_ConfigClockSource+0x126>
 80024be:	d900      	bls.n	80024c2 <HAL_TIM_ConfigClockSource+0x8a>
 80024c0:	e076      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x178>
 80024c2:	2b50      	cmp	r3, #80	; 0x50
 80024c4:	d03b      	beq.n	800253e <HAL_TIM_ConfigClockSource+0x106>
 80024c6:	d900      	bls.n	80024ca <HAL_TIM_ConfigClockSource+0x92>
 80024c8:	e072      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x178>
 80024ca:	2b40      	cmp	r3, #64	; 0x40
 80024cc:	d057      	beq.n	800257e <HAL_TIM_ConfigClockSource+0x146>
 80024ce:	d900      	bls.n	80024d2 <HAL_TIM_ConfigClockSource+0x9a>
 80024d0:	e06e      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x178>
 80024d2:	2b30      	cmp	r3, #48	; 0x30
 80024d4:	d063      	beq.n	800259e <HAL_TIM_ConfigClockSource+0x166>
 80024d6:	d86b      	bhi.n	80025b0 <HAL_TIM_ConfigClockSource+0x178>
 80024d8:	2b20      	cmp	r3, #32
 80024da:	d060      	beq.n	800259e <HAL_TIM_ConfigClockSource+0x166>
 80024dc:	d868      	bhi.n	80025b0 <HAL_TIM_ConfigClockSource+0x178>
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d05d      	beq.n	800259e <HAL_TIM_ConfigClockSource+0x166>
 80024e2:	2b10      	cmp	r3, #16
 80024e4:	d05b      	beq.n	800259e <HAL_TIM_ConfigClockSource+0x166>
 80024e6:	e063      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	6899      	ldr	r1, [r3, #8]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f000 fa44 	bl	8002984 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2277      	movs	r2, #119	; 0x77
 8002508:	4313      	orrs	r3, r2
 800250a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	609a      	str	r2, [r3, #8]
      break;
 8002514:	e052      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	6899      	ldr	r1, [r3, #8]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f000 fa2d 	bl	8002984 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2180      	movs	r1, #128	; 0x80
 8002536:	01c9      	lsls	r1, r1, #7
 8002538:	430a      	orrs	r2, r1
 800253a:	609a      	str	r2, [r3, #8]
      break;
 800253c:	e03e      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6859      	ldr	r1, [r3, #4]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	001a      	movs	r2, r3
 800254c:	f000 f9a0 	bl	8002890 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2150      	movs	r1, #80	; 0x50
 8002556:	0018      	movs	r0, r3
 8002558:	f000 f9fa 	bl	8002950 <TIM_ITRx_SetConfig>
      break;
 800255c:	e02e      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	6859      	ldr	r1, [r3, #4]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	001a      	movs	r2, r3
 800256c:	f000 f9be 	bl	80028ec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2160      	movs	r1, #96	; 0x60
 8002576:	0018      	movs	r0, r3
 8002578:	f000 f9ea 	bl	8002950 <TIM_ITRx_SetConfig>
      break;
 800257c:	e01e      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6818      	ldr	r0, [r3, #0]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	6859      	ldr	r1, [r3, #4]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	001a      	movs	r2, r3
 800258c:	f000 f980 	bl	8002890 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2140      	movs	r1, #64	; 0x40
 8002596:	0018      	movs	r0, r3
 8002598:	f000 f9da 	bl	8002950 <TIM_ITRx_SetConfig>
      break;
 800259c:	e00e      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	0019      	movs	r1, r3
 80025a8:	0010      	movs	r0, r2
 80025aa:	f000 f9d1 	bl	8002950 <TIM_ITRx_SetConfig>
      break;
 80025ae:	e005      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80025b0:	230f      	movs	r3, #15
 80025b2:	18fb      	adds	r3, r7, r3
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
      break;
 80025b8:	e000      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80025ba:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2239      	movs	r2, #57	; 0x39
 80025c0:	2101      	movs	r1, #1
 80025c2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2238      	movs	r2, #56	; 0x38
 80025c8:	2100      	movs	r1, #0
 80025ca:	5499      	strb	r1, [r3, r2]

  return status;
 80025cc:	230f      	movs	r3, #15
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	781b      	ldrb	r3, [r3, #0]
}
 80025d2:	0018      	movs	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b004      	add	sp, #16
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	ffff00ff 	.word	0xffff00ff

080025e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	2380      	movs	r3, #128	; 0x80
 80025f4:	05db      	lsls	r3, r3, #23
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d007      	beq.n	800260a <TIM_Base_SetConfig+0x2a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a1f      	ldr	r2, [pc, #124]	; (800267c <TIM_Base_SetConfig+0x9c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d003      	beq.n	800260a <TIM_Base_SetConfig+0x2a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a1e      	ldr	r2, [pc, #120]	; (8002680 <TIM_Base_SetConfig+0xa0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d108      	bne.n	800261c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2270      	movs	r2, #112	; 0x70
 800260e:	4393      	bics	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4313      	orrs	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	2380      	movs	r3, #128	; 0x80
 8002620:	05db      	lsls	r3, r3, #23
 8002622:	429a      	cmp	r2, r3
 8002624:	d007      	beq.n	8002636 <TIM_Base_SetConfig+0x56>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a14      	ldr	r2, [pc, #80]	; (800267c <TIM_Base_SetConfig+0x9c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d003      	beq.n	8002636 <TIM_Base_SetConfig+0x56>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a13      	ldr	r2, [pc, #76]	; (8002680 <TIM_Base_SetConfig+0xa0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d108      	bne.n	8002648 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4a12      	ldr	r2, [pc, #72]	; (8002684 <TIM_Base_SetConfig+0xa4>)
 800263a:	4013      	ands	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2280      	movs	r2, #128	; 0x80
 800264c:	4393      	bics	r3, r2
 800264e:	001a      	movs	r2, r3
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	615a      	str	r2, [r3, #20]
}
 8002674:	46c0      	nop			; (mov r8, r8)
 8002676:	46bd      	mov	sp, r7
 8002678:	b004      	add	sp, #16
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40010800 	.word	0x40010800
 8002680:	40011400 	.word	0x40011400
 8002684:	fffffcff 	.word	0xfffffcff

08002688 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	2201      	movs	r2, #1
 8002698:	4393      	bics	r3, r2
 800269a:	001a      	movs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2270      	movs	r2, #112	; 0x70
 80026b6:	4393      	bics	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2203      	movs	r2, #3
 80026be:	4393      	bics	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	2202      	movs	r2, #2
 80026d0:	4393      	bics	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	4313      	orrs	r3, r2
 80026dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	621a      	str	r2, [r3, #32]
}
 80026f8:	46c0      	nop			; (mov r8, r8)
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b006      	add	sp, #24
 80026fe:	bd80      	pop	{r7, pc}

08002700 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	2210      	movs	r2, #16
 8002710:	4393      	bics	r3, r2
 8002712:	001a      	movs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4a13      	ldr	r2, [pc, #76]	; (800277c <TIM_OC2_SetConfig+0x7c>)
 800272e:	4013      	ands	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4a12      	ldr	r2, [pc, #72]	; (8002780 <TIM_OC2_SetConfig+0x80>)
 8002736:	4013      	ands	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	021b      	lsls	r3, r3, #8
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	4313      	orrs	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2220      	movs	r2, #32
 800274a:	4393      	bics	r3, r2
 800274c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	4313      	orrs	r3, r2
 8002758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	621a      	str	r2, [r3, #32]
}
 8002774:	46c0      	nop			; (mov r8, r8)
 8002776:	46bd      	mov	sp, r7
 8002778:	b006      	add	sp, #24
 800277a:	bd80      	pop	{r7, pc}
 800277c:	ffff8fff 	.word	0xffff8fff
 8002780:	fffffcff 	.word	0xfffffcff

08002784 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	4a1a      	ldr	r2, [pc, #104]	; (80027fc <TIM_OC3_SetConfig+0x78>)
 8002794:	401a      	ands	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2270      	movs	r2, #112	; 0x70
 80027b0:	4393      	bics	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2203      	movs	r2, #3
 80027b8:	4393      	bics	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	4a0d      	ldr	r2, [pc, #52]	; (8002800 <TIM_OC3_SetConfig+0x7c>)
 80027ca:	4013      	ands	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	021b      	lsls	r3, r3, #8
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	621a      	str	r2, [r3, #32]
}
 80027f4:	46c0      	nop			; (mov r8, r8)
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b006      	add	sp, #24
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	fffffeff 	.word	0xfffffeff
 8002800:	fffffdff 	.word	0xfffffdff

08002804 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	4a1b      	ldr	r2, [pc, #108]	; (8002880 <TIM_OC4_SetConfig+0x7c>)
 8002814:	401a      	ands	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4a15      	ldr	r2, [pc, #84]	; (8002884 <TIM_OC4_SetConfig+0x80>)
 8002830:	4013      	ands	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4a14      	ldr	r2, [pc, #80]	; (8002888 <TIM_OC4_SetConfig+0x84>)
 8002838:	4013      	ands	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	021b      	lsls	r3, r3, #8
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4313      	orrs	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	4a10      	ldr	r2, [pc, #64]	; (800288c <TIM_OC4_SetConfig+0x88>)
 800284c:	4013      	ands	r3, r2
 800284e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	031b      	lsls	r3, r3, #12
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4313      	orrs	r3, r2
 800285a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	621a      	str	r2, [r3, #32]
}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	46bd      	mov	sp, r7
 800287a:	b006      	add	sp, #24
 800287c:	bd80      	pop	{r7, pc}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	ffffefff 	.word	0xffffefff
 8002884:	ffff8fff 	.word	0xffff8fff
 8002888:	fffffcff 	.word	0xfffffcff
 800288c:	ffffdfff 	.word	0xffffdfff

08002890 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	2201      	movs	r2, #1
 80028a8:	4393      	bics	r3, r2
 80028aa:	001a      	movs	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	22f0      	movs	r2, #240	; 0xf0
 80028ba:	4393      	bics	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	220a      	movs	r2, #10
 80028cc:	4393      	bics	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	621a      	str	r2, [r3, #32]
}
 80028e4:	46c0      	nop			; (mov r8, r8)
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b006      	add	sp, #24
 80028ea:	bd80      	pop	{r7, pc}

080028ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	2210      	movs	r2, #16
 80028fe:	4393      	bics	r3, r2
 8002900:	001a      	movs	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	4a0d      	ldr	r2, [pc, #52]	; (800294c <TIM_TI2_ConfigInputStage+0x60>)
 8002916:	4013      	ands	r3, r2
 8002918:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	031b      	lsls	r3, r3, #12
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	4313      	orrs	r3, r2
 8002922:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	22a0      	movs	r2, #160	; 0xa0
 8002928:	4393      	bics	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	621a      	str	r2, [r3, #32]
}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	46bd      	mov	sp, r7
 8002946:	b006      	add	sp, #24
 8002948:	bd80      	pop	{r7, pc}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	ffff0fff 	.word	0xffff0fff

08002950 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2270      	movs	r2, #112	; 0x70
 8002964:	4393      	bics	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4313      	orrs	r3, r2
 800296e:	2207      	movs	r2, #7
 8002970:	4313      	orrs	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	609a      	str	r2, [r3, #8]
}
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	46bd      	mov	sp, r7
 800297e:	b004      	add	sp, #16
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
 8002990:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	4a09      	ldr	r2, [pc, #36]	; (80029c0 <TIM_ETR_SetConfig+0x3c>)
 800299c:	4013      	ands	r3, r2
 800299e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	021a      	lsls	r2, r3, #8
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	609a      	str	r2, [r3, #8]
}
 80029b8:	46c0      	nop			; (mov r8, r8)
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b006      	add	sp, #24
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	ffff00ff 	.word	0xffff00ff

080029c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	221f      	movs	r2, #31
 80029d4:	4013      	ands	r3, r2
 80029d6:	2201      	movs	r2, #1
 80029d8:	409a      	lsls	r2, r3
 80029da:	0013      	movs	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	43d2      	mvns	r2, r2
 80029e6:	401a      	ands	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a1a      	ldr	r2, [r3, #32]
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	211f      	movs	r1, #31
 80029f4:	400b      	ands	r3, r1
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	4099      	lsls	r1, r3
 80029fa:	000b      	movs	r3, r1
 80029fc:	431a      	orrs	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	621a      	str	r2, [r3, #32]
}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	46bd      	mov	sp, r7
 8002a06:	b006      	add	sp, #24
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2238      	movs	r2, #56	; 0x38
 8002a1a:	5c9b      	ldrb	r3, [r3, r2]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e042      	b.n	8002aaa <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2238      	movs	r2, #56	; 0x38
 8002a28:	2101      	movs	r1, #1
 8002a2a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2239      	movs	r2, #57	; 0x39
 8002a30:	2102      	movs	r1, #2
 8002a32:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2270      	movs	r2, #112	; 0x70
 8002a48:	4393      	bics	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	2380      	movs	r3, #128	; 0x80
 8002a64:	05db      	lsls	r3, r3, #23
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d009      	beq.n	8002a7e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a11      	ldr	r2, [pc, #68]	; (8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d004      	beq.n	8002a7e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a0f      	ldr	r2, [pc, #60]	; (8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d10c      	bne.n	8002a98 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2280      	movs	r2, #128	; 0x80
 8002a82:	4393      	bics	r3, r2
 8002a84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2239      	movs	r2, #57	; 0x39
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2238      	movs	r2, #56	; 0x38
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	0018      	movs	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b004      	add	sp, #16
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	40010800 	.word	0x40010800
 8002ab8:	40011400 	.word	0x40011400

08002abc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e044      	b.n	8002b58 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d107      	bne.n	8002ae6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2278      	movs	r2, #120	; 0x78
 8002ada:	2100      	movs	r1, #0
 8002adc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	f7fd ff35 	bl	8000950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2224      	movs	r2, #36	; 0x24
 8002aea:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2101      	movs	r1, #1
 8002af8:	438a      	bics	r2, r1
 8002afa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	0018      	movs	r0, r3
 8002b00:	f000 f830 	bl	8002b64 <UART_SetConfig>
 8002b04:	0003      	movs	r3, r0
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e024      	b.n	8002b58 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f000 fa6d 	bl	8002ff8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	490d      	ldr	r1, [pc, #52]	; (8002b60 <HAL_UART_Init+0xa4>)
 8002b2a:	400a      	ands	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	212a      	movs	r1, #42	; 0x2a
 8002b3a:	438a      	bics	r2, r1
 8002b3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2101      	movs	r1, #1
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	0018      	movs	r0, r3
 8002b52:	f000 fb05 	bl	8003160 <UART_CheckIdleState>
 8002b56:	0003      	movs	r3, r0
}
 8002b58:	0018      	movs	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b002      	add	sp, #8
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	ffffb7ff 	.word	0xffffb7ff

08002b64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b64:	b5b0      	push	{r4, r5, r7, lr}
 8002b66:	b08e      	sub	sp, #56	; 0x38
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b6c:	231a      	movs	r3, #26
 8002b6e:	2218      	movs	r2, #24
 8002b70:	189b      	adds	r3, r3, r2
 8002b72:	19db      	adds	r3, r3, r7
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	431a      	orrs	r2, r3
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4ab4      	ldr	r2, [pc, #720]	; (8002e68 <UART_SetConfig+0x304>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	4aaf      	ldr	r2, [pc, #700]	; (8002e6c <UART_SetConfig+0x308>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	0019      	movs	r1, r3
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4aa9      	ldr	r2, [pc, #676]	; (8002e70 <UART_SetConfig+0x30c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d004      	beq.n	8002bd8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	4aa5      	ldr	r2, [pc, #660]	; (8002e74 <UART_SetConfig+0x310>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	0019      	movs	r1, r3
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bea:	430a      	orrs	r2, r1
 8002bec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4aa1      	ldr	r2, [pc, #644]	; (8002e78 <UART_SetConfig+0x314>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d131      	bne.n	8002c5c <UART_SetConfig+0xf8>
 8002bf8:	4ba0      	ldr	r3, [pc, #640]	; (8002e7c <UART_SetConfig+0x318>)
 8002bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfc:	220c      	movs	r2, #12
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b0c      	cmp	r3, #12
 8002c02:	d01d      	beq.n	8002c40 <UART_SetConfig+0xdc>
 8002c04:	d823      	bhi.n	8002c4e <UART_SetConfig+0xea>
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d00c      	beq.n	8002c24 <UART_SetConfig+0xc0>
 8002c0a:	d820      	bhi.n	8002c4e <UART_SetConfig+0xea>
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <UART_SetConfig+0xb2>
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d00e      	beq.n	8002c32 <UART_SetConfig+0xce>
 8002c14:	e01b      	b.n	8002c4e <UART_SetConfig+0xea>
 8002c16:	231b      	movs	r3, #27
 8002c18:	2218      	movs	r2, #24
 8002c1a:	189b      	adds	r3, r3, r2
 8002c1c:	19db      	adds	r3, r3, r7
 8002c1e:	2200      	movs	r2, #0
 8002c20:	701a      	strb	r2, [r3, #0]
 8002c22:	e065      	b.n	8002cf0 <UART_SetConfig+0x18c>
 8002c24:	231b      	movs	r3, #27
 8002c26:	2218      	movs	r2, #24
 8002c28:	189b      	adds	r3, r3, r2
 8002c2a:	19db      	adds	r3, r3, r7
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	701a      	strb	r2, [r3, #0]
 8002c30:	e05e      	b.n	8002cf0 <UART_SetConfig+0x18c>
 8002c32:	231b      	movs	r3, #27
 8002c34:	2218      	movs	r2, #24
 8002c36:	189b      	adds	r3, r3, r2
 8002c38:	19db      	adds	r3, r3, r7
 8002c3a:	2204      	movs	r2, #4
 8002c3c:	701a      	strb	r2, [r3, #0]
 8002c3e:	e057      	b.n	8002cf0 <UART_SetConfig+0x18c>
 8002c40:	231b      	movs	r3, #27
 8002c42:	2218      	movs	r2, #24
 8002c44:	189b      	adds	r3, r3, r2
 8002c46:	19db      	adds	r3, r3, r7
 8002c48:	2208      	movs	r2, #8
 8002c4a:	701a      	strb	r2, [r3, #0]
 8002c4c:	e050      	b.n	8002cf0 <UART_SetConfig+0x18c>
 8002c4e:	231b      	movs	r3, #27
 8002c50:	2218      	movs	r2, #24
 8002c52:	189b      	adds	r3, r3, r2
 8002c54:	19db      	adds	r3, r3, r7
 8002c56:	2210      	movs	r2, #16
 8002c58:	701a      	strb	r2, [r3, #0]
 8002c5a:	e049      	b.n	8002cf0 <UART_SetConfig+0x18c>
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a83      	ldr	r2, [pc, #524]	; (8002e70 <UART_SetConfig+0x30c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d13e      	bne.n	8002ce4 <UART_SetConfig+0x180>
 8002c66:	4b85      	ldr	r3, [pc, #532]	; (8002e7c <UART_SetConfig+0x318>)
 8002c68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c6a:	23c0      	movs	r3, #192	; 0xc0
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	4013      	ands	r3, r2
 8002c70:	22c0      	movs	r2, #192	; 0xc0
 8002c72:	0112      	lsls	r2, r2, #4
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d027      	beq.n	8002cc8 <UART_SetConfig+0x164>
 8002c78:	22c0      	movs	r2, #192	; 0xc0
 8002c7a:	0112      	lsls	r2, r2, #4
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d82a      	bhi.n	8002cd6 <UART_SetConfig+0x172>
 8002c80:	2280      	movs	r2, #128	; 0x80
 8002c82:	0112      	lsls	r2, r2, #4
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d011      	beq.n	8002cac <UART_SetConfig+0x148>
 8002c88:	2280      	movs	r2, #128	; 0x80
 8002c8a:	0112      	lsls	r2, r2, #4
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d822      	bhi.n	8002cd6 <UART_SetConfig+0x172>
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d004      	beq.n	8002c9e <UART_SetConfig+0x13a>
 8002c94:	2280      	movs	r2, #128	; 0x80
 8002c96:	00d2      	lsls	r2, r2, #3
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00e      	beq.n	8002cba <UART_SetConfig+0x156>
 8002c9c:	e01b      	b.n	8002cd6 <UART_SetConfig+0x172>
 8002c9e:	231b      	movs	r3, #27
 8002ca0:	2218      	movs	r2, #24
 8002ca2:	189b      	adds	r3, r3, r2
 8002ca4:	19db      	adds	r3, r3, r7
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	701a      	strb	r2, [r3, #0]
 8002caa:	e021      	b.n	8002cf0 <UART_SetConfig+0x18c>
 8002cac:	231b      	movs	r3, #27
 8002cae:	2218      	movs	r2, #24
 8002cb0:	189b      	adds	r3, r3, r2
 8002cb2:	19db      	adds	r3, r3, r7
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	701a      	strb	r2, [r3, #0]
 8002cb8:	e01a      	b.n	8002cf0 <UART_SetConfig+0x18c>
 8002cba:	231b      	movs	r3, #27
 8002cbc:	2218      	movs	r2, #24
 8002cbe:	189b      	adds	r3, r3, r2
 8002cc0:	19db      	adds	r3, r3, r7
 8002cc2:	2204      	movs	r2, #4
 8002cc4:	701a      	strb	r2, [r3, #0]
 8002cc6:	e013      	b.n	8002cf0 <UART_SetConfig+0x18c>
 8002cc8:	231b      	movs	r3, #27
 8002cca:	2218      	movs	r2, #24
 8002ccc:	189b      	adds	r3, r3, r2
 8002cce:	19db      	adds	r3, r3, r7
 8002cd0:	2208      	movs	r2, #8
 8002cd2:	701a      	strb	r2, [r3, #0]
 8002cd4:	e00c      	b.n	8002cf0 <UART_SetConfig+0x18c>
 8002cd6:	231b      	movs	r3, #27
 8002cd8:	2218      	movs	r2, #24
 8002cda:	189b      	adds	r3, r3, r2
 8002cdc:	19db      	adds	r3, r3, r7
 8002cde:	2210      	movs	r2, #16
 8002ce0:	701a      	strb	r2, [r3, #0]
 8002ce2:	e005      	b.n	8002cf0 <UART_SetConfig+0x18c>
 8002ce4:	231b      	movs	r3, #27
 8002ce6:	2218      	movs	r2, #24
 8002ce8:	189b      	adds	r3, r3, r2
 8002cea:	19db      	adds	r3, r3, r7
 8002cec:	2210      	movs	r2, #16
 8002cee:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a5e      	ldr	r2, [pc, #376]	; (8002e70 <UART_SetConfig+0x30c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d000      	beq.n	8002cfc <UART_SetConfig+0x198>
 8002cfa:	e084      	b.n	8002e06 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002cfc:	231b      	movs	r3, #27
 8002cfe:	2218      	movs	r2, #24
 8002d00:	189b      	adds	r3, r3, r2
 8002d02:	19db      	adds	r3, r3, r7
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d01d      	beq.n	8002d46 <UART_SetConfig+0x1e2>
 8002d0a:	dc20      	bgt.n	8002d4e <UART_SetConfig+0x1ea>
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d015      	beq.n	8002d3c <UART_SetConfig+0x1d8>
 8002d10:	dc1d      	bgt.n	8002d4e <UART_SetConfig+0x1ea>
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <UART_SetConfig+0x1b8>
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d005      	beq.n	8002d26 <UART_SetConfig+0x1c2>
 8002d1a:	e018      	b.n	8002d4e <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d1c:	f7ff f816 	bl	8001d4c <HAL_RCC_GetPCLK1Freq>
 8002d20:	0003      	movs	r3, r0
 8002d22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d24:	e01c      	b.n	8002d60 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d26:	4b55      	ldr	r3, [pc, #340]	; (8002e7c <UART_SetConfig+0x318>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2210      	movs	r2, #16
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d002      	beq.n	8002d36 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d30:	4b53      	ldr	r3, [pc, #332]	; (8002e80 <UART_SetConfig+0x31c>)
 8002d32:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d34:	e014      	b.n	8002d60 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8002d36:	4b53      	ldr	r3, [pc, #332]	; (8002e84 <UART_SetConfig+0x320>)
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d3a:	e011      	b.n	8002d60 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d3c:	f7fe ff56 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 8002d40:	0003      	movs	r3, r0
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d44:	e00c      	b.n	8002d60 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d46:	2380      	movs	r3, #128	; 0x80
 8002d48:	021b      	lsls	r3, r3, #8
 8002d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d4c:	e008      	b.n	8002d60 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002d52:	231a      	movs	r3, #26
 8002d54:	2218      	movs	r2, #24
 8002d56:	189b      	adds	r3, r3, r2
 8002d58:	19db      	adds	r3, r3, r7
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	701a      	strb	r2, [r3, #0]
        break;
 8002d5e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d100      	bne.n	8002d68 <UART_SetConfig+0x204>
 8002d66:	e12f      	b.n	8002fc8 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	0013      	movs	r3, r2
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	189b      	adds	r3, r3, r2
 8002d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d305      	bcc.n	8002d84 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d906      	bls.n	8002d92 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8002d84:	231a      	movs	r3, #26
 8002d86:	2218      	movs	r2, #24
 8002d88:	189b      	adds	r3, r3, r2
 8002d8a:	19db      	adds	r3, r3, r7
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	701a      	strb	r2, [r3, #0]
 8002d90:	e11a      	b.n	8002fc8 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	6939      	ldr	r1, [r7, #16]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	000b      	movs	r3, r1
 8002da0:	0e1b      	lsrs	r3, r3, #24
 8002da2:	0010      	movs	r0, r2
 8002da4:	0205      	lsls	r5, r0, #8
 8002da6:	431d      	orrs	r5, r3
 8002da8:	000b      	movs	r3, r1
 8002daa:	021c      	lsls	r4, r3, #8
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	085b      	lsrs	r3, r3, #1
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	2300      	movs	r3, #0
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68b8      	ldr	r0, [r7, #8]
 8002dba:	68f9      	ldr	r1, [r7, #12]
 8002dbc:	1900      	adds	r0, r0, r4
 8002dbe:	4169      	adcs	r1, r5
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	603b      	str	r3, [r7, #0]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	607b      	str	r3, [r7, #4]
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f7fd fa27 	bl	8000220 <__aeabi_uldivmod>
 8002dd2:	0002      	movs	r2, r0
 8002dd4:	000b      	movs	r3, r1
 8002dd6:	0013      	movs	r3, r2
 8002dd8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ddc:	23c0      	movs	r3, #192	; 0xc0
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d309      	bcc.n	8002df8 <UART_SetConfig+0x294>
 8002de4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002de6:	2380      	movs	r3, #128	; 0x80
 8002de8:	035b      	lsls	r3, r3, #13
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d204      	bcs.n	8002df8 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	e0e7      	b.n	8002fc8 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8002df8:	231a      	movs	r3, #26
 8002dfa:	2218      	movs	r2, #24
 8002dfc:	189b      	adds	r3, r3, r2
 8002dfe:	19db      	adds	r3, r3, r7
 8002e00:	2201      	movs	r2, #1
 8002e02:	701a      	strb	r2, [r3, #0]
 8002e04:	e0e0      	b.n	8002fc8 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	69da      	ldr	r2, [r3, #28]
 8002e0a:	2380      	movs	r3, #128	; 0x80
 8002e0c:	021b      	lsls	r3, r3, #8
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d000      	beq.n	8002e14 <UART_SetConfig+0x2b0>
 8002e12:	e082      	b.n	8002f1a <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8002e14:	231b      	movs	r3, #27
 8002e16:	2218      	movs	r2, #24
 8002e18:	189b      	adds	r3, r3, r2
 8002e1a:	19db      	adds	r3, r3, r7
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d834      	bhi.n	8002e8c <UART_SetConfig+0x328>
 8002e22:	009a      	lsls	r2, r3, #2
 8002e24:	4b18      	ldr	r3, [pc, #96]	; (8002e88 <UART_SetConfig+0x324>)
 8002e26:	18d3      	adds	r3, r2, r3
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e2c:	f7fe ff8e 	bl	8001d4c <HAL_RCC_GetPCLK1Freq>
 8002e30:	0003      	movs	r3, r0
 8002e32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e34:	e033      	b.n	8002e9e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e36:	f7fe ff9f 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 8002e3a:	0003      	movs	r3, r0
 8002e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e3e:	e02e      	b.n	8002e9e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e40:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <UART_SetConfig+0x318>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2210      	movs	r2, #16
 8002e46:	4013      	ands	r3, r2
 8002e48:	d002      	beq.n	8002e50 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e4a:	4b0d      	ldr	r3, [pc, #52]	; (8002e80 <UART_SetConfig+0x31c>)
 8002e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002e4e:	e026      	b.n	8002e9e <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8002e50:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <UART_SetConfig+0x320>)
 8002e52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e54:	e023      	b.n	8002e9e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e56:	f7fe fec9 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e5e:	e01e      	b.n	8002e9e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e66:	e01a      	b.n	8002e9e <UART_SetConfig+0x33a>
 8002e68:	efff69f3 	.word	0xefff69f3
 8002e6c:	ffffcfff 	.word	0xffffcfff
 8002e70:	40004800 	.word	0x40004800
 8002e74:	fffff4ff 	.word	0xfffff4ff
 8002e78:	40004400 	.word	0x40004400
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	003d0900 	.word	0x003d0900
 8002e84:	00f42400 	.word	0x00f42400
 8002e88:	080034e0 	.word	0x080034e0
      default:
        pclk = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002e90:	231a      	movs	r3, #26
 8002e92:	2218      	movs	r2, #24
 8002e94:	189b      	adds	r3, r3, r2
 8002e96:	19db      	adds	r3, r3, r7
 8002e98:	2201      	movs	r2, #1
 8002e9a:	701a      	strb	r2, [r3, #0]
        break;
 8002e9c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d100      	bne.n	8002ea6 <UART_SetConfig+0x342>
 8002ea4:	e090      	b.n	8002fc8 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea8:	005a      	lsls	r2, r3, #1
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	085b      	lsrs	r3, r3, #1
 8002eb0:	18d2      	adds	r2, r2, r3
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	0010      	movs	r0, r2
 8002eba:	f7fd f925 	bl	8000108 <__udivsi3>
 8002ebe:	0003      	movs	r3, r0
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec4:	2b0f      	cmp	r3, #15
 8002ec6:	d921      	bls.n	8002f0c <UART_SetConfig+0x3a8>
 8002ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eca:	2380      	movs	r3, #128	; 0x80
 8002ecc:	025b      	lsls	r3, r3, #9
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d21c      	bcs.n	8002f0c <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	200e      	movs	r0, #14
 8002ed8:	2418      	movs	r4, #24
 8002eda:	1903      	adds	r3, r0, r4
 8002edc:	19db      	adds	r3, r3, r7
 8002ede:	210f      	movs	r1, #15
 8002ee0:	438a      	bics	r2, r1
 8002ee2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee6:	085b      	lsrs	r3, r3, #1
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2207      	movs	r2, #7
 8002eec:	4013      	ands	r3, r2
 8002eee:	b299      	uxth	r1, r3
 8002ef0:	1903      	adds	r3, r0, r4
 8002ef2:	19db      	adds	r3, r3, r7
 8002ef4:	1902      	adds	r2, r0, r4
 8002ef6:	19d2      	adds	r2, r2, r7
 8002ef8:	8812      	ldrh	r2, [r2, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	1902      	adds	r2, r0, r4
 8002f04:	19d2      	adds	r2, r2, r7
 8002f06:	8812      	ldrh	r2, [r2, #0]
 8002f08:	60da      	str	r2, [r3, #12]
 8002f0a:	e05d      	b.n	8002fc8 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002f0c:	231a      	movs	r3, #26
 8002f0e:	2218      	movs	r2, #24
 8002f10:	189b      	adds	r3, r3, r2
 8002f12:	19db      	adds	r3, r3, r7
 8002f14:	2201      	movs	r2, #1
 8002f16:	701a      	strb	r2, [r3, #0]
 8002f18:	e056      	b.n	8002fc8 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f1a:	231b      	movs	r3, #27
 8002f1c:	2218      	movs	r2, #24
 8002f1e:	189b      	adds	r3, r3, r2
 8002f20:	19db      	adds	r3, r3, r7
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d822      	bhi.n	8002f6e <UART_SetConfig+0x40a>
 8002f28:	009a      	lsls	r2, r3, #2
 8002f2a:	4b2f      	ldr	r3, [pc, #188]	; (8002fe8 <UART_SetConfig+0x484>)
 8002f2c:	18d3      	adds	r3, r2, r3
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f32:	f7fe ff0b 	bl	8001d4c <HAL_RCC_GetPCLK1Freq>
 8002f36:	0003      	movs	r3, r0
 8002f38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f3a:	e021      	b.n	8002f80 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f3c:	f7fe ff1c 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 8002f40:	0003      	movs	r3, r0
 8002f42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f44:	e01c      	b.n	8002f80 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f46:	4b29      	ldr	r3, [pc, #164]	; (8002fec <UART_SetConfig+0x488>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2210      	movs	r2, #16
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	d002      	beq.n	8002f56 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002f50:	4b27      	ldr	r3, [pc, #156]	; (8002ff0 <UART_SetConfig+0x48c>)
 8002f52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002f54:	e014      	b.n	8002f80 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8002f56:	4b27      	ldr	r3, [pc, #156]	; (8002ff4 <UART_SetConfig+0x490>)
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f5a:	e011      	b.n	8002f80 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f5c:	f7fe fe46 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 8002f60:	0003      	movs	r3, r0
 8002f62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f64:	e00c      	b.n	8002f80 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f66:	2380      	movs	r3, #128	; 0x80
 8002f68:	021b      	lsls	r3, r3, #8
 8002f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f6c:	e008      	b.n	8002f80 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002f72:	231a      	movs	r3, #26
 8002f74:	2218      	movs	r2, #24
 8002f76:	189b      	adds	r3, r3, r2
 8002f78:	19db      	adds	r3, r3, r7
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	701a      	strb	r2, [r3, #0]
        break;
 8002f7e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d020      	beq.n	8002fc8 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	085a      	lsrs	r2, r3, #1
 8002f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8e:	18d2      	adds	r2, r2, r3
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	0019      	movs	r1, r3
 8002f96:	0010      	movs	r0, r2
 8002f98:	f7fd f8b6 	bl	8000108 <__udivsi3>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa2:	2b0f      	cmp	r3, #15
 8002fa4:	d90a      	bls.n	8002fbc <UART_SetConfig+0x458>
 8002fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	025b      	lsls	r3, r3, #9
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d205      	bcs.n	8002fbc <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60da      	str	r2, [r3, #12]
 8002fba:	e005      	b.n	8002fc8 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002fbc:	231a      	movs	r3, #26
 8002fbe:	2218      	movs	r2, #24
 8002fc0:	189b      	adds	r3, r3, r2
 8002fc2:	19db      	adds	r3, r3, r7
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002fd4:	231a      	movs	r3, #26
 8002fd6:	2218      	movs	r2, #24
 8002fd8:	189b      	adds	r3, r3, r2
 8002fda:	19db      	adds	r3, r3, r7
 8002fdc:	781b      	ldrb	r3, [r3, #0]
}
 8002fde:	0018      	movs	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	b00e      	add	sp, #56	; 0x38
 8002fe4:	bdb0      	pop	{r4, r5, r7, pc}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	08003504 	.word	0x08003504
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	003d0900 	.word	0x003d0900
 8002ff4:	00f42400 	.word	0x00f42400

08002ff8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	2201      	movs	r2, #1
 8003006:	4013      	ands	r3, r2
 8003008:	d00b      	beq.n	8003022 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	4a4a      	ldr	r2, [pc, #296]	; (800313c <UART_AdvFeatureConfig+0x144>)
 8003012:	4013      	ands	r3, r2
 8003014:	0019      	movs	r1, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	2202      	movs	r2, #2
 8003028:	4013      	ands	r3, r2
 800302a:	d00b      	beq.n	8003044 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	4a43      	ldr	r2, [pc, #268]	; (8003140 <UART_AdvFeatureConfig+0x148>)
 8003034:	4013      	ands	r3, r2
 8003036:	0019      	movs	r1, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	2204      	movs	r2, #4
 800304a:	4013      	ands	r3, r2
 800304c:	d00b      	beq.n	8003066 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	4a3b      	ldr	r2, [pc, #236]	; (8003144 <UART_AdvFeatureConfig+0x14c>)
 8003056:	4013      	ands	r3, r2
 8003058:	0019      	movs	r1, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	2208      	movs	r2, #8
 800306c:	4013      	ands	r3, r2
 800306e:	d00b      	beq.n	8003088 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	4a34      	ldr	r2, [pc, #208]	; (8003148 <UART_AdvFeatureConfig+0x150>)
 8003078:	4013      	ands	r3, r2
 800307a:	0019      	movs	r1, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	2210      	movs	r2, #16
 800308e:	4013      	ands	r3, r2
 8003090:	d00b      	beq.n	80030aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	4a2c      	ldr	r2, [pc, #176]	; (800314c <UART_AdvFeatureConfig+0x154>)
 800309a:	4013      	ands	r3, r2
 800309c:	0019      	movs	r1, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	2220      	movs	r2, #32
 80030b0:	4013      	ands	r3, r2
 80030b2:	d00b      	beq.n	80030cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	4a25      	ldr	r2, [pc, #148]	; (8003150 <UART_AdvFeatureConfig+0x158>)
 80030bc:	4013      	ands	r3, r2
 80030be:	0019      	movs	r1, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	2240      	movs	r2, #64	; 0x40
 80030d2:	4013      	ands	r3, r2
 80030d4:	d01d      	beq.n	8003112 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	4a1d      	ldr	r2, [pc, #116]	; (8003154 <UART_AdvFeatureConfig+0x15c>)
 80030de:	4013      	ands	r3, r2
 80030e0:	0019      	movs	r1, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	035b      	lsls	r3, r3, #13
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d10b      	bne.n	8003112 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	4a15      	ldr	r2, [pc, #84]	; (8003158 <UART_AdvFeatureConfig+0x160>)
 8003102:	4013      	ands	r3, r2
 8003104:	0019      	movs	r1, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	2280      	movs	r2, #128	; 0x80
 8003118:	4013      	ands	r3, r2
 800311a:	d00b      	beq.n	8003134 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	4a0e      	ldr	r2, [pc, #56]	; (800315c <UART_AdvFeatureConfig+0x164>)
 8003124:	4013      	ands	r3, r2
 8003126:	0019      	movs	r1, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	605a      	str	r2, [r3, #4]
  }
}
 8003134:	46c0      	nop			; (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	b002      	add	sp, #8
 800313a:	bd80      	pop	{r7, pc}
 800313c:	fffdffff 	.word	0xfffdffff
 8003140:	fffeffff 	.word	0xfffeffff
 8003144:	fffbffff 	.word	0xfffbffff
 8003148:	ffff7fff 	.word	0xffff7fff
 800314c:	ffffefff 	.word	0xffffefff
 8003150:	ffffdfff 	.word	0xffffdfff
 8003154:	ffefffff 	.word	0xffefffff
 8003158:	ff9fffff 	.word	0xff9fffff
 800315c:	fff7ffff 	.word	0xfff7ffff

08003160 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b092      	sub	sp, #72	; 0x48
 8003164:	af02      	add	r7, sp, #8
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2284      	movs	r2, #132	; 0x84
 800316c:	2100      	movs	r1, #0
 800316e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003170:	f7fd fcf6 	bl	8000b60 <HAL_GetTick>
 8003174:	0003      	movs	r3, r0
 8003176:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2208      	movs	r2, #8
 8003180:	4013      	ands	r3, r2
 8003182:	2b08      	cmp	r3, #8
 8003184:	d12c      	bne.n	80031e0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003188:	2280      	movs	r2, #128	; 0x80
 800318a:	0391      	lsls	r1, r2, #14
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	4a46      	ldr	r2, [pc, #280]	; (80032a8 <UART_CheckIdleState+0x148>)
 8003190:	9200      	str	r2, [sp, #0]
 8003192:	2200      	movs	r2, #0
 8003194:	f000 f88c 	bl	80032b0 <UART_WaitOnFlagUntilTimeout>
 8003198:	1e03      	subs	r3, r0, #0
 800319a:	d021      	beq.n	80031e0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800319c:	f3ef 8310 	mrs	r3, PRIMASK
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80031a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80031a6:	2301      	movs	r3, #1
 80031a8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ac:	f383 8810 	msr	PRIMASK, r3
}
 80031b0:	46c0      	nop			; (mov r8, r8)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2180      	movs	r1, #128	; 0x80
 80031be:	438a      	bics	r2, r1
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c8:	f383 8810 	msr	PRIMASK, r3
}
 80031cc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2220      	movs	r2, #32
 80031d2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2278      	movs	r2, #120	; 0x78
 80031d8:	2100      	movs	r1, #0
 80031da:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e05f      	b.n	80032a0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2204      	movs	r2, #4
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d146      	bne.n	800327c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f0:	2280      	movs	r2, #128	; 0x80
 80031f2:	03d1      	lsls	r1, r2, #15
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	4a2c      	ldr	r2, [pc, #176]	; (80032a8 <UART_CheckIdleState+0x148>)
 80031f8:	9200      	str	r2, [sp, #0]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f000 f858 	bl	80032b0 <UART_WaitOnFlagUntilTimeout>
 8003200:	1e03      	subs	r3, r0, #0
 8003202:	d03b      	beq.n	800327c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003204:	f3ef 8310 	mrs	r3, PRIMASK
 8003208:	60fb      	str	r3, [r7, #12]
  return(result);
 800320a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800320c:	637b      	str	r3, [r7, #52]	; 0x34
 800320e:	2301      	movs	r3, #1
 8003210:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	f383 8810 	msr	PRIMASK, r3
}
 8003218:	46c0      	nop			; (mov r8, r8)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4921      	ldr	r1, [pc, #132]	; (80032ac <UART_CheckIdleState+0x14c>)
 8003226:	400a      	ands	r2, r1
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800322c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f383 8810 	msr	PRIMASK, r3
}
 8003234:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003236:	f3ef 8310 	mrs	r3, PRIMASK
 800323a:	61bb      	str	r3, [r7, #24]
  return(result);
 800323c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800323e:	633b      	str	r3, [r7, #48]	; 0x30
 8003240:	2301      	movs	r3, #1
 8003242:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f383 8810 	msr	PRIMASK, r3
}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2101      	movs	r1, #1
 8003258:	438a      	bics	r2, r1
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	f383 8810 	msr	PRIMASK, r3
}
 8003266:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2280      	movs	r2, #128	; 0x80
 800326c:	2120      	movs	r1, #32
 800326e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2278      	movs	r2, #120	; 0x78
 8003274:	2100      	movs	r1, #0
 8003276:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e011      	b.n	80032a0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2220      	movs	r2, #32
 8003280:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2280      	movs	r2, #128	; 0x80
 8003286:	2120      	movs	r1, #32
 8003288:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2278      	movs	r2, #120	; 0x78
 800329a:	2100      	movs	r1, #0
 800329c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	0018      	movs	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	b010      	add	sp, #64	; 0x40
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	01ffffff 	.word	0x01ffffff
 80032ac:	fffffedf 	.word	0xfffffedf

080032b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	1dfb      	adds	r3, r7, #7
 80032be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c0:	e04b      	b.n	800335a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	3301      	adds	r3, #1
 80032c6:	d048      	beq.n	800335a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c8:	f7fd fc4a 	bl	8000b60 <HAL_GetTick>
 80032cc:	0002      	movs	r2, r0
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d302      	bcc.n	80032de <UART_WaitOnFlagUntilTimeout+0x2e>
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e04b      	b.n	800337a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2204      	movs	r2, #4
 80032ea:	4013      	ands	r3, r2
 80032ec:	d035      	beq.n	800335a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	2208      	movs	r2, #8
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d111      	bne.n	8003320 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2208      	movs	r2, #8
 8003302:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	0018      	movs	r0, r3
 8003308:	f000 f83c 	bl	8003384 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2284      	movs	r2, #132	; 0x84
 8003310:	2108      	movs	r1, #8
 8003312:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2278      	movs	r2, #120	; 0x78
 8003318:	2100      	movs	r1, #0
 800331a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e02c      	b.n	800337a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	69da      	ldr	r2, [r3, #28]
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	401a      	ands	r2, r3
 800332c:	2380      	movs	r3, #128	; 0x80
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	429a      	cmp	r2, r3
 8003332:	d112      	bne.n	800335a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2280      	movs	r2, #128	; 0x80
 800333a:	0112      	lsls	r2, r2, #4
 800333c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	0018      	movs	r0, r3
 8003342:	f000 f81f 	bl	8003384 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2284      	movs	r2, #132	; 0x84
 800334a:	2120      	movs	r1, #32
 800334c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2278      	movs	r2, #120	; 0x78
 8003352:	2100      	movs	r1, #0
 8003354:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e00f      	b.n	800337a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	4013      	ands	r3, r2
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	425a      	negs	r2, r3
 800336a:	4153      	adcs	r3, r2
 800336c:	b2db      	uxtb	r3, r3
 800336e:	001a      	movs	r2, r3
 8003370:	1dfb      	adds	r3, r7, #7
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d0a4      	beq.n	80032c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	0018      	movs	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	b004      	add	sp, #16
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08e      	sub	sp, #56	; 0x38
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800338c:	f3ef 8310 	mrs	r3, PRIMASK
 8003390:	617b      	str	r3, [r7, #20]
  return(result);
 8003392:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003394:	637b      	str	r3, [r7, #52]	; 0x34
 8003396:	2301      	movs	r3, #1
 8003398:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	f383 8810 	msr	PRIMASK, r3
}
 80033a0:	46c0      	nop			; (mov r8, r8)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4926      	ldr	r1, [pc, #152]	; (8003448 <UART_EndRxTransfer+0xc4>)
 80033ae:	400a      	ands	r2, r1
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	f383 8810 	msr	PRIMASK, r3
}
 80033bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033be:	f3ef 8310 	mrs	r3, PRIMASK
 80033c2:	623b      	str	r3, [r7, #32]
  return(result);
 80033c4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c6:	633b      	str	r3, [r7, #48]	; 0x30
 80033c8:	2301      	movs	r3, #1
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	f383 8810 	msr	PRIMASK, r3
}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2101      	movs	r1, #1
 80033e0:	438a      	bics	r2, r1
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ea:	f383 8810 	msr	PRIMASK, r3
}
 80033ee:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d118      	bne.n	800342a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033f8:	f3ef 8310 	mrs	r3, PRIMASK
 80033fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80033fe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003402:	2301      	movs	r3, #1
 8003404:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f383 8810 	msr	PRIMASK, r3
}
 800340c:	46c0      	nop			; (mov r8, r8)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2110      	movs	r1, #16
 800341a:	438a      	bics	r2, r1
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003420:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f383 8810 	msr	PRIMASK, r3
}
 8003428:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2280      	movs	r2, #128	; 0x80
 800342e:	2120      	movs	r1, #32
 8003430:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	46bd      	mov	sp, r7
 8003442:	b00e      	add	sp, #56	; 0x38
 8003444:	bd80      	pop	{r7, pc}
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	fffffedf 	.word	0xfffffedf

0800344c <__libc_init_array>:
 800344c:	b570      	push	{r4, r5, r6, lr}
 800344e:	2600      	movs	r6, #0
 8003450:	4d0c      	ldr	r5, [pc, #48]	; (8003484 <__libc_init_array+0x38>)
 8003452:	4c0d      	ldr	r4, [pc, #52]	; (8003488 <__libc_init_array+0x3c>)
 8003454:	1b64      	subs	r4, r4, r5
 8003456:	10a4      	asrs	r4, r4, #2
 8003458:	42a6      	cmp	r6, r4
 800345a:	d109      	bne.n	8003470 <__libc_init_array+0x24>
 800345c:	2600      	movs	r6, #0
 800345e:	f000 f821 	bl	80034a4 <_init>
 8003462:	4d0a      	ldr	r5, [pc, #40]	; (800348c <__libc_init_array+0x40>)
 8003464:	4c0a      	ldr	r4, [pc, #40]	; (8003490 <__libc_init_array+0x44>)
 8003466:	1b64      	subs	r4, r4, r5
 8003468:	10a4      	asrs	r4, r4, #2
 800346a:	42a6      	cmp	r6, r4
 800346c:	d105      	bne.n	800347a <__libc_init_array+0x2e>
 800346e:	bd70      	pop	{r4, r5, r6, pc}
 8003470:	00b3      	lsls	r3, r6, #2
 8003472:	58eb      	ldr	r3, [r5, r3]
 8003474:	4798      	blx	r3
 8003476:	3601      	adds	r6, #1
 8003478:	e7ee      	b.n	8003458 <__libc_init_array+0xc>
 800347a:	00b3      	lsls	r3, r6, #2
 800347c:	58eb      	ldr	r3, [r5, r3]
 800347e:	4798      	blx	r3
 8003480:	3601      	adds	r6, #1
 8003482:	e7f2      	b.n	800346a <__libc_init_array+0x1e>
 8003484:	08003530 	.word	0x08003530
 8003488:	08003530 	.word	0x08003530
 800348c:	08003530 	.word	0x08003530
 8003490:	08003534 	.word	0x08003534

08003494 <memset>:
 8003494:	0003      	movs	r3, r0
 8003496:	1882      	adds	r2, r0, r2
 8003498:	4293      	cmp	r3, r2
 800349a:	d100      	bne.n	800349e <memset+0xa>
 800349c:	4770      	bx	lr
 800349e:	7019      	strb	r1, [r3, #0]
 80034a0:	3301      	adds	r3, #1
 80034a2:	e7f9      	b.n	8003498 <memset+0x4>

080034a4 <_init>:
 80034a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034aa:	bc08      	pop	{r3}
 80034ac:	469e      	mov	lr, r3
 80034ae:	4770      	bx	lr

080034b0 <_fini>:
 80034b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034b6:	bc08      	pop	{r3}
 80034b8:	469e      	mov	lr, r3
 80034ba:	4770      	bx	lr
