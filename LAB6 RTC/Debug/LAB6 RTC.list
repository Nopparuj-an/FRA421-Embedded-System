
LAB6 RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003444  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003504  08003504  00013504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003570  08003570  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003570  08003570  00013570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003578  08003578  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003578  08003578  00013578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800357c  0800357c  0001357c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  0800358c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  0800358c  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a89e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019a4  00000000  00000000  0002a8d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  0002c278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000830  00000000  00000000  0002cb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010b29  00000000  00000000  0002d380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b390  00000000  00000000  0003dea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000677fc  00000000  00000000  00049239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b0a35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001edc  00000000  00000000  000b0a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080034ec 	.word	0x080034ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080034ec 	.word	0x080034ec

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b5b0      	push	{r4, r5, r7, lr}
 80004aa:	b096      	sub	sp, #88	; 0x58
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ae:	f000 fb75 	bl	8000b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b2:	f000 f8cd 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b6:	f000 fa23 	bl	8000900 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ba:	f000 f9f1 	bl	80008a0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80004be:	f000 f93f 	bl	8000740 <MX_RTC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (Set.time) {
 80004c2:	4b5f      	ldr	r3, [pc, #380]	; (8000640 <main+0x198>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d030      	beq.n	800052c <main+0x84>
			Set.time = 0;
 80004ca:	4b5d      	ldr	r3, [pc, #372]	; (8000640 <main+0x198>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
			//setting Time
			RTC_TimeTypeDef sTime = { 0 };
 80004d0:	2444      	movs	r4, #68	; 0x44
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	0018      	movs	r0, r3
 80004d6:	2314      	movs	r3, #20
 80004d8:	001a      	movs	r2, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	f002 fffe 	bl	80034dc <memset>
			sTime.Hours = 0x11;
 80004e0:	0021      	movs	r1, r4
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2211      	movs	r2, #17
 80004e6:	701a      	strb	r2, [r3, #0]
			sTime.Minutes = 0x55;
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2255      	movs	r2, #85	; 0x55
 80004ec:	705a      	strb	r2, [r3, #1]
			sTime.Seconds = 0;
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2200      	movs	r2, #0
 80004f2:	709a      	strb	r2, [r3, #2]
			HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	4b53      	ldr	r3, [pc, #332]	; (8000644 <main+0x19c>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	0018      	movs	r0, r3
 80004fc:	f001 fe52 	bl	80021a4 <HAL_RTC_SetTime>
			RTC_DateTypeDef sDate = { 0 };
 8000500:	2140      	movs	r1, #64	; 0x40
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
			sDate.Date = 0x20;
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2220      	movs	r2, #32
 800050c:	709a      	strb	r2, [r3, #2]
			sDate.Month = 0x10;
 800050e:	187b      	adds	r3, r7, r1
 8000510:	2210      	movs	r2, #16
 8000512:	705a      	strb	r2, [r3, #1]
			sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000514:	187b      	adds	r3, r7, r1
 8000516:	2205      	movs	r2, #5
 8000518:	701a      	strb	r2, [r3, #0]
			sDate.Year = 0x23;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2223      	movs	r2, #35	; 0x23
 800051e:	70da      	strb	r2, [r3, #3]
			HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8000520:	1879      	adds	r1, r7, r1
 8000522:	4b48      	ldr	r3, [pc, #288]	; (8000644 <main+0x19c>)
 8000524:	2201      	movs	r2, #1
 8000526:	0018      	movs	r0, r3
 8000528:	f001 ff44 	bl	80023b4 <HAL_RTC_SetDate>
		}

		if (Set.alarm) {
 800052c:	4b44      	ldr	r3, [pc, #272]	; (8000640 <main+0x198>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d06f      	beq.n	8000614 <main+0x16c>
			Set.alarm = 0;
 8000534:	4b42      	ldr	r3, [pc, #264]	; (8000640 <main+0x198>)
 8000536:	2200      	movs	r2, #0
 8000538:	605a      	str	r2, [r3, #4]
			//set alarm at next 10s , and Sleep CPU
			RTC_AlarmTypeDef sAlarm = { 0 };
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	0018      	movs	r0, r3
 800053e:	2328      	movs	r3, #40	; 0x28
 8000540:	001a      	movs	r2, r3
 8000542:	2100      	movs	r1, #0
 8000544:	f002 ffca 	bl	80034dc <memset>
			RTC_TimeTypeDef sTime = NowTime;
 8000548:	212c      	movs	r1, #44	; 0x2c
 800054a:	187b      	adds	r3, r7, r1
 800054c:	4a3e      	ldr	r2, [pc, #248]	; (8000648 <main+0x1a0>)
 800054e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000550:	c331      	stmia	r3!, {r0, r4, r5}
 8000552:	ca11      	ldmia	r2!, {r0, r4}
 8000554:	c311      	stmia	r3!, {r0, r4}
			//set alarm at now + 10 s
			sTime.Seconds += 0x10;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	789b      	ldrb	r3, [r3, #2]
 800055a:	3310      	adds	r3, #16
 800055c:	b2da      	uxtb	r2, r3
 800055e:	187b      	adds	r3, r7, r1
 8000560:	709a      	strb	r2, [r3, #2]
			//corrected over time
			if (sTime.Seconds >= 0x60) {
 8000562:	187b      	adds	r3, r7, r1
 8000564:	789b      	ldrb	r3, [r3, #2]
 8000566:	2b5f      	cmp	r3, #95	; 0x5f
 8000568:	d925      	bls.n	80005b6 <main+0x10e>
				sTime.Seconds -= 0x60;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	789b      	ldrb	r3, [r3, #2]
 800056e:	3b60      	subs	r3, #96	; 0x60
 8000570:	b2da      	uxtb	r2, r3
 8000572:	187b      	adds	r3, r7, r1
 8000574:	709a      	strb	r2, [r3, #2]
				sTime.Minutes++;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	785b      	ldrb	r3, [r3, #1]
 800057a:	3301      	adds	r3, #1
 800057c:	b2da      	uxtb	r2, r3
 800057e:	187b      	adds	r3, r7, r1
 8000580:	705a      	strb	r2, [r3, #1]
				if (sTime.Minutes >= 0x60) {
 8000582:	187b      	adds	r3, r7, r1
 8000584:	785b      	ldrb	r3, [r3, #1]
 8000586:	2b5f      	cmp	r3, #95	; 0x5f
 8000588:	d915      	bls.n	80005b6 <main+0x10e>
					sTime.Minutes -= 0x60;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	785b      	ldrb	r3, [r3, #1]
 800058e:	3b60      	subs	r3, #96	; 0x60
 8000590:	b2da      	uxtb	r2, r3
 8000592:	187b      	adds	r3, r7, r1
 8000594:	705a      	strb	r2, [r3, #1]
					sTime.Hours++;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	3301      	adds	r3, #1
 800059c:	b2da      	uxtb	r2, r3
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	701a      	strb	r2, [r3, #0]
					if (sTime.Hours >= 0x24) {
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b23      	cmp	r3, #35	; 0x23
 80005a8:	d905      	bls.n	80005b6 <main+0x10e>
						sTime.Hours -= 0x24;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	3b24      	subs	r3, #36	; 0x24
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			//setting alarm mask
			sAlarm.AlarmTime = sTime;
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	222c      	movs	r2, #44	; 0x2c
 80005ba:	18ba      	adds	r2, r7, r2
 80005bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80005be:	c313      	stmia	r3!, {r0, r1, r4}
 80005c0:	ca03      	ldmia	r2!, {r0, r1}
 80005c2:	c303      	stmia	r3!, {r0, r1}
			sAlarm.Alarm = RTC_ALARM_A;
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2280      	movs	r2, #128	; 0x80
 80005c8:	0052      	lsls	r2, r2, #1
 80005ca:	625a      	str	r2, [r3, #36]	; 0x24
			sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	0612      	lsls	r2, r2, #24
 80005d2:	615a      	str	r2, [r3, #20]
			sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	22f0      	movs	r2, #240	; 0xf0
 80005d8:	0512      	lsls	r2, r2, #20
 80005da:	619a      	str	r2, [r3, #24]
			sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2200      	movs	r2, #0
 80005e0:	61da      	str	r2, [r3, #28]
			sAlarm.AlarmDateWeekDay = 0x1;
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2220      	movs	r2, #32
 80005e6:	2101      	movs	r1, #1
 80005e8:	5499      	strb	r1, [r3, r2]
			//stop LED (For save energy)
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ea:	23a0      	movs	r3, #160	; 0xa0
 80005ec:	05db      	lsls	r3, r3, #23
 80005ee:	2200      	movs	r2, #0
 80005f0:	2120      	movs	r1, #32
 80005f2:	0018      	movs	r0, r3
 80005f4:	f000 fdde 	bl	80011b4 <HAL_GPIO_WritePin>
			//set alarm
			HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD);
 80005f8:	1d39      	adds	r1, r7, #4
 80005fa:	4b12      	ldr	r3, [pc, #72]	; (8000644 <main+0x19c>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	0018      	movs	r0, r3
 8000600:	f001 ffbc 	bl	800257c <HAL_RTC_SetAlarm_IT>
			//put CPU to stop mode
			HAL_SuspendTick();
 8000604:	f000 fb5e 	bl	8000cc4 <HAL_SuspendTick>
			HAL_PWR_EnterSLEEPMode( PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE);
 8000608:	2102      	movs	r1, #2
 800060a:	2000      	movs	r0, #0
 800060c:	f000 fe0a 	bl	8001224 <HAL_PWR_EnterSLEEPMode>
			//code stop / resume here
			HAL_ResumeTick();
 8000610:	f000 fb66 	bl	8000ce0 <HAL_ResumeTick>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//simulate task
		HAL_Delay(100);
 8000614:	2064      	movs	r0, #100	; 0x64
 8000616:	f000 fb31 	bl	8000c7c <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800061a:	23a0      	movs	r3, #160	; 0xa0
 800061c:	05db      	lsls	r3, r3, #23
 800061e:	2120      	movs	r1, #32
 8000620:	0018      	movs	r0, r3
 8000622:	f000 fde4 	bl	80011ee <HAL_GPIO_TogglePin>
		//read RTC NEED TO READ BOTH IN ORDER
		HAL_RTC_GetTime(&hrtc, &NowTime, RTC_FORMAT_BCD);
 8000626:	4908      	ldr	r1, [pc, #32]	; (8000648 <main+0x1a0>)
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <main+0x19c>)
 800062a:	2201      	movs	r2, #1
 800062c:	0018      	movs	r0, r3
 800062e:	f001 fe63 	bl	80022f8 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &NowDate, RTC_FORMAT_BCD);
 8000632:	4906      	ldr	r1, [pc, #24]	; (800064c <main+0x1a4>)
 8000634:	4b03      	ldr	r3, [pc, #12]	; (8000644 <main+0x19c>)
 8000636:	2201      	movs	r2, #1
 8000638:	0018      	movs	r0, r3
 800063a:	f001 ff4f 	bl	80024dc <HAL_RTC_GetDate>
		if (Set.time) {
 800063e:	e740      	b.n	80004c2 <main+0x1a>
 8000640:	200000ec 	.word	0x200000ec
 8000644:	20000028 	.word	0x20000028
 8000648:	200000d4 	.word	0x200000d4
 800064c:	200000e8 	.word	0x200000e8

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b590      	push	{r4, r7, lr}
 8000652:	b099      	sub	sp, #100	; 0x64
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	242c      	movs	r4, #44	; 0x2c
 8000658:	193b      	adds	r3, r7, r4
 800065a:	0018      	movs	r0, r3
 800065c:	2334      	movs	r3, #52	; 0x34
 800065e:	001a      	movs	r2, r3
 8000660:	2100      	movs	r1, #0
 8000662:	f002 ff3b 	bl	80034dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000666:	2318      	movs	r3, #24
 8000668:	18fb      	adds	r3, r7, r3
 800066a:	0018      	movs	r0, r3
 800066c:	2314      	movs	r3, #20
 800066e:	001a      	movs	r2, r3
 8000670:	2100      	movs	r1, #0
 8000672:	f002 ff33 	bl	80034dc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000676:	003b      	movs	r3, r7
 8000678:	0018      	movs	r0, r3
 800067a:	2318      	movs	r3, #24
 800067c:	001a      	movs	r2, r3
 800067e:	2100      	movs	r1, #0
 8000680:	f002 ff2c 	bl	80034dc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	4b2c      	ldr	r3, [pc, #176]	; (8000738 <SystemClock_Config+0xe8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a2c      	ldr	r2, [pc, #176]	; (800073c <SystemClock_Config+0xec>)
 800068a:	401a      	ands	r2, r3
 800068c:	4b2a      	ldr	r3, [pc, #168]	; (8000738 <SystemClock_Config+0xe8>)
 800068e:	2180      	movs	r1, #128	; 0x80
 8000690:	0109      	lsls	r1, r1, #4
 8000692:	430a      	orrs	r2, r1
 8000694:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000696:	193b      	adds	r3, r7, r4
 8000698:	2209      	movs	r2, #9
 800069a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800069c:	193b      	adds	r3, r7, r4
 800069e:	22a0      	movs	r2, #160	; 0xa0
 80006a0:	02d2      	lsls	r2, r2, #11
 80006a2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006a4:	0021      	movs	r1, r4
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2201      	movs	r2, #1
 80006aa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2202      	movs	r2, #2
 80006b0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2280      	movs	r2, #128	; 0x80
 80006b6:	0252      	lsls	r2, r2, #9
 80006b8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	22c0      	movs	r2, #192	; 0xc0
 80006be:	0312      	lsls	r2, r2, #12
 80006c0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2280      	movs	r2, #128	; 0x80
 80006c6:	03d2      	lsls	r2, r2, #15
 80006c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	0018      	movs	r0, r3
 80006ce:	f000 fe01 	bl	80012d4 <HAL_RCC_OscConfig>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006d6:	f000 f977 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	2118      	movs	r1, #24
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	220f      	movs	r2, #15
 80006e0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2203      	movs	r2, #3
 80006e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2101      	movs	r1, #1
 80006fe:	0018      	movs	r0, r3
 8000700:	f001 f964 	bl	80019cc <HAL_RCC_ClockConfig>
 8000704:	1e03      	subs	r3, r0, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000708:	f000 f95e 	bl	80009c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 800070c:	003b      	movs	r3, r7
 800070e:	2222      	movs	r2, #34	; 0x22
 8000710:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000712:	003b      	movs	r3, r7
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000718:	003b      	movs	r3, r7
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	0292      	lsls	r2, r2, #10
 800071e:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000720:	003b      	movs	r3, r7
 8000722:	0018      	movs	r0, r3
 8000724:	f001 fb76 	bl	8001e14 <HAL_RCCEx_PeriphCLKConfig>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 800072c:	f000 f94c 	bl	80009c8 <Error_Handler>
  }
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	b019      	add	sp, #100	; 0x64
 8000736:	bd90      	pop	{r4, r7, pc}
 8000738:	40007000 	.word	0x40007000
 800073c:	ffffe7ff 	.word	0xffffe7ff

08000740 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b090      	sub	sp, #64	; 0x40
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000746:	232c      	movs	r3, #44	; 0x2c
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	0018      	movs	r0, r3
 800074c:	2314      	movs	r3, #20
 800074e:	001a      	movs	r2, r3
 8000750:	2100      	movs	r1, #0
 8000752:	f002 fec3 	bl	80034dc <memset>
  RTC_DateTypeDef sDate = {0};
 8000756:	2328      	movs	r3, #40	; 0x28
 8000758:	18fb      	adds	r3, r7, r3
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800075e:	003b      	movs	r3, r7
 8000760:	0018      	movs	r0, r3
 8000762:	2328      	movs	r3, #40	; 0x28
 8000764:	001a      	movs	r2, r3
 8000766:	2100      	movs	r1, #0
 8000768:	f002 feb8 	bl	80034dc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800076c:	4b48      	ldr	r3, [pc, #288]	; (8000890 <MX_RTC_Init+0x150>)
 800076e:	4a49      	ldr	r2, [pc, #292]	; (8000894 <MX_RTC_Init+0x154>)
 8000770:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000772:	4b47      	ldr	r3, [pc, #284]	; (8000890 <MX_RTC_Init+0x150>)
 8000774:	2200      	movs	r2, #0
 8000776:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000778:	4b45      	ldr	r3, [pc, #276]	; (8000890 <MX_RTC_Init+0x150>)
 800077a:	227f      	movs	r2, #127	; 0x7f
 800077c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800077e:	4b44      	ldr	r3, [pc, #272]	; (8000890 <MX_RTC_Init+0x150>)
 8000780:	22ff      	movs	r2, #255	; 0xff
 8000782:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000784:	4b42      	ldr	r3, [pc, #264]	; (8000890 <MX_RTC_Init+0x150>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800078a:	4b41      	ldr	r3, [pc, #260]	; (8000890 <MX_RTC_Init+0x150>)
 800078c:	2200      	movs	r2, #0
 800078e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000790:	4b3f      	ldr	r3, [pc, #252]	; (8000890 <MX_RTC_Init+0x150>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000796:	4b3e      	ldr	r3, [pc, #248]	; (8000890 <MX_RTC_Init+0x150>)
 8000798:	2200      	movs	r2, #0
 800079a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800079c:	4b3c      	ldr	r3, [pc, #240]	; (8000890 <MX_RTC_Init+0x150>)
 800079e:	0018      	movs	r0, r3
 80007a0:	f001 fc64 	bl	800206c <HAL_RTC_Init>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 80007a8:	f000 f90e 	bl	80009c8 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

	if (HAL_RTCEx_BKUPRead(&hrtc, 0) != 0x1234) //checking lost power rtc reset
 80007ac:	4b38      	ldr	r3, [pc, #224]	; (8000890 <MX_RTC_Init+0x150>)
 80007ae:	2100      	movs	r1, #0
 80007b0:	0018      	movs	r0, r3
 80007b2:	f002 f989 	bl	8002ac8 <HAL_RTCEx_BKUPRead>
 80007b6:	0003      	movs	r3, r0
 80007b8:	4a37      	ldr	r2, [pc, #220]	; (8000898 <MX_RTC_Init+0x158>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d063      	beq.n	8000886 <MX_RTC_Init+0x146>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80007be:	212c      	movs	r1, #44	; 0x2c
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2200      	movs	r2, #0
 80007ca:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2200      	movs	r2, #0
 80007d0:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007de:	1879      	adds	r1, r7, r1
 80007e0:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <MX_RTC_Init+0x150>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	0018      	movs	r0, r3
 80007e6:	f001 fcdd 	bl	80021a4 <HAL_RTC_SetTime>
 80007ea:	1e03      	subs	r3, r0, #0
 80007ec:	d001      	beq.n	80007f2 <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 80007ee:	f000 f8eb 	bl	80009c8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007f2:	2128      	movs	r1, #40	; 0x28
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2201      	movs	r2, #1
 80007fe:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2201      	movs	r2, #1
 8000804:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2200      	movs	r2, #0
 800080a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800080c:	1879      	adds	r1, r7, r1
 800080e:	4b20      	ldr	r3, [pc, #128]	; (8000890 <MX_RTC_Init+0x150>)
 8000810:	2201      	movs	r2, #1
 8000812:	0018      	movs	r0, r3
 8000814:	f001 fdce 	bl	80023b4 <HAL_RTC_SetDate>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d001      	beq.n	8000820 <MX_RTC_Init+0xe0>
  {
    Error_Handler();
 800081c:	f000 f8d4 	bl	80009c8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000820:	003b      	movs	r3, r7
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000826:	003b      	movs	r3, r7
 8000828:	2200      	movs	r2, #0
 800082a:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800082c:	003b      	movs	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000832:	003b      	movs	r3, r7
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000838:	003b      	movs	r3, r7
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800083e:	003b      	movs	r3, r7
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_HOURS|RTC_ALARMMASK_MINUTES
 8000844:	003b      	movs	r3, r7
 8000846:	4a15      	ldr	r2, [pc, #84]	; (800089c <MX_RTC_Init+0x15c>)
 8000848:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800084a:	003b      	movs	r3, r7
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000850:	003b      	movs	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000856:	003b      	movs	r3, r7
 8000858:	2220      	movs	r2, #32
 800085a:	2101      	movs	r1, #1
 800085c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800085e:	003b      	movs	r3, r7
 8000860:	2280      	movs	r2, #128	; 0x80
 8000862:	0052      	lsls	r2, r2, #1
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000866:	0039      	movs	r1, r7
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_RTC_Init+0x150>)
 800086a:	2201      	movs	r2, #1
 800086c:	0018      	movs	r0, r3
 800086e:	f001 fe85 	bl	800257c <HAL_RTC_SetAlarm_IT>
 8000872:	1e03      	subs	r3, r0, #0
 8000874:	d001      	beq.n	800087a <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8000876:	f000 f8a7 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

		HAL_RTCEx_BKUPWrite(&hrtc, 0, 0x1234); //write Private "Key" data
 800087a:	4a07      	ldr	r2, [pc, #28]	; (8000898 <MX_RTC_Init+0x158>)
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <MX_RTC_Init+0x150>)
 800087e:	2100      	movs	r1, #0
 8000880:	0018      	movs	r0, r3
 8000882:	f002 f909 	bl	8002a98 <HAL_RTCEx_BKUPWrite>
	}

  /* USER CODE END RTC_Init 2 */

}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b010      	add	sp, #64	; 0x40
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	20000028 	.word	0x20000028
 8000894:	40002800 	.word	0x40002800
 8000898:	00001234 	.word	0x00001234
 800089c:	00808080 	.word	0x00808080

080008a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_USART2_UART_Init+0x58>)
 80008a6:	4a15      	ldr	r2, [pc, #84]	; (80008fc <MX_USART2_UART_Init+0x5c>)
 80008a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <MX_USART2_UART_Init+0x58>)
 80008ac:	22e1      	movs	r2, #225	; 0xe1
 80008ae:	0252      	lsls	r2, r2, #9
 80008b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_USART2_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_USART2_UART_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_USART2_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_USART2_UART_Init+0x58>)
 80008c6:	220c      	movs	r2, #12
 80008c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_USART2_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_USART2_UART_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_USART2_UART_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_USART2_UART_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e2:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <MX_USART2_UART_Init+0x58>)
 80008e4:	0018      	movs	r0, r3
 80008e6:	f002 f90d 	bl	8002b04 <HAL_UART_Init>
 80008ea:	1e03      	subs	r3, r0, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008ee:	f000 f86b 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	2000004c 	.word	0x2000004c
 80008fc:	40004400 	.word	0x40004400

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b089      	sub	sp, #36	; 0x24
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	240c      	movs	r4, #12
 8000908:	193b      	adds	r3, r7, r4
 800090a:	0018      	movs	r0, r3
 800090c:	2314      	movs	r3, #20
 800090e:	001a      	movs	r2, r3
 8000910:	2100      	movs	r1, #0
 8000912:	f002 fde3 	bl	80034dc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	4b2a      	ldr	r3, [pc, #168]	; (80009c0 <MX_GPIO_Init+0xc0>)
 8000918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800091a:	4b29      	ldr	r3, [pc, #164]	; (80009c0 <MX_GPIO_Init+0xc0>)
 800091c:	2104      	movs	r1, #4
 800091e:	430a      	orrs	r2, r1
 8000920:	62da      	str	r2, [r3, #44]	; 0x2c
 8000922:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <MX_GPIO_Init+0xc0>)
 8000924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000926:	2204      	movs	r2, #4
 8000928:	4013      	ands	r3, r2
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092e:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <MX_GPIO_Init+0xc0>)
 8000930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000932:	4b23      	ldr	r3, [pc, #140]	; (80009c0 <MX_GPIO_Init+0xc0>)
 8000934:	2180      	movs	r1, #128	; 0x80
 8000936:	430a      	orrs	r2, r1
 8000938:	62da      	str	r2, [r3, #44]	; 0x2c
 800093a:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <MX_GPIO_Init+0xc0>)
 800093c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800093e:	2280      	movs	r2, #128	; 0x80
 8000940:	4013      	ands	r3, r2
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <MX_GPIO_Init+0xc0>)
 8000948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800094a:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <MX_GPIO_Init+0xc0>)
 800094c:	2101      	movs	r1, #1
 800094e:	430a      	orrs	r2, r1
 8000950:	62da      	str	r2, [r3, #44]	; 0x2c
 8000952:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MX_GPIO_Init+0xc0>)
 8000954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000956:	2201      	movs	r2, #1
 8000958:	4013      	ands	r3, r2
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800095e:	23a0      	movs	r3, #160	; 0xa0
 8000960:	05db      	lsls	r3, r3, #23
 8000962:	2200      	movs	r2, #0
 8000964:	2120      	movs	r1, #32
 8000966:	0018      	movs	r0, r3
 8000968:	f000 fc24 	bl	80011b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800096c:	193b      	adds	r3, r7, r4
 800096e:	2280      	movs	r2, #128	; 0x80
 8000970:	0192      	lsls	r2, r2, #6
 8000972:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000974:	193b      	adds	r3, r7, r4
 8000976:	2284      	movs	r2, #132	; 0x84
 8000978:	0392      	lsls	r2, r2, #14
 800097a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	193b      	adds	r3, r7, r4
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000982:	193b      	adds	r3, r7, r4
 8000984:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <MX_GPIO_Init+0xc4>)
 8000986:	0019      	movs	r1, r3
 8000988:	0010      	movs	r0, r2
 800098a:	f000 fa95 	bl	8000eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800098e:	0021      	movs	r1, r4
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2220      	movs	r2, #32
 8000994:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2201      	movs	r2, #1
 800099a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009a8:	187a      	adds	r2, r7, r1
 80009aa:	23a0      	movs	r3, #160	; 0xa0
 80009ac:	05db      	lsls	r3, r3, #23
 80009ae:	0011      	movs	r1, r2
 80009b0:	0018      	movs	r0, r3
 80009b2:	f000 fa81 	bl	8000eb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b009      	add	sp, #36	; 0x24
 80009bc:	bd90      	pop	{r4, r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	40021000 	.word	0x40021000
 80009c4:	50000800 	.word	0x50000800

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009d0:	e7fe      	b.n	80009d0 <Error_Handler+0x8>
	...

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <HAL_MspInit+0x24>)
 80009da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_MspInit+0x24>)
 80009de:	2101      	movs	r1, #1
 80009e0:	430a      	orrs	r2, r1
 80009e2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <HAL_MspInit+0x24>)
 80009e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <HAL_MspInit+0x24>)
 80009ea:	2180      	movs	r1, #128	; 0x80
 80009ec:	0549      	lsls	r1, r1, #21
 80009ee:	430a      	orrs	r2, r1
 80009f0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40021000 	.word	0x40021000

080009fc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <HAL_RTC_MspInit+0x38>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d10e      	bne.n	8000a2c <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <HAL_RTC_MspInit+0x3c>)
 8000a10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <HAL_RTC_MspInit+0x3c>)
 8000a14:	2180      	movs	r1, #128	; 0x80
 8000a16:	02c9      	lsls	r1, r1, #11
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2002      	movs	r0, #2
 8000a22:	f000 fa17 	bl	8000e54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000a26:	2002      	movs	r0, #2
 8000a28:	f000 fa29 	bl	8000e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b002      	add	sp, #8
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40002800 	.word	0x40002800
 8000a38:	40021000 	.word	0x40021000

08000a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b089      	sub	sp, #36	; 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	240c      	movs	r4, #12
 8000a46:	193b      	adds	r3, r7, r4
 8000a48:	0018      	movs	r0, r3
 8000a4a:	2314      	movs	r3, #20
 8000a4c:	001a      	movs	r2, r3
 8000a4e:	2100      	movs	r1, #0
 8000a50:	f002 fd44 	bl	80034dc <memset>
  if(huart->Instance==USART2)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a18      	ldr	r2, [pc, #96]	; (8000abc <HAL_UART_MspInit+0x80>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d129      	bne.n	8000ab2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <HAL_UART_MspInit+0x84>)
 8000a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <HAL_UART_MspInit+0x84>)
 8000a64:	2180      	movs	r1, #128	; 0x80
 8000a66:	0289      	lsls	r1, r1, #10
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <HAL_UART_MspInit+0x84>)
 8000a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <HAL_UART_MspInit+0x84>)
 8000a72:	2101      	movs	r1, #1
 8000a74:	430a      	orrs	r2, r1
 8000a76:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <HAL_UART_MspInit+0x84>)
 8000a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4013      	ands	r3, r2
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a84:	0021      	movs	r1, r4
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	220c      	movs	r2, #12
 8000a8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	2202      	movs	r2, #2
 8000a90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2203      	movs	r2, #3
 8000a9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa4:	187a      	adds	r2, r7, r1
 8000aa6:	23a0      	movs	r3, #160	; 0xa0
 8000aa8:	05db      	lsls	r3, r3, #23
 8000aaa:	0011      	movs	r1, r2
 8000aac:	0018      	movs	r0, r3
 8000aae:	f000 fa03 	bl	8000eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b009      	add	sp, #36	; 0x24
 8000ab8:	bd90      	pop	{r4, r7, pc}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	40004400 	.word	0x40004400
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <NMI_Handler+0x4>

08000aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <HardFault_Handler+0x4>

08000ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae8:	f000 f8ac 	bl	8000c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <RTC_IRQHandler+0x14>)
 8000afa:	0018      	movs	r0, r3
 8000afc:	f001 fea0 	bl	8002840 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	20000028 	.word	0x20000028

08000b0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000b18:	4813      	ldr	r0, [pc, #76]	; (8000b68 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000b1a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b1c:	f7ff fff6 	bl	8000b0c <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000b20:	4812      	ldr	r0, [pc, #72]	; (8000b6c <LoopForever+0x6>)
    LDR R1, [R0]
 8000b22:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000b24:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <LoopForever+0xa>)
    CMP R1, R2
 8000b28:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000b2a:	d105      	bne.n	8000b38 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000b2c:	4811      	ldr	r0, [pc, #68]	; (8000b74 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000b2e:	4912      	ldr	r1, [pc, #72]	; (8000b78 <LoopForever+0x12>)
    STR R1, [R0]
 8000b30:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000b32:	4812      	ldr	r0, [pc, #72]	; (8000b7c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000b34:	4912      	ldr	r1, [pc, #72]	; (8000b80 <LoopForever+0x1a>)
    STR R1, [R0]
 8000b36:	6001      	str	r1, [r0, #0]

08000b38 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b38:	4812      	ldr	r0, [pc, #72]	; (8000b84 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000b3a:	4913      	ldr	r1, [pc, #76]	; (8000b88 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000b3c:	4a13      	ldr	r2, [pc, #76]	; (8000b8c <LoopForever+0x26>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b40:	e002      	b.n	8000b48 <LoopCopyDataInit>

08000b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b46:	3304      	adds	r3, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b4c:	d3f9      	bcc.n	8000b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4e:	4a10      	ldr	r2, [pc, #64]	; (8000b90 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000b50:	4c10      	ldr	r4, [pc, #64]	; (8000b94 <LoopForever+0x2e>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b54:	e001      	b.n	8000b5a <LoopFillZerobss>

08000b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b58:	3204      	adds	r2, #4

08000b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b5c:	d3fb      	bcc.n	8000b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b5e:	f002 fc99 	bl	8003494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b62:	f7ff fca1 	bl	80004a8 <main>

08000b66 <LoopForever>:

LoopForever:
    b LoopForever
 8000b66:	e7fe      	b.n	8000b66 <LoopForever>
   ldr   r0, =_estack
 8000b68:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8000b6c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000b70:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000b74:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000b78:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000b7c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000b80:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b88:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b8c:	08003580 	.word	0x08003580
  ldr r2, =_sbss
 8000b90:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b94:	200000f8 	.word	0x200000f8

08000b98 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b98:	e7fe      	b.n	8000b98 <ADC1_IRQHandler>
	...

08000b9c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <HAL_Init+0x3c>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <HAL_Init+0x3c>)
 8000bae:	2140      	movs	r1, #64	; 0x40
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f000 f811 	bl	8000bdc <HAL_InitTick>
 8000bba:	1e03      	subs	r3, r0, #0
 8000bbc:	d003      	beq.n	8000bc6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000bbe:	1dfb      	adds	r3, r7, #7
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	701a      	strb	r2, [r3, #0]
 8000bc4:	e001      	b.n	8000bca <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bc6:	f7ff ff05 	bl	80009d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
}
 8000bce:	0018      	movs	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b002      	add	sp, #8
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	40022000 	.word	0x40022000

08000bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <HAL_InitTick+0x5c>)
 8000be6:	681c      	ldr	r4, [r3, #0]
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <HAL_InitTick+0x60>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	0019      	movs	r1, r3
 8000bee:	23fa      	movs	r3, #250	; 0xfa
 8000bf0:	0098      	lsls	r0, r3, #2
 8000bf2:	f7ff fa89 	bl	8000108 <__udivsi3>
 8000bf6:	0003      	movs	r3, r0
 8000bf8:	0019      	movs	r1, r3
 8000bfa:	0020      	movs	r0, r4
 8000bfc:	f7ff fa84 	bl	8000108 <__udivsi3>
 8000c00:	0003      	movs	r3, r0
 8000c02:	0018      	movs	r0, r3
 8000c04:	f000 f94b 	bl	8000e9e <HAL_SYSTICK_Config>
 8000c08:	1e03      	subs	r3, r0, #0
 8000c0a:	d001      	beq.n	8000c10 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e00f      	b.n	8000c30 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b03      	cmp	r3, #3
 8000c14:	d80b      	bhi.n	8000c2e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	2301      	movs	r3, #1
 8000c1a:	425b      	negs	r3, r3
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f000 f918 	bl	8000e54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_InitTick+0x64>)
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e000      	b.n	8000c30 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
}
 8000c30:	0018      	movs	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b003      	add	sp, #12
 8000c36:	bd90      	pop	{r4, r7, pc}
 8000c38:	20000000 	.word	0x20000000
 8000c3c:	20000008 	.word	0x20000008
 8000c40:	20000004 	.word	0x20000004

08000c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <HAL_IncTick+0x1c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <HAL_IncTick+0x20>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	18d2      	adds	r2, r2, r3
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <HAL_IncTick+0x20>)
 8000c56:	601a      	str	r2, [r3, #0]
}
 8000c58:	46c0      	nop			; (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	20000008 	.word	0x20000008
 8000c64:	200000f4 	.word	0x200000f4

08000c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c6c:	4b02      	ldr	r3, [pc, #8]	; (8000c78 <HAL_GetTick+0x10>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
}
 8000c70:	0018      	movs	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	200000f4 	.word	0x200000f4

08000c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c84:	f7ff fff0 	bl	8000c68 <HAL_GetTick>
 8000c88:	0003      	movs	r3, r0
 8000c8a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	3301      	adds	r3, #1
 8000c94:	d005      	beq.n	8000ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c96:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <HAL_Delay+0x44>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	001a      	movs	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	189b      	adds	r3, r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	f7ff ffe0 	bl	8000c68 <HAL_GetTick>
 8000ca8:	0002      	movs	r2, r0
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d8f7      	bhi.n	8000ca4 <HAL_Delay+0x28>
  {
  }
}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b004      	add	sp, #16
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	20000008 	.word	0x20000008

08000cc4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <HAL_SuspendTick+0x18>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <HAL_SuspendTick+0x18>)
 8000cce:	2102      	movs	r1, #2
 8000cd0:	438a      	bics	r2, r1
 8000cd2:	601a      	str	r2, [r3, #0]
}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	e000e010 	.word	0xe000e010

08000ce0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <HAL_ResumeTick+0x18>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <HAL_ResumeTick+0x18>)
 8000cea:	2102      	movs	r1, #2
 8000cec:	430a      	orrs	r2, r1
 8000cee:	601a      	str	r2, [r3, #0]
}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	0002      	movs	r2, r0
 8000d04:	1dfb      	adds	r3, r7, #7
 8000d06:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	1dfb      	adds	r3, r7, #7
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b7f      	cmp	r3, #127	; 0x7f
 8000d0e:	d809      	bhi.n	8000d24 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d10:	1dfb      	adds	r3, r7, #7
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	001a      	movs	r2, r3
 8000d16:	231f      	movs	r3, #31
 8000d18:	401a      	ands	r2, r3
 8000d1a:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <__NVIC_EnableIRQ+0x30>)
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	4091      	lsls	r1, r2
 8000d20:	000a      	movs	r2, r1
 8000d22:	601a      	str	r2, [r3, #0]
  }
}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b002      	add	sp, #8
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	e000e100 	.word	0xe000e100

08000d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	0002      	movs	r2, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b7f      	cmp	r3, #127	; 0x7f
 8000d44:	d828      	bhi.n	8000d98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d46:	4a2f      	ldr	r2, [pc, #188]	; (8000e04 <__NVIC_SetPriority+0xd4>)
 8000d48:	1dfb      	adds	r3, r7, #7
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	b25b      	sxtb	r3, r3
 8000d4e:	089b      	lsrs	r3, r3, #2
 8000d50:	33c0      	adds	r3, #192	; 0xc0
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	589b      	ldr	r3, [r3, r2]
 8000d56:	1dfa      	adds	r2, r7, #7
 8000d58:	7812      	ldrb	r2, [r2, #0]
 8000d5a:	0011      	movs	r1, r2
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	400a      	ands	r2, r1
 8000d60:	00d2      	lsls	r2, r2, #3
 8000d62:	21ff      	movs	r1, #255	; 0xff
 8000d64:	4091      	lsls	r1, r2
 8000d66:	000a      	movs	r2, r1
 8000d68:	43d2      	mvns	r2, r2
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	019b      	lsls	r3, r3, #6
 8000d72:	22ff      	movs	r2, #255	; 0xff
 8000d74:	401a      	ands	r2, r3
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	4003      	ands	r3, r0
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d84:	481f      	ldr	r0, [pc, #124]	; (8000e04 <__NVIC_SetPriority+0xd4>)
 8000d86:	1dfb      	adds	r3, r7, #7
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	089b      	lsrs	r3, r3, #2
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	33c0      	adds	r3, #192	; 0xc0
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d96:	e031      	b.n	8000dfc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d98:	4a1b      	ldr	r2, [pc, #108]	; (8000e08 <__NVIC_SetPriority+0xd8>)
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	0019      	movs	r1, r3
 8000da0:	230f      	movs	r3, #15
 8000da2:	400b      	ands	r3, r1
 8000da4:	3b08      	subs	r3, #8
 8000da6:	089b      	lsrs	r3, r3, #2
 8000da8:	3306      	adds	r3, #6
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	18d3      	adds	r3, r2, r3
 8000dae:	3304      	adds	r3, #4
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	1dfa      	adds	r2, r7, #7
 8000db4:	7812      	ldrb	r2, [r2, #0]
 8000db6:	0011      	movs	r1, r2
 8000db8:	2203      	movs	r2, #3
 8000dba:	400a      	ands	r2, r1
 8000dbc:	00d2      	lsls	r2, r2, #3
 8000dbe:	21ff      	movs	r1, #255	; 0xff
 8000dc0:	4091      	lsls	r1, r2
 8000dc2:	000a      	movs	r2, r1
 8000dc4:	43d2      	mvns	r2, r2
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	019b      	lsls	r3, r3, #6
 8000dce:	22ff      	movs	r2, #255	; 0xff
 8000dd0:	401a      	ands	r2, r3
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	2303      	movs	r3, #3
 8000dda:	4003      	ands	r3, r0
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de0:	4809      	ldr	r0, [pc, #36]	; (8000e08 <__NVIC_SetPriority+0xd8>)
 8000de2:	1dfb      	adds	r3, r7, #7
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	001c      	movs	r4, r3
 8000de8:	230f      	movs	r3, #15
 8000dea:	4023      	ands	r3, r4
 8000dec:	3b08      	subs	r3, #8
 8000dee:	089b      	lsrs	r3, r3, #2
 8000df0:	430a      	orrs	r2, r1
 8000df2:	3306      	adds	r3, #6
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	18c3      	adds	r3, r0, r3
 8000df8:	3304      	adds	r3, #4
 8000dfa:	601a      	str	r2, [r3, #0]
}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b003      	add	sp, #12
 8000e02:	bd90      	pop	{r4, r7, pc}
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	1e5a      	subs	r2, r3, #1
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	045b      	lsls	r3, r3, #17
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d301      	bcc.n	8000e24 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e20:	2301      	movs	r3, #1
 8000e22:	e010      	b.n	8000e46 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <SysTick_Config+0x44>)
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	425b      	negs	r3, r3
 8000e30:	2103      	movs	r1, #3
 8000e32:	0018      	movs	r0, r3
 8000e34:	f7ff ff7c 	bl	8000d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <SysTick_Config+0x44>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <SysTick_Config+0x44>)
 8000e40:	2207      	movs	r2, #7
 8000e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	0018      	movs	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b002      	add	sp, #8
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	e000e010 	.word	0xe000e010

08000e54 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	210f      	movs	r1, #15
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	1c02      	adds	r2, r0, #0
 8000e64:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	b25b      	sxtb	r3, r3
 8000e6e:	0011      	movs	r1, r2
 8000e70:	0018      	movs	r0, r3
 8000e72:	f7ff ff5d 	bl	8000d30 <__NVIC_SetPriority>
}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b004      	add	sp, #16
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	0002      	movs	r2, r0
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e8a:	1dfb      	adds	r3, r7, #7
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	0018      	movs	r0, r3
 8000e92:	f7ff ff33 	bl	8000cfc <__NVIC_EnableIRQ>
}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b002      	add	sp, #8
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f7ff ffaf 	bl	8000e0c <SysTick_Config>
 8000eae:	0003      	movs	r3, r0
}
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b002      	add	sp, #8
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ece:	e155      	b.n	800117c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	4091      	lsls	r1, r2
 8000eda:	000a      	movs	r2, r1
 8000edc:	4013      	ands	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d100      	bne.n	8000ee8 <HAL_GPIO_Init+0x30>
 8000ee6:	e146      	b.n	8001176 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2203      	movs	r2, #3
 8000eee:	4013      	ands	r3, r2
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d005      	beq.n	8000f00 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	2203      	movs	r2, #3
 8000efa:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d130      	bne.n	8000f62 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	409a      	lsls	r2, r3
 8000f0e:	0013      	movs	r3, r2
 8000f10:	43da      	mvns	r2, r3
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	68da      	ldr	r2, [r3, #12]
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	409a      	lsls	r2, r3
 8000f22:	0013      	movs	r3, r2
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f36:	2201      	movs	r2, #1
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	409a      	lsls	r2, r3
 8000f3c:	0013      	movs	r3, r2
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	091b      	lsrs	r3, r3, #4
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	401a      	ands	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	409a      	lsls	r2, r3
 8000f54:	0013      	movs	r3, r2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2203      	movs	r2, #3
 8000f68:	4013      	ands	r3, r2
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d017      	beq.n	8000f9e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	409a      	lsls	r2, r3
 8000f7c:	0013      	movs	r3, r2
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	689a      	ldr	r2, [r3, #8]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	409a      	lsls	r2, r3
 8000f90:	0013      	movs	r3, r2
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d123      	bne.n	8000ff2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	08da      	lsrs	r2, r3, #3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3208      	adds	r2, #8
 8000fb2:	0092      	lsls	r2, r2, #2
 8000fb4:	58d3      	ldr	r3, [r2, r3]
 8000fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	2207      	movs	r2, #7
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	220f      	movs	r2, #15
 8000fc2:	409a      	lsls	r2, r3
 8000fc4:	0013      	movs	r3, r2
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	691a      	ldr	r2, [r3, #16]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	2107      	movs	r1, #7
 8000fd6:	400b      	ands	r3, r1
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	409a      	lsls	r2, r3
 8000fdc:	0013      	movs	r3, r2
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	08da      	lsrs	r2, r3, #3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3208      	adds	r2, #8
 8000fec:	0092      	lsls	r2, r2, #2
 8000fee:	6939      	ldr	r1, [r7, #16]
 8000ff0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	409a      	lsls	r2, r3
 8001000:	0013      	movs	r3, r2
 8001002:	43da      	mvns	r2, r3
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2203      	movs	r2, #3
 8001010:	401a      	ands	r2, r3
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	409a      	lsls	r2, r3
 8001018:	0013      	movs	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	23c0      	movs	r3, #192	; 0xc0
 800102c:	029b      	lsls	r3, r3, #10
 800102e:	4013      	ands	r3, r2
 8001030:	d100      	bne.n	8001034 <HAL_GPIO_Init+0x17c>
 8001032:	e0a0      	b.n	8001176 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001034:	4b57      	ldr	r3, [pc, #348]	; (8001194 <HAL_GPIO_Init+0x2dc>)
 8001036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001038:	4b56      	ldr	r3, [pc, #344]	; (8001194 <HAL_GPIO_Init+0x2dc>)
 800103a:	2101      	movs	r1, #1
 800103c:	430a      	orrs	r2, r1
 800103e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001040:	4a55      	ldr	r2, [pc, #340]	; (8001198 <HAL_GPIO_Init+0x2e0>)
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	3302      	adds	r3, #2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	589b      	ldr	r3, [r3, r2]
 800104c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	2203      	movs	r2, #3
 8001052:	4013      	ands	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	220f      	movs	r2, #15
 8001058:	409a      	lsls	r2, r3
 800105a:	0013      	movs	r3, r2
 800105c:	43da      	mvns	r2, r3
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	23a0      	movs	r3, #160	; 0xa0
 8001068:	05db      	lsls	r3, r3, #23
 800106a:	429a      	cmp	r2, r3
 800106c:	d01f      	beq.n	80010ae <HAL_GPIO_Init+0x1f6>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a4a      	ldr	r2, [pc, #296]	; (800119c <HAL_GPIO_Init+0x2e4>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d019      	beq.n	80010aa <HAL_GPIO_Init+0x1f2>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a49      	ldr	r2, [pc, #292]	; (80011a0 <HAL_GPIO_Init+0x2e8>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d013      	beq.n	80010a6 <HAL_GPIO_Init+0x1ee>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a48      	ldr	r2, [pc, #288]	; (80011a4 <HAL_GPIO_Init+0x2ec>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d00d      	beq.n	80010a2 <HAL_GPIO_Init+0x1ea>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a47      	ldr	r2, [pc, #284]	; (80011a8 <HAL_GPIO_Init+0x2f0>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d007      	beq.n	800109e <HAL_GPIO_Init+0x1e6>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a46      	ldr	r2, [pc, #280]	; (80011ac <HAL_GPIO_Init+0x2f4>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d101      	bne.n	800109a <HAL_GPIO_Init+0x1e2>
 8001096:	2305      	movs	r3, #5
 8001098:	e00a      	b.n	80010b0 <HAL_GPIO_Init+0x1f8>
 800109a:	2306      	movs	r3, #6
 800109c:	e008      	b.n	80010b0 <HAL_GPIO_Init+0x1f8>
 800109e:	2304      	movs	r3, #4
 80010a0:	e006      	b.n	80010b0 <HAL_GPIO_Init+0x1f8>
 80010a2:	2303      	movs	r3, #3
 80010a4:	e004      	b.n	80010b0 <HAL_GPIO_Init+0x1f8>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e002      	b.n	80010b0 <HAL_GPIO_Init+0x1f8>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <HAL_GPIO_Init+0x1f8>
 80010ae:	2300      	movs	r3, #0
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	2103      	movs	r1, #3
 80010b4:	400a      	ands	r2, r1
 80010b6:	0092      	lsls	r2, r2, #2
 80010b8:	4093      	lsls	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c0:	4935      	ldr	r1, [pc, #212]	; (8001198 <HAL_GPIO_Init+0x2e0>)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	3302      	adds	r3, #2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ce:	4b38      	ldr	r3, [pc, #224]	; (80011b0 <HAL_GPIO_Init+0x2f8>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	43da      	mvns	r2, r3
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	035b      	lsls	r3, r3, #13
 80010e6:	4013      	ands	r3, r2
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010f2:	4b2f      	ldr	r3, [pc, #188]	; (80011b0 <HAL_GPIO_Init+0x2f8>)
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80010f8:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <HAL_GPIO_Init+0x2f8>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	43da      	mvns	r2, r3
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	2380      	movs	r3, #128	; 0x80
 800110e:	039b      	lsls	r3, r3, #14
 8001110:	4013      	ands	r3, r2
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800111c:	4b24      	ldr	r3, [pc, #144]	; (80011b0 <HAL_GPIO_Init+0x2f8>)
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001122:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <HAL_GPIO_Init+0x2f8>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	43da      	mvns	r2, r3
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	2380      	movs	r3, #128	; 0x80
 8001138:	029b      	lsls	r3, r3, #10
 800113a:	4013      	ands	r3, r2
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <HAL_GPIO_Init+0x2f8>)
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <HAL_GPIO_Init+0x2f8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	43da      	mvns	r2, r3
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	025b      	lsls	r3, r3, #9
 8001164:	4013      	ands	r3, r2
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <HAL_GPIO_Init+0x2f8>)
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	3301      	adds	r3, #1
 800117a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	40da      	lsrs	r2, r3
 8001184:	1e13      	subs	r3, r2, #0
 8001186:	d000      	beq.n	800118a <HAL_GPIO_Init+0x2d2>
 8001188:	e6a2      	b.n	8000ed0 <HAL_GPIO_Init+0x18>
  }
}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	46c0      	nop			; (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	b006      	add	sp, #24
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40021000 	.word	0x40021000
 8001198:	40010000 	.word	0x40010000
 800119c:	50000400 	.word	0x50000400
 80011a0:	50000800 	.word	0x50000800
 80011a4:	50000c00 	.word	0x50000c00
 80011a8:	50001000 	.word	0x50001000
 80011ac:	50001c00 	.word	0x50001c00
 80011b0:	40010400 	.word	0x40010400

080011b4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	0008      	movs	r0, r1
 80011be:	0011      	movs	r1, r2
 80011c0:	1cbb      	adds	r3, r7, #2
 80011c2:	1c02      	adds	r2, r0, #0
 80011c4:	801a      	strh	r2, [r3, #0]
 80011c6:	1c7b      	adds	r3, r7, #1
 80011c8:	1c0a      	adds	r2, r1, #0
 80011ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011cc:	1c7b      	adds	r3, r7, #1
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d004      	beq.n	80011de <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011d4:	1cbb      	adds	r3, r7, #2
 80011d6:	881a      	ldrh	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80011dc:	e003      	b.n	80011e6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80011de:	1cbb      	adds	r3, r7, #2
 80011e0:	881a      	ldrh	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b002      	add	sp, #8
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b084      	sub	sp, #16
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	000a      	movs	r2, r1
 80011f8:	1cbb      	adds	r3, r7, #2
 80011fa:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001202:	1cbb      	adds	r3, r7, #2
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	4013      	ands	r3, r2
 800120a:	041a      	lsls	r2, r3, #16
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	43db      	mvns	r3, r3
 8001210:	1cb9      	adds	r1, r7, #2
 8001212:	8809      	ldrh	r1, [r1, #0]
 8001214:	400b      	ands	r3, r1
 8001216:	431a      	orrs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	619a      	str	r2, [r3, #24]
}
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	b004      	add	sp, #16
 8001222:	bd80      	pop	{r7, pc}

08001224 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	000a      	movs	r2, r1
 800122e:	1cfb      	adds	r3, r7, #3
 8001230:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8001236:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8001242:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <HAL_PWR_EnterSLEEPMode+0xa4>)
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	2201      	movs	r2, #1
 8001248:	4013      	ands	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d008      	beq.n	8001264 <HAL_PWR_EnterSLEEPMode+0x40>
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d005      	beq.n	8001264 <HAL_PWR_EnterSLEEPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8001258:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800125e:	491b      	ldr	r1, [pc, #108]	; (80012cc <HAL_PWR_EnterSLEEPMode+0xa8>)
 8001260:	400a      	ands	r2, r1
 8001262:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8001264:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	617b      	str	r3, [r7, #20]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	2203      	movs	r2, #3
 800126e:	4393      	bics	r3, r2
 8001270:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4313      	orrs	r3, r2
 8001278:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <HAL_PWR_EnterSLEEPMode+0xac>)
 8001282:	691a      	ldr	r2, [r3, #16]
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_PWR_EnterSLEEPMode+0xac>)
 8001286:	2104      	movs	r1, #4
 8001288:	438a      	bics	r2, r1
 800128a:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800128c:	1cfb      	adds	r3, r7, #3
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d101      	bne.n	8001298 <HAL_PWR_EnterSLEEPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001294:	bf30      	wfi
 8001296:	e002      	b.n	800129e <HAL_PWR_EnterSLEEPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001298:	bf40      	sev
    __WFE();
 800129a:	bf20      	wfe
    __WFE();
 800129c:	bf20      	wfe
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d009      	beq.n	80012b8 <HAL_PWR_EnterSLEEPMode+0x94>
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d006      	beq.n	80012b8 <HAL_PWR_EnterSLEEPMode+0x94>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 80012b0:	2180      	movs	r1, #128	; 0x80
 80012b2:	0089      	lsls	r1, r1, #2
 80012b4:	430a      	orrs	r2, r1
 80012b6:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 80012b8:	46c0      	nop			; (mov r8, r8)

}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	46bd      	mov	sp, r7
 80012be:	b006      	add	sp, #24
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	40007000 	.word	0x40007000
 80012c8:	40010000 	.word	0x40010000
 80012cc:	fffffdff 	.word	0xfffffdff
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d4:	b5b0      	push	{r4, r5, r7, lr}
 80012d6:	b08a      	sub	sp, #40	; 0x28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d102      	bne.n	80012e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	f000 fb6c 	bl	80019c0 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012e8:	4bc8      	ldr	r3, [pc, #800]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	220c      	movs	r2, #12
 80012ee:	4013      	ands	r3, r2
 80012f0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012f2:	4bc6      	ldr	r3, [pc, #792]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80012f4:	68da      	ldr	r2, [r3, #12]
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	025b      	lsls	r3, r3, #9
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2201      	movs	r2, #1
 8001304:	4013      	ands	r3, r2
 8001306:	d100      	bne.n	800130a <HAL_RCC_OscConfig+0x36>
 8001308:	e07d      	b.n	8001406 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	2b08      	cmp	r3, #8
 800130e:	d007      	beq.n	8001320 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	2b0c      	cmp	r3, #12
 8001314:	d112      	bne.n	800133c <HAL_RCC_OscConfig+0x68>
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	025b      	lsls	r3, r3, #9
 800131c:	429a      	cmp	r2, r3
 800131e:	d10d      	bne.n	800133c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001320:	4bba      	ldr	r3, [pc, #744]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	029b      	lsls	r3, r3, #10
 8001328:	4013      	ands	r3, r2
 800132a:	d100      	bne.n	800132e <HAL_RCC_OscConfig+0x5a>
 800132c:	e06a      	b.n	8001404 <HAL_RCC_OscConfig+0x130>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d166      	bne.n	8001404 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	f000 fb42 	bl	80019c0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	025b      	lsls	r3, r3, #9
 8001344:	429a      	cmp	r2, r3
 8001346:	d107      	bne.n	8001358 <HAL_RCC_OscConfig+0x84>
 8001348:	4bb0      	ldr	r3, [pc, #704]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4baf      	ldr	r3, [pc, #700]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800134e:	2180      	movs	r1, #128	; 0x80
 8001350:	0249      	lsls	r1, r1, #9
 8001352:	430a      	orrs	r2, r1
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	e027      	b.n	80013a8 <HAL_RCC_OscConfig+0xd4>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	23a0      	movs	r3, #160	; 0xa0
 800135e:	02db      	lsls	r3, r3, #11
 8001360:	429a      	cmp	r2, r3
 8001362:	d10e      	bne.n	8001382 <HAL_RCC_OscConfig+0xae>
 8001364:	4ba9      	ldr	r3, [pc, #676]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4ba8      	ldr	r3, [pc, #672]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800136a:	2180      	movs	r1, #128	; 0x80
 800136c:	02c9      	lsls	r1, r1, #11
 800136e:	430a      	orrs	r2, r1
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	4ba6      	ldr	r3, [pc, #664]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	4ba5      	ldr	r3, [pc, #660]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001378:	2180      	movs	r1, #128	; 0x80
 800137a:	0249      	lsls	r1, r1, #9
 800137c:	430a      	orrs	r2, r1
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	e012      	b.n	80013a8 <HAL_RCC_OscConfig+0xd4>
 8001382:	4ba2      	ldr	r3, [pc, #648]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	4ba1      	ldr	r3, [pc, #644]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001388:	49a1      	ldr	r1, [pc, #644]	; (8001610 <HAL_RCC_OscConfig+0x33c>)
 800138a:	400a      	ands	r2, r1
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	4b9f      	ldr	r3, [pc, #636]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	2380      	movs	r3, #128	; 0x80
 8001394:	025b      	lsls	r3, r3, #9
 8001396:	4013      	ands	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4b9b      	ldr	r3, [pc, #620]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b9a      	ldr	r3, [pc, #616]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80013a2:	499c      	ldr	r1, [pc, #624]	; (8001614 <HAL_RCC_OscConfig+0x340>)
 80013a4:	400a      	ands	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d014      	beq.n	80013da <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fc5a 	bl	8000c68 <HAL_GetTick>
 80013b4:	0003      	movs	r3, r0
 80013b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ba:	f7ff fc55 	bl	8000c68 <HAL_GetTick>
 80013be:	0002      	movs	r2, r0
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b64      	cmp	r3, #100	; 0x64
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e2f9      	b.n	80019c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013cc:	4b8f      	ldr	r3, [pc, #572]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	029b      	lsls	r3, r3, #10
 80013d4:	4013      	ands	r3, r2
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0xe6>
 80013d8:	e015      	b.n	8001406 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013da:	f7ff fc45 	bl	8000c68 <HAL_GetTick>
 80013de:	0003      	movs	r3, r0
 80013e0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013e4:	f7ff fc40 	bl	8000c68 <HAL_GetTick>
 80013e8:	0002      	movs	r2, r0
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b64      	cmp	r3, #100	; 0x64
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e2e4      	b.n	80019c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013f6:	4b85      	ldr	r3, [pc, #532]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	2380      	movs	r3, #128	; 0x80
 80013fc:	029b      	lsls	r3, r3, #10
 80013fe:	4013      	ands	r3, r2
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_OscConfig+0x110>
 8001402:	e000      	b.n	8001406 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001404:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2202      	movs	r2, #2
 800140c:	4013      	ands	r3, r2
 800140e:	d100      	bne.n	8001412 <HAL_RCC_OscConfig+0x13e>
 8001410:	e099      	b.n	8001546 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	2220      	movs	r2, #32
 800141c:	4013      	ands	r3, r2
 800141e:	d009      	beq.n	8001434 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001420:	4b7a      	ldr	r3, [pc, #488]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b79      	ldr	r3, [pc, #484]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001426:	2120      	movs	r1, #32
 8001428:	430a      	orrs	r2, r1
 800142a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	2220      	movs	r2, #32
 8001430:	4393      	bics	r3, r2
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	2b04      	cmp	r3, #4
 8001438:	d005      	beq.n	8001446 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	2b0c      	cmp	r3, #12
 800143e:	d13e      	bne.n	80014be <HAL_RCC_OscConfig+0x1ea>
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d13b      	bne.n	80014be <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001446:	4b71      	ldr	r3, [pc, #452]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2204      	movs	r2, #4
 800144c:	4013      	ands	r3, r2
 800144e:	d004      	beq.n	800145a <HAL_RCC_OscConfig+0x186>
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e2b2      	b.n	80019c0 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145a:	4b6c      	ldr	r3, [pc, #432]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	4a6e      	ldr	r2, [pc, #440]	; (8001618 <HAL_RCC_OscConfig+0x344>)
 8001460:	4013      	ands	r3, r2
 8001462:	0019      	movs	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	021a      	lsls	r2, r3, #8
 800146a:	4b68      	ldr	r3, [pc, #416]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800146c:	430a      	orrs	r2, r1
 800146e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001470:	4b66      	ldr	r3, [pc, #408]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2209      	movs	r2, #9
 8001476:	4393      	bics	r3, r2
 8001478:	0019      	movs	r1, r3
 800147a:	4b64      	ldr	r3, [pc, #400]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800147c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800147e:	430a      	orrs	r2, r1
 8001480:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001482:	f000 fbeb 	bl	8001c5c <HAL_RCC_GetSysClockFreq>
 8001486:	0001      	movs	r1, r0
 8001488:	4b60      	ldr	r3, [pc, #384]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	091b      	lsrs	r3, r3, #4
 800148e:	220f      	movs	r2, #15
 8001490:	4013      	ands	r3, r2
 8001492:	4a62      	ldr	r2, [pc, #392]	; (800161c <HAL_RCC_OscConfig+0x348>)
 8001494:	5cd3      	ldrb	r3, [r2, r3]
 8001496:	000a      	movs	r2, r1
 8001498:	40da      	lsrs	r2, r3
 800149a:	4b61      	ldr	r3, [pc, #388]	; (8001620 <HAL_RCC_OscConfig+0x34c>)
 800149c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800149e:	4b61      	ldr	r3, [pc, #388]	; (8001624 <HAL_RCC_OscConfig+0x350>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2513      	movs	r5, #19
 80014a4:	197c      	adds	r4, r7, r5
 80014a6:	0018      	movs	r0, r3
 80014a8:	f7ff fb98 	bl	8000bdc <HAL_InitTick>
 80014ac:	0003      	movs	r3, r0
 80014ae:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80014b0:	197b      	adds	r3, r7, r5
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d046      	beq.n	8001546 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80014b8:	197b      	adds	r3, r7, r5
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	e280      	b.n	80019c0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d027      	beq.n	8001514 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80014c4:	4b51      	ldr	r3, [pc, #324]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2209      	movs	r2, #9
 80014ca:	4393      	bics	r3, r2
 80014cc:	0019      	movs	r1, r3
 80014ce:	4b4f      	ldr	r3, [pc, #316]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80014d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014d2:	430a      	orrs	r2, r1
 80014d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d6:	f7ff fbc7 	bl	8000c68 <HAL_GetTick>
 80014da:	0003      	movs	r3, r0
 80014dc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014e0:	f7ff fbc2 	bl	8000c68 <HAL_GetTick>
 80014e4:	0002      	movs	r2, r0
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e266      	b.n	80019c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014f2:	4b46      	ldr	r3, [pc, #280]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2204      	movs	r2, #4
 80014f8:	4013      	ands	r3, r2
 80014fa:	d0f1      	beq.n	80014e0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fc:	4b43      	ldr	r3, [pc, #268]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	4a45      	ldr	r2, [pc, #276]	; (8001618 <HAL_RCC_OscConfig+0x344>)
 8001502:	4013      	ands	r3, r2
 8001504:	0019      	movs	r1, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	021a      	lsls	r2, r3, #8
 800150c:	4b3f      	ldr	r3, [pc, #252]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800150e:	430a      	orrs	r2, r1
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	e018      	b.n	8001546 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001514:	4b3d      	ldr	r3, [pc, #244]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b3c      	ldr	r3, [pc, #240]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800151a:	2101      	movs	r1, #1
 800151c:	438a      	bics	r2, r1
 800151e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7ff fba2 	bl	8000c68 <HAL_GetTick>
 8001524:	0003      	movs	r3, r0
 8001526:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800152a:	f7ff fb9d 	bl	8000c68 <HAL_GetTick>
 800152e:	0002      	movs	r2, r0
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e241      	b.n	80019c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800153c:	4b33      	ldr	r3, [pc, #204]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2204      	movs	r2, #4
 8001542:	4013      	ands	r3, r2
 8001544:	d1f1      	bne.n	800152a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2210      	movs	r2, #16
 800154c:	4013      	ands	r3, r2
 800154e:	d100      	bne.n	8001552 <HAL_RCC_OscConfig+0x27e>
 8001550:	e0a1      	b.n	8001696 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d140      	bne.n	80015da <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001558:	4b2c      	ldr	r3, [pc, #176]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4013      	ands	r3, r2
 8001562:	d005      	beq.n	8001570 <HAL_RCC_OscConfig+0x29c>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e227      	b.n	80019c0 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001570:	4b26      	ldr	r3, [pc, #152]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	4a2c      	ldr	r2, [pc, #176]	; (8001628 <HAL_RCC_OscConfig+0x354>)
 8001576:	4013      	ands	r3, r2
 8001578:	0019      	movs	r1, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a1a      	ldr	r2, [r3, #32]
 800157e:	4b23      	ldr	r3, [pc, #140]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001580:	430a      	orrs	r2, r1
 8001582:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001584:	4b21      	ldr	r3, [pc, #132]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	021b      	lsls	r3, r3, #8
 800158a:	0a19      	lsrs	r1, r3, #8
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	061a      	lsls	r2, r3, #24
 8001592:	4b1e      	ldr	r3, [pc, #120]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001594:	430a      	orrs	r2, r1
 8001596:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	0b5b      	lsrs	r3, r3, #13
 800159e:	3301      	adds	r3, #1
 80015a0:	2280      	movs	r2, #128	; 0x80
 80015a2:	0212      	lsls	r2, r2, #8
 80015a4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80015a6:	4b19      	ldr	r3, [pc, #100]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	091b      	lsrs	r3, r3, #4
 80015ac:	210f      	movs	r1, #15
 80015ae:	400b      	ands	r3, r1
 80015b0:	491a      	ldr	r1, [pc, #104]	; (800161c <HAL_RCC_OscConfig+0x348>)
 80015b2:	5ccb      	ldrb	r3, [r1, r3]
 80015b4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80015b6:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <HAL_RCC_OscConfig+0x34c>)
 80015b8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <HAL_RCC_OscConfig+0x350>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2513      	movs	r5, #19
 80015c0:	197c      	adds	r4, r7, r5
 80015c2:	0018      	movs	r0, r3
 80015c4:	f7ff fb0a 	bl	8000bdc <HAL_InitTick>
 80015c8:	0003      	movs	r3, r0
 80015ca:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80015cc:	197b      	adds	r3, r7, r5
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d060      	beq.n	8001696 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80015d4:	197b      	adds	r3, r7, r5
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	e1f2      	b.n	80019c0 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d03f      	beq.n	8001662 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80015e8:	2180      	movs	r1, #128	; 0x80
 80015ea:	0049      	lsls	r1, r1, #1
 80015ec:	430a      	orrs	r2, r1
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fb3a 	bl	8000c68 <HAL_GetTick>
 80015f4:	0003      	movs	r3, r0
 80015f6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015f8:	e018      	b.n	800162c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015fa:	f7ff fb35 	bl	8000c68 <HAL_GetTick>
 80015fe:	0002      	movs	r2, r0
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d911      	bls.n	800162c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e1d9      	b.n	80019c0 <HAL_RCC_OscConfig+0x6ec>
 800160c:	40021000 	.word	0x40021000
 8001610:	fffeffff 	.word	0xfffeffff
 8001614:	fffbffff 	.word	0xfffbffff
 8001618:	ffffe0ff 	.word	0xffffe0ff
 800161c:	08003504 	.word	0x08003504
 8001620:	20000000 	.word	0x20000000
 8001624:	20000004 	.word	0x20000004
 8001628:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800162c:	4bc9      	ldr	r3, [pc, #804]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4013      	ands	r3, r2
 8001636:	d0e0      	beq.n	80015fa <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001638:	4bc6      	ldr	r3, [pc, #792]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	4ac6      	ldr	r2, [pc, #792]	; (8001958 <HAL_RCC_OscConfig+0x684>)
 800163e:	4013      	ands	r3, r2
 8001640:	0019      	movs	r1, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a1a      	ldr	r2, [r3, #32]
 8001646:	4bc3      	ldr	r3, [pc, #780]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 8001648:	430a      	orrs	r2, r1
 800164a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800164c:	4bc1      	ldr	r3, [pc, #772]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	0a19      	lsrs	r1, r3, #8
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	061a      	lsls	r2, r3, #24
 800165a:	4bbe      	ldr	r3, [pc, #760]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 800165c:	430a      	orrs	r2, r1
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	e019      	b.n	8001696 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001662:	4bbc      	ldr	r3, [pc, #752]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	4bbb      	ldr	r3, [pc, #748]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 8001668:	49bc      	ldr	r1, [pc, #752]	; (800195c <HAL_RCC_OscConfig+0x688>)
 800166a:	400a      	ands	r2, r1
 800166c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166e:	f7ff fafb 	bl	8000c68 <HAL_GetTick>
 8001672:	0003      	movs	r3, r0
 8001674:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001678:	f7ff faf6 	bl	8000c68 <HAL_GetTick>
 800167c:	0002      	movs	r2, r0
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e19a      	b.n	80019c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800168a:	4bb2      	ldr	r3, [pc, #712]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4013      	ands	r3, r2
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2208      	movs	r2, #8
 800169c:	4013      	ands	r3, r2
 800169e:	d036      	beq.n	800170e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d019      	beq.n	80016dc <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a8:	4baa      	ldr	r3, [pc, #680]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 80016aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016ac:	4ba9      	ldr	r3, [pc, #676]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 80016ae:	2101      	movs	r1, #1
 80016b0:	430a      	orrs	r2, r1
 80016b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b4:	f7ff fad8 	bl	8000c68 <HAL_GetTick>
 80016b8:	0003      	movs	r3, r0
 80016ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016be:	f7ff fad3 	bl	8000c68 <HAL_GetTick>
 80016c2:	0002      	movs	r2, r0
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e177      	b.n	80019c0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016d0:	4ba0      	ldr	r3, [pc, #640]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 80016d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016d4:	2202      	movs	r2, #2
 80016d6:	4013      	ands	r3, r2
 80016d8:	d0f1      	beq.n	80016be <HAL_RCC_OscConfig+0x3ea>
 80016da:	e018      	b.n	800170e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016dc:	4b9d      	ldr	r3, [pc, #628]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 80016de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016e0:	4b9c      	ldr	r3, [pc, #624]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 80016e2:	2101      	movs	r1, #1
 80016e4:	438a      	bics	r2, r1
 80016e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e8:	f7ff fabe 	bl	8000c68 <HAL_GetTick>
 80016ec:	0003      	movs	r3, r0
 80016ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f2:	f7ff fab9 	bl	8000c68 <HAL_GetTick>
 80016f6:	0002      	movs	r2, r0
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e15d      	b.n	80019c0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001704:	4b93      	ldr	r3, [pc, #588]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 8001706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001708:	2202      	movs	r2, #2
 800170a:	4013      	ands	r3, r2
 800170c:	d1f1      	bne.n	80016f2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2204      	movs	r2, #4
 8001714:	4013      	ands	r3, r2
 8001716:	d100      	bne.n	800171a <HAL_RCC_OscConfig+0x446>
 8001718:	e0ae      	b.n	8001878 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800171a:	2023      	movs	r0, #35	; 0x23
 800171c:	183b      	adds	r3, r7, r0
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001722:	4b8c      	ldr	r3, [pc, #560]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 8001724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	055b      	lsls	r3, r3, #21
 800172a:	4013      	ands	r3, r2
 800172c:	d109      	bne.n	8001742 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800172e:	4b89      	ldr	r3, [pc, #548]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 8001730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001732:	4b88      	ldr	r3, [pc, #544]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 8001734:	2180      	movs	r1, #128	; 0x80
 8001736:	0549      	lsls	r1, r1, #21
 8001738:	430a      	orrs	r2, r1
 800173a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800173c:	183b      	adds	r3, r7, r0
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001742:	4b87      	ldr	r3, [pc, #540]	; (8001960 <HAL_RCC_OscConfig+0x68c>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4013      	ands	r3, r2
 800174c:	d11a      	bne.n	8001784 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800174e:	4b84      	ldr	r3, [pc, #528]	; (8001960 <HAL_RCC_OscConfig+0x68c>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	4b83      	ldr	r3, [pc, #524]	; (8001960 <HAL_RCC_OscConfig+0x68c>)
 8001754:	2180      	movs	r1, #128	; 0x80
 8001756:	0049      	lsls	r1, r1, #1
 8001758:	430a      	orrs	r2, r1
 800175a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800175c:	f7ff fa84 	bl	8000c68 <HAL_GetTick>
 8001760:	0003      	movs	r3, r0
 8001762:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001766:	f7ff fa7f 	bl	8000c68 <HAL_GetTick>
 800176a:	0002      	movs	r2, r0
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b64      	cmp	r3, #100	; 0x64
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e123      	b.n	80019c0 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001778:	4b79      	ldr	r3, [pc, #484]	; (8001960 <HAL_RCC_OscConfig+0x68c>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	4013      	ands	r3, r2
 8001782:	d0f0      	beq.n	8001766 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	429a      	cmp	r2, r3
 800178e:	d107      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4cc>
 8001790:	4b70      	ldr	r3, [pc, #448]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 8001792:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001794:	4b6f      	ldr	r3, [pc, #444]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 8001796:	2180      	movs	r1, #128	; 0x80
 8001798:	0049      	lsls	r1, r1, #1
 800179a:	430a      	orrs	r2, r1
 800179c:	651a      	str	r2, [r3, #80]	; 0x50
 800179e:	e031      	b.n	8001804 <HAL_RCC_OscConfig+0x530>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10c      	bne.n	80017c2 <HAL_RCC_OscConfig+0x4ee>
 80017a8:	4b6a      	ldr	r3, [pc, #424]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 80017aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017ac:	4b69      	ldr	r3, [pc, #420]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 80017ae:	496b      	ldr	r1, [pc, #428]	; (800195c <HAL_RCC_OscConfig+0x688>)
 80017b0:	400a      	ands	r2, r1
 80017b2:	651a      	str	r2, [r3, #80]	; 0x50
 80017b4:	4b67      	ldr	r3, [pc, #412]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 80017b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017b8:	4b66      	ldr	r3, [pc, #408]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 80017ba:	496a      	ldr	r1, [pc, #424]	; (8001964 <HAL_RCC_OscConfig+0x690>)
 80017bc:	400a      	ands	r2, r1
 80017be:	651a      	str	r2, [r3, #80]	; 0x50
 80017c0:	e020      	b.n	8001804 <HAL_RCC_OscConfig+0x530>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	23a0      	movs	r3, #160	; 0xa0
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d10e      	bne.n	80017ec <HAL_RCC_OscConfig+0x518>
 80017ce:	4b61      	ldr	r3, [pc, #388]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 80017d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017d2:	4b60      	ldr	r3, [pc, #384]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 80017d4:	2180      	movs	r1, #128	; 0x80
 80017d6:	00c9      	lsls	r1, r1, #3
 80017d8:	430a      	orrs	r2, r1
 80017da:	651a      	str	r2, [r3, #80]	; 0x50
 80017dc:	4b5d      	ldr	r3, [pc, #372]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 80017de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017e0:	4b5c      	ldr	r3, [pc, #368]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 80017e2:	2180      	movs	r1, #128	; 0x80
 80017e4:	0049      	lsls	r1, r1, #1
 80017e6:	430a      	orrs	r2, r1
 80017e8:	651a      	str	r2, [r3, #80]	; 0x50
 80017ea:	e00b      	b.n	8001804 <HAL_RCC_OscConfig+0x530>
 80017ec:	4b59      	ldr	r3, [pc, #356]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 80017ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017f0:	4b58      	ldr	r3, [pc, #352]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 80017f2:	495a      	ldr	r1, [pc, #360]	; (800195c <HAL_RCC_OscConfig+0x688>)
 80017f4:	400a      	ands	r2, r1
 80017f6:	651a      	str	r2, [r3, #80]	; 0x50
 80017f8:	4b56      	ldr	r3, [pc, #344]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 80017fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017fc:	4b55      	ldr	r3, [pc, #340]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 80017fe:	4959      	ldr	r1, [pc, #356]	; (8001964 <HAL_RCC_OscConfig+0x690>)
 8001800:	400a      	ands	r2, r1
 8001802:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d015      	beq.n	8001838 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180c:	f7ff fa2c 	bl	8000c68 <HAL_GetTick>
 8001810:	0003      	movs	r3, r0
 8001812:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001814:	e009      	b.n	800182a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001816:	f7ff fa27 	bl	8000c68 <HAL_GetTick>
 800181a:	0002      	movs	r2, r0
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	4a51      	ldr	r2, [pc, #324]	; (8001968 <HAL_RCC_OscConfig+0x694>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e0ca      	b.n	80019c0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800182a:	4b4a      	ldr	r3, [pc, #296]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 800182c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4013      	ands	r3, r2
 8001834:	d0ef      	beq.n	8001816 <HAL_RCC_OscConfig+0x542>
 8001836:	e014      	b.n	8001862 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001838:	f7ff fa16 	bl	8000c68 <HAL_GetTick>
 800183c:	0003      	movs	r3, r0
 800183e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001840:	e009      	b.n	8001856 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001842:	f7ff fa11 	bl	8000c68 <HAL_GetTick>
 8001846:	0002      	movs	r2, r0
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	4a46      	ldr	r2, [pc, #280]	; (8001968 <HAL_RCC_OscConfig+0x694>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e0b4      	b.n	80019c0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001856:	4b3f      	ldr	r3, [pc, #252]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 8001858:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4013      	ands	r3, r2
 8001860:	d1ef      	bne.n	8001842 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001862:	2323      	movs	r3, #35	; 0x23
 8001864:	18fb      	adds	r3, r7, r3
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d105      	bne.n	8001878 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800186c:	4b39      	ldr	r3, [pc, #228]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 800186e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001870:	4b38      	ldr	r3, [pc, #224]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 8001872:	493e      	ldr	r1, [pc, #248]	; (800196c <HAL_RCC_OscConfig+0x698>)
 8001874:	400a      	ands	r2, r1
 8001876:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	2b00      	cmp	r3, #0
 800187e:	d100      	bne.n	8001882 <HAL_RCC_OscConfig+0x5ae>
 8001880:	e09d      	b.n	80019be <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	2b0c      	cmp	r3, #12
 8001886:	d100      	bne.n	800188a <HAL_RCC_OscConfig+0x5b6>
 8001888:	e076      	b.n	8001978 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188e:	2b02      	cmp	r3, #2
 8001890:	d145      	bne.n	800191e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001892:	4b30      	ldr	r3, [pc, #192]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	4b2f      	ldr	r3, [pc, #188]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 8001898:	4935      	ldr	r1, [pc, #212]	; (8001970 <HAL_RCC_OscConfig+0x69c>)
 800189a:	400a      	ands	r2, r1
 800189c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189e:	f7ff f9e3 	bl	8000c68 <HAL_GetTick>
 80018a2:	0003      	movs	r3, r0
 80018a4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a8:	f7ff f9de 	bl	8000c68 <HAL_GetTick>
 80018ac:	0002      	movs	r2, r0
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e082      	b.n	80019c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018ba:	4b26      	ldr	r3, [pc, #152]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	2380      	movs	r3, #128	; 0x80
 80018c0:	049b      	lsls	r3, r3, #18
 80018c2:	4013      	ands	r3, r2
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c6:	4b23      	ldr	r3, [pc, #140]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	4a2a      	ldr	r2, [pc, #168]	; (8001974 <HAL_RCC_OscConfig+0x6a0>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	0019      	movs	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	431a      	orrs	r2, r3
 80018e0:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 80018e2:	430a      	orrs	r2, r1
 80018e4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018e6:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 80018ec:	2180      	movs	r1, #128	; 0x80
 80018ee:	0449      	lsls	r1, r1, #17
 80018f0:	430a      	orrs	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff f9b8 	bl	8000c68 <HAL_GetTick>
 80018f8:	0003      	movs	r3, r0
 80018fa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018fe:	f7ff f9b3 	bl	8000c68 <HAL_GetTick>
 8001902:	0002      	movs	r2, r0
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e057      	b.n	80019c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001910:	4b10      	ldr	r3, [pc, #64]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	049b      	lsls	r3, r3, #18
 8001918:	4013      	ands	r3, r2
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0x62a>
 800191c:	e04f      	b.n	80019be <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191e:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 8001924:	4912      	ldr	r1, [pc, #72]	; (8001970 <HAL_RCC_OscConfig+0x69c>)
 8001926:	400a      	ands	r2, r1
 8001928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192a:	f7ff f99d 	bl	8000c68 <HAL_GetTick>
 800192e:	0003      	movs	r3, r0
 8001930:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001934:	f7ff f998 	bl	8000c68 <HAL_GetTick>
 8001938:	0002      	movs	r2, r0
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e03c      	b.n	80019c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001946:	4b03      	ldr	r3, [pc, #12]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	049b      	lsls	r3, r3, #18
 800194e:	4013      	ands	r3, r2
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x660>
 8001952:	e034      	b.n	80019be <HAL_RCC_OscConfig+0x6ea>
 8001954:	40021000 	.word	0x40021000
 8001958:	ffff1fff 	.word	0xffff1fff
 800195c:	fffffeff 	.word	0xfffffeff
 8001960:	40007000 	.word	0x40007000
 8001964:	fffffbff 	.word	0xfffffbff
 8001968:	00001388 	.word	0x00001388
 800196c:	efffffff 	.word	0xefffffff
 8001970:	feffffff 	.word	0xfeffffff
 8001974:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e01d      	b.n	80019c0 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001984:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <HAL_RCC_OscConfig+0x6f4>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	025b      	lsls	r3, r3, #9
 8001990:	401a      	ands	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001996:	429a      	cmp	r2, r3
 8001998:	d10f      	bne.n	80019ba <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	23f0      	movs	r3, #240	; 0xf0
 800199e:	039b      	lsls	r3, r3, #14
 80019a0:	401a      	ands	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d107      	bne.n	80019ba <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	23c0      	movs	r3, #192	; 0xc0
 80019ae:	041b      	lsls	r3, r3, #16
 80019b0:	401a      	ands	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d001      	beq.n	80019be <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	0018      	movs	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b00a      	add	sp, #40	; 0x28
 80019c6:	bdb0      	pop	{r4, r5, r7, pc}
 80019c8:	40021000 	.word	0x40021000

080019cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019cc:	b5b0      	push	{r4, r5, r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e128      	b.n	8001c32 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019e0:	4b96      	ldr	r3, [pc, #600]	; (8001c3c <HAL_RCC_ClockConfig+0x270>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2201      	movs	r2, #1
 80019e6:	4013      	ands	r3, r2
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d91e      	bls.n	8001a2c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ee:	4b93      	ldr	r3, [pc, #588]	; (8001c3c <HAL_RCC_ClockConfig+0x270>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2201      	movs	r2, #1
 80019f4:	4393      	bics	r3, r2
 80019f6:	0019      	movs	r1, r3
 80019f8:	4b90      	ldr	r3, [pc, #576]	; (8001c3c <HAL_RCC_ClockConfig+0x270>)
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a00:	f7ff f932 	bl	8000c68 <HAL_GetTick>
 8001a04:	0003      	movs	r3, r0
 8001a06:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a08:	e009      	b.n	8001a1e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a0a:	f7ff f92d 	bl	8000c68 <HAL_GetTick>
 8001a0e:	0002      	movs	r2, r0
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	4a8a      	ldr	r2, [pc, #552]	; (8001c40 <HAL_RCC_ClockConfig+0x274>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e109      	b.n	8001c32 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1e:	4b87      	ldr	r3, [pc, #540]	; (8001c3c <HAL_RCC_ClockConfig+0x270>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2201      	movs	r2, #1
 8001a24:	4013      	ands	r3, r2
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d1ee      	bne.n	8001a0a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2202      	movs	r2, #2
 8001a32:	4013      	ands	r3, r2
 8001a34:	d009      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a36:	4b83      	ldr	r3, [pc, #524]	; (8001c44 <HAL_RCC_ClockConfig+0x278>)
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	22f0      	movs	r2, #240	; 0xf0
 8001a3c:	4393      	bics	r3, r2
 8001a3e:	0019      	movs	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	4b7f      	ldr	r3, [pc, #508]	; (8001c44 <HAL_RCC_ClockConfig+0x278>)
 8001a46:	430a      	orrs	r2, r1
 8001a48:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	4013      	ands	r3, r2
 8001a52:	d100      	bne.n	8001a56 <HAL_RCC_ClockConfig+0x8a>
 8001a54:	e089      	b.n	8001b6a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d107      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a5e:	4b79      	ldr	r3, [pc, #484]	; (8001c44 <HAL_RCC_ClockConfig+0x278>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	2380      	movs	r3, #128	; 0x80
 8001a64:	029b      	lsls	r3, r3, #10
 8001a66:	4013      	ands	r3, r2
 8001a68:	d120      	bne.n	8001aac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e0e1      	b.n	8001c32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d107      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a76:	4b73      	ldr	r3, [pc, #460]	; (8001c44 <HAL_RCC_ClockConfig+0x278>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	049b      	lsls	r3, r3, #18
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d114      	bne.n	8001aac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e0d5      	b.n	8001c32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d106      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a8e:	4b6d      	ldr	r3, [pc, #436]	; (8001c44 <HAL_RCC_ClockConfig+0x278>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2204      	movs	r2, #4
 8001a94:	4013      	ands	r3, r2
 8001a96:	d109      	bne.n	8001aac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0ca      	b.n	8001c32 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a9c:	4b69      	ldr	r3, [pc, #420]	; (8001c44 <HAL_RCC_ClockConfig+0x278>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d101      	bne.n	8001aac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0c2      	b.n	8001c32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aac:	4b65      	ldr	r3, [pc, #404]	; (8001c44 <HAL_RCC_ClockConfig+0x278>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	4393      	bics	r3, r2
 8001ab4:	0019      	movs	r1, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	4b62      	ldr	r3, [pc, #392]	; (8001c44 <HAL_RCC_ClockConfig+0x278>)
 8001abc:	430a      	orrs	r2, r1
 8001abe:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ac0:	f7ff f8d2 	bl	8000c68 <HAL_GetTick>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d111      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ad0:	e009      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad2:	f7ff f8c9 	bl	8000c68 <HAL_GetTick>
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	4a58      	ldr	r2, [pc, #352]	; (8001c40 <HAL_RCC_ClockConfig+0x274>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e0a5      	b.n	8001c32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ae6:	4b57      	ldr	r3, [pc, #348]	; (8001c44 <HAL_RCC_ClockConfig+0x278>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	220c      	movs	r2, #12
 8001aec:	4013      	ands	r3, r2
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d1ef      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0x106>
 8001af2:	e03a      	b.n	8001b6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d111      	bne.n	8001b20 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001afc:	e009      	b.n	8001b12 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001afe:	f7ff f8b3 	bl	8000c68 <HAL_GetTick>
 8001b02:	0002      	movs	r2, r0
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	4a4d      	ldr	r2, [pc, #308]	; (8001c40 <HAL_RCC_ClockConfig+0x274>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e08f      	b.n	8001c32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b12:	4b4c      	ldr	r3, [pc, #304]	; (8001c44 <HAL_RCC_ClockConfig+0x278>)
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	220c      	movs	r2, #12
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b0c      	cmp	r3, #12
 8001b1c:	d1ef      	bne.n	8001afe <HAL_RCC_ClockConfig+0x132>
 8001b1e:	e024      	b.n	8001b6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d11b      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b28:	e009      	b.n	8001b3e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b2a:	f7ff f89d 	bl	8000c68 <HAL_GetTick>
 8001b2e:	0002      	movs	r2, r0
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	4a42      	ldr	r2, [pc, #264]	; (8001c40 <HAL_RCC_ClockConfig+0x274>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e079      	b.n	8001c32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b3e:	4b41      	ldr	r3, [pc, #260]	; (8001c44 <HAL_RCC_ClockConfig+0x278>)
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	220c      	movs	r2, #12
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d1ef      	bne.n	8001b2a <HAL_RCC_ClockConfig+0x15e>
 8001b4a:	e00e      	b.n	8001b6a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b4c:	f7ff f88c 	bl	8000c68 <HAL_GetTick>
 8001b50:	0002      	movs	r2, r0
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	4a3a      	ldr	r2, [pc, #232]	; (8001c40 <HAL_RCC_ClockConfig+0x274>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e068      	b.n	8001c32 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b60:	4b38      	ldr	r3, [pc, #224]	; (8001c44 <HAL_RCC_ClockConfig+0x278>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	220c      	movs	r2, #12
 8001b66:	4013      	ands	r3, r2
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b6a:	4b34      	ldr	r3, [pc, #208]	; (8001c3c <HAL_RCC_ClockConfig+0x270>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	4013      	ands	r3, r2
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d21e      	bcs.n	8001bb6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b78:	4b30      	ldr	r3, [pc, #192]	; (8001c3c <HAL_RCC_ClockConfig+0x270>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	4393      	bics	r3, r2
 8001b80:	0019      	movs	r1, r3
 8001b82:	4b2e      	ldr	r3, [pc, #184]	; (8001c3c <HAL_RCC_ClockConfig+0x270>)
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b8a:	f7ff f86d 	bl	8000c68 <HAL_GetTick>
 8001b8e:	0003      	movs	r3, r0
 8001b90:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b92:	e009      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b94:	f7ff f868 	bl	8000c68 <HAL_GetTick>
 8001b98:	0002      	movs	r2, r0
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	4a28      	ldr	r2, [pc, #160]	; (8001c40 <HAL_RCC_ClockConfig+0x274>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e044      	b.n	8001c32 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba8:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <HAL_RCC_ClockConfig+0x270>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2201      	movs	r2, #1
 8001bae:	4013      	ands	r3, r2
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d1ee      	bne.n	8001b94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2204      	movs	r2, #4
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d009      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc0:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <HAL_RCC_ClockConfig+0x278>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	4a20      	ldr	r2, [pc, #128]	; (8001c48 <HAL_RCC_ClockConfig+0x27c>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	0019      	movs	r1, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <HAL_RCC_ClockConfig+0x278>)
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2208      	movs	r2, #8
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d00a      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bde:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <HAL_RCC_ClockConfig+0x278>)
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	4a1a      	ldr	r2, [pc, #104]	; (8001c4c <HAL_RCC_ClockConfig+0x280>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	0019      	movs	r1, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	00da      	lsls	r2, r3, #3
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <HAL_RCC_ClockConfig+0x278>)
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bf4:	f000 f832 	bl	8001c5c <HAL_RCC_GetSysClockFreq>
 8001bf8:	0001      	movs	r1, r0
 8001bfa:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_RCC_ClockConfig+0x278>)
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	091b      	lsrs	r3, r3, #4
 8001c00:	220f      	movs	r2, #15
 8001c02:	4013      	ands	r3, r2
 8001c04:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <HAL_RCC_ClockConfig+0x284>)
 8001c06:	5cd3      	ldrb	r3, [r2, r3]
 8001c08:	000a      	movs	r2, r1
 8001c0a:	40da      	lsrs	r2, r3
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <HAL_RCC_ClockConfig+0x288>)
 8001c0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <HAL_RCC_ClockConfig+0x28c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	250b      	movs	r5, #11
 8001c16:	197c      	adds	r4, r7, r5
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f7fe ffdf 	bl	8000bdc <HAL_InitTick>
 8001c1e:	0003      	movs	r3, r0
 8001c20:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001c22:	197b      	adds	r3, r7, r5
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001c2a:	197b      	adds	r3, r7, r5
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	e000      	b.n	8001c32 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	0018      	movs	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b004      	add	sp, #16
 8001c38:	bdb0      	pop	{r4, r5, r7, pc}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	40022000 	.word	0x40022000
 8001c40:	00001388 	.word	0x00001388
 8001c44:	40021000 	.word	0x40021000
 8001c48:	fffff8ff 	.word	0xfffff8ff
 8001c4c:	ffffc7ff 	.word	0xffffc7ff
 8001c50:	08003504 	.word	0x08003504
 8001c54:	20000000 	.word	0x20000000
 8001c58:	20000004 	.word	0x20000004

08001c5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c5c:	b5b0      	push	{r4, r5, r7, lr}
 8001c5e:	b08e      	sub	sp, #56	; 0x38
 8001c60:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001c62:	4b4c      	ldr	r3, [pc, #304]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c6a:	230c      	movs	r3, #12
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2b0c      	cmp	r3, #12
 8001c70:	d014      	beq.n	8001c9c <HAL_RCC_GetSysClockFreq+0x40>
 8001c72:	d900      	bls.n	8001c76 <HAL_RCC_GetSysClockFreq+0x1a>
 8001c74:	e07b      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0x112>
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	d002      	beq.n	8001c80 <HAL_RCC_GetSysClockFreq+0x24>
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d00b      	beq.n	8001c96 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c7e:	e076      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c80:	4b44      	ldr	r3, [pc, #272]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2210      	movs	r2, #16
 8001c86:	4013      	ands	r3, r2
 8001c88:	d002      	beq.n	8001c90 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001c8a:	4b43      	ldr	r3, [pc, #268]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c8c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001c8e:	e07c      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001c90:	4b42      	ldr	r3, [pc, #264]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x140>)
 8001c92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c94:	e079      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c96:	4b42      	ldr	r3, [pc, #264]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001c98:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c9a:	e076      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c9e:	0c9a      	lsrs	r2, r3, #18
 8001ca0:	230f      	movs	r3, #15
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	4b3f      	ldr	r3, [pc, #252]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x148>)
 8001ca6:	5c9b      	ldrb	r3, [r3, r2]
 8001ca8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cac:	0d9a      	lsrs	r2, r3, #22
 8001cae:	2303      	movs	r3, #3
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cb6:	4b37      	ldr	r3, [pc, #220]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	025b      	lsls	r3, r3, #9
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d01a      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	4a35      	ldr	r2, [pc, #212]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ccc:	2300      	movs	r3, #0
 8001cce:	69b8      	ldr	r0, [r7, #24]
 8001cd0:	69f9      	ldr	r1, [r7, #28]
 8001cd2:	f7fe fac5 	bl	8000260 <__aeabi_lmul>
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	000b      	movs	r3, r1
 8001cda:	0010      	movs	r0, r2
 8001cdc:	0019      	movs	r1, r3
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f7fe fa99 	bl	8000220 <__aeabi_uldivmod>
 8001cee:	0002      	movs	r2, r0
 8001cf0:	000b      	movs	r3, r1
 8001cf2:	0013      	movs	r3, r2
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8001cf6:	e037      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001cf8:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2210      	movs	r2, #16
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d01a      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	4a23      	ldr	r2, [pc, #140]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	68b8      	ldr	r0, [r7, #8]
 8001d10:	68f9      	ldr	r1, [r7, #12]
 8001d12:	f7fe faa5 	bl	8000260 <__aeabi_lmul>
 8001d16:	0002      	movs	r2, r0
 8001d18:	000b      	movs	r3, r1
 8001d1a:	0010      	movs	r0, r2
 8001d1c:	0019      	movs	r1, r3
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	603b      	str	r3, [r7, #0]
 8001d22:	2300      	movs	r3, #0
 8001d24:	607b      	str	r3, [r7, #4]
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f7fe fa79 	bl	8000220 <__aeabi_uldivmod>
 8001d2e:	0002      	movs	r2, r0
 8001d30:	000b      	movs	r3, r1
 8001d32:	0013      	movs	r3, r2
 8001d34:	637b      	str	r3, [r7, #52]	; 0x34
 8001d36:	e017      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	0019      	movs	r1, r3
 8001d40:	4a16      	ldr	r2, [pc, #88]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x140>)
 8001d42:	2300      	movs	r3, #0
 8001d44:	f7fe fa8c 	bl	8000260 <__aeabi_lmul>
 8001d48:	0002      	movs	r2, r0
 8001d4a:	000b      	movs	r3, r1
 8001d4c:	0010      	movs	r0, r2
 8001d4e:	0019      	movs	r1, r3
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	001c      	movs	r4, r3
 8001d54:	2300      	movs	r3, #0
 8001d56:	001d      	movs	r5, r3
 8001d58:	0022      	movs	r2, r4
 8001d5a:	002b      	movs	r3, r5
 8001d5c:	f7fe fa60 	bl	8000220 <__aeabi_uldivmod>
 8001d60:	0002      	movs	r2, r0
 8001d62:	000b      	movs	r3, r1
 8001d64:	0013      	movs	r3, r2
 8001d66:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d6a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d6c:	e00d      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	0b5b      	lsrs	r3, r3, #13
 8001d74:	2207      	movs	r2, #7
 8001d76:	4013      	ands	r3, r2
 8001d78:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	2280      	movs	r2, #128	; 0x80
 8001d80:	0212      	lsls	r2, r2, #8
 8001d82:	409a      	lsls	r2, r3
 8001d84:	0013      	movs	r3, r2
 8001d86:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d88:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	b00e      	add	sp, #56	; 0x38
 8001d92:	bdb0      	pop	{r4, r5, r7, pc}
 8001d94:	40021000 	.word	0x40021000
 8001d98:	003d0900 	.word	0x003d0900
 8001d9c:	00f42400 	.word	0x00f42400
 8001da0:	007a1200 	.word	0x007a1200
 8001da4:	0800351c 	.word	0x0800351c

08001da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dac:	4b02      	ldr	r3, [pc, #8]	; (8001db8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dae:	681b      	ldr	r3, [r3, #0]
}
 8001db0:	0018      	movs	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	20000000 	.word	0x20000000

08001dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dc0:	f7ff fff2 	bl	8001da8 <HAL_RCC_GetHCLKFreq>
 8001dc4:	0001      	movs	r1, r0
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	0a1b      	lsrs	r3, r3, #8
 8001dcc:	2207      	movs	r2, #7
 8001dce:	4013      	ands	r3, r2
 8001dd0:	4a04      	ldr	r2, [pc, #16]	; (8001de4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dd2:	5cd3      	ldrb	r3, [r2, r3]
 8001dd4:	40d9      	lsrs	r1, r3
 8001dd6:	000b      	movs	r3, r1
}
 8001dd8:	0018      	movs	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	40021000 	.word	0x40021000
 8001de4:	08003514 	.word	0x08003514

08001de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dec:	f7ff ffdc 	bl	8001da8 <HAL_RCC_GetHCLKFreq>
 8001df0:	0001      	movs	r1, r0
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	0adb      	lsrs	r3, r3, #11
 8001df8:	2207      	movs	r2, #7
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dfe:	5cd3      	ldrb	r3, [r2, r3]
 8001e00:	40d9      	lsrs	r1, r3
 8001e02:	000b      	movs	r3, r1
}
 8001e04:	0018      	movs	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	08003514 	.word	0x08003514

08001e14 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001e1c:	2017      	movs	r0, #23
 8001e1e:	183b      	adds	r3, r7, r0
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d100      	bne.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001e2e:	e0c7      	b.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e30:	4b84      	ldr	r3, [pc, #528]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	055b      	lsls	r3, r3, #21
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d109      	bne.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3c:	4b81      	ldr	r3, [pc, #516]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e40:	4b80      	ldr	r3, [pc, #512]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e42:	2180      	movs	r1, #128	; 0x80
 8001e44:	0549      	lsls	r1, r1, #21
 8001e46:	430a      	orrs	r2, r1
 8001e48:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001e4a:	183b      	adds	r3, r7, r0
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e50:	4b7d      	ldr	r3, [pc, #500]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d11a      	bne.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e5c:	4b7a      	ldr	r3, [pc, #488]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b79      	ldr	r3, [pc, #484]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001e62:	2180      	movs	r1, #128	; 0x80
 8001e64:	0049      	lsls	r1, r1, #1
 8001e66:	430a      	orrs	r2, r1
 8001e68:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e6a:	f7fe fefd 	bl	8000c68 <HAL_GetTick>
 8001e6e:	0003      	movs	r3, r0
 8001e70:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e72:	e008      	b.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e74:	f7fe fef8 	bl	8000c68 <HAL_GetTick>
 8001e78:	0002      	movs	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b64      	cmp	r3, #100	; 0x64
 8001e80:	d901      	bls.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e0d9      	b.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e86:	4b70      	ldr	r3, [pc, #448]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001e92:	4b6c      	ldr	r3, [pc, #432]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	23c0      	movs	r3, #192	; 0xc0
 8001e98:	039b      	lsls	r3, r3, #14
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	23c0      	movs	r3, #192	; 0xc0
 8001ea4:	039b      	lsls	r3, r3, #14
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d013      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	23c0      	movs	r3, #192	; 0xc0
 8001eb4:	029b      	lsls	r3, r3, #10
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	23c0      	movs	r3, #192	; 0xc0
 8001eba:	029b      	lsls	r3, r3, #10
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d10a      	bne.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001ec0:	4b60      	ldr	r3, [pc, #384]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	029b      	lsls	r3, r3, #10
 8001ec8:	401a      	ands	r2, r3
 8001eca:	2380      	movs	r3, #128	; 0x80
 8001ecc:	029b      	lsls	r3, r3, #10
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e0b1      	b.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001ed6:	4b5b      	ldr	r3, [pc, #364]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ed8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eda:	23c0      	movs	r3, #192	; 0xc0
 8001edc:	029b      	lsls	r3, r3, #10
 8001ede:	4013      	ands	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d03b      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	23c0      	movs	r3, #192	; 0xc0
 8001eee:	029b      	lsls	r3, r3, #10
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d033      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2220      	movs	r2, #32
 8001efe:	4013      	ands	r3, r2
 8001f00:	d02e      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001f02:	4b50      	ldr	r3, [pc, #320]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f06:	4a51      	ldr	r2, [pc, #324]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f0c:	4b4d      	ldr	r3, [pc, #308]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f10:	4b4c      	ldr	r3, [pc, #304]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f12:	2180      	movs	r1, #128	; 0x80
 8001f14:	0309      	lsls	r1, r1, #12
 8001f16:	430a      	orrs	r2, r1
 8001f18:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f1a:	4b4a      	ldr	r3, [pc, #296]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f1e:	4b49      	ldr	r3, [pc, #292]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f20:	494b      	ldr	r1, [pc, #300]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001f22:	400a      	ands	r2, r1
 8001f24:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001f26:	4b47      	ldr	r3, [pc, #284]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4013      	ands	r3, r2
 8001f34:	d014      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f36:	f7fe fe97 	bl	8000c68 <HAL_GetTick>
 8001f3a:	0003      	movs	r3, r0
 8001f3c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f3e:	e009      	b.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f40:	f7fe fe92 	bl	8000c68 <HAL_GetTick>
 8001f44:	0002      	movs	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	4a42      	ldr	r2, [pc, #264]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e072      	b.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f54:	4b3b      	ldr	r3, [pc, #236]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f58:	2380      	movs	r3, #128	; 0x80
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d0ef      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2220      	movs	r2, #32
 8001f66:	4013      	ands	r3, r2
 8001f68:	d01f      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	23c0      	movs	r3, #192	; 0xc0
 8001f70:	029b      	lsls	r3, r3, #10
 8001f72:	401a      	ands	r2, r3
 8001f74:	23c0      	movs	r3, #192	; 0xc0
 8001f76:	029b      	lsls	r3, r3, #10
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d10c      	bne.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8001f7c:	4b31      	ldr	r3, [pc, #196]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a35      	ldr	r2, [pc, #212]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	0019      	movs	r1, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	23c0      	movs	r3, #192	; 0xc0
 8001f8c:	039b      	lsls	r3, r3, #14
 8001f8e:	401a      	ands	r2, r3
 8001f90:	4b2c      	ldr	r3, [pc, #176]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f92:	430a      	orrs	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f98:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	23c0      	movs	r3, #192	; 0xc0
 8001fa0:	029b      	lsls	r3, r3, #10
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	4b27      	ldr	r3, [pc, #156]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001faa:	2317      	movs	r3, #23
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d105      	bne.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb4:	4b23      	ldr	r3, [pc, #140]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fb8:	4b22      	ldr	r3, [pc, #136]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fba:	4928      	ldr	r1, [pc, #160]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fbc:	400a      	ands	r2, r1
 8001fbe:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d009      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fca:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fce:	220c      	movs	r2, #12
 8001fd0:	4393      	bics	r3, r2
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2204      	movs	r2, #4
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d009      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fe8:	4b16      	ldr	r3, [pc, #88]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fec:	4a1c      	ldr	r2, [pc, #112]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	0019      	movs	r1, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	4b13      	ldr	r3, [pc, #76]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2208      	movs	r2, #8
 8002002:	4013      	ands	r3, r2
 8002004:	d009      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002006:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200a:	4a16      	ldr	r2, [pc, #88]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800200c:	4013      	ands	r3, r2
 800200e:	0019      	movs	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691a      	ldr	r2, [r3, #16]
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002016:	430a      	orrs	r2, r1
 8002018:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2280      	movs	r2, #128	; 0x80
 8002020:	4013      	ands	r3, r2
 8002022:	d009      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002024:	4b07      	ldr	r3, [pc, #28]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002028:	4a0f      	ldr	r2, [pc, #60]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800202a:	4013      	ands	r3, r2
 800202c:	0019      	movs	r1, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695a      	ldr	r2, [r3, #20]
 8002032:	4b04      	ldr	r3, [pc, #16]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002034:	430a      	orrs	r2, r1
 8002036:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	0018      	movs	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	b006      	add	sp, #24
 8002040:	bd80      	pop	{r7, pc}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	40021000 	.word	0x40021000
 8002048:	40007000 	.word	0x40007000
 800204c:	fffcffff 	.word	0xfffcffff
 8002050:	fff7ffff 	.word	0xfff7ffff
 8002054:	00001388 	.word	0x00001388
 8002058:	ffcfffff 	.word	0xffcfffff
 800205c:	efffffff 	.word	0xefffffff
 8002060:	fffff3ff 	.word	0xfffff3ff
 8002064:	ffffcfff 	.word	0xffffcfff
 8002068:	fff3ffff 	.word	0xfff3ffff

0800206c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800206c:	b5b0      	push	{r4, r5, r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002074:	230f      	movs	r3, #15
 8002076:	18fb      	adds	r3, r7, r3
 8002078:	2201      	movs	r2, #1
 800207a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e088      	b.n	8002198 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2221      	movs	r2, #33	; 0x21
 800208a:	5c9b      	ldrb	r3, [r3, r2]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d107      	bne.n	80020a2 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2220      	movs	r2, #32
 8002096:	2100      	movs	r1, #0
 8002098:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	0018      	movs	r0, r3
 800209e:	f7fe fcad 	bl	80009fc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2221      	movs	r2, #33	; 0x21
 80020a6:	2102      	movs	r1, #2
 80020a8:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	2210      	movs	r2, #16
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b10      	cmp	r3, #16
 80020b6:	d05f      	beq.n	8002178 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	22ca      	movs	r2, #202	; 0xca
 80020be:	625a      	str	r2, [r3, #36]	; 0x24
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2253      	movs	r2, #83	; 0x53
 80020c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80020c8:	250f      	movs	r5, #15
 80020ca:	197c      	adds	r4, r7, r5
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	0018      	movs	r0, r3
 80020d0:	f000 fc34 	bl	800293c <RTC_EnterInitMode>
 80020d4:	0003      	movs	r3, r0
 80020d6:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80020d8:	0028      	movs	r0, r5
 80020da:	183b      	adds	r3, r7, r0
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d12c      	bne.n	800213c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	492c      	ldr	r1, [pc, #176]	; (80021a0 <HAL_RTC_Init+0x134>)
 80020ee:	400a      	ands	r2, r1
 80020f0:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6899      	ldr	r1, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	431a      	orrs	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	68d2      	ldr	r2, [r2, #12]
 8002118:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6919      	ldr	r1, [r3, #16]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	041a      	lsls	r2, r3, #16
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800212e:	183c      	adds	r4, r7, r0
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	0018      	movs	r0, r3
 8002134:	f000 fc46 	bl	80029c4 <RTC_ExitInitMode>
 8002138:	0003      	movs	r3, r0
 800213a:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 800213c:	230f      	movs	r3, #15
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d113      	bne.n	800216e <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2103      	movs	r1, #3
 8002152:	438a      	bics	r2, r1
 8002154:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69da      	ldr	r2, [r3, #28]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	22ff      	movs	r2, #255	; 0xff
 8002174:	625a      	str	r2, [r3, #36]	; 0x24
 8002176:	e003      	b.n	8002180 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002178:	230f      	movs	r3, #15
 800217a:	18fb      	adds	r3, r7, r3
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002180:	230f      	movs	r3, #15
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d103      	bne.n	8002192 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2221      	movs	r2, #33	; 0x21
 800218e:	2101      	movs	r1, #1
 8002190:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002192:	230f      	movs	r3, #15
 8002194:	18fb      	adds	r3, r7, r3
 8002196:	781b      	ldrb	r3, [r3, #0]
}
 8002198:	0018      	movs	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	b004      	add	sp, #16
 800219e:	bdb0      	pop	{r4, r5, r7, pc}
 80021a0:	ff8fffbf 	.word	0xff8fffbf

080021a4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80021a4:	b5b0      	push	{r4, r5, r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2220      	movs	r2, #32
 80021b8:	5c9b      	ldrb	r3, [r3, r2]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d101      	bne.n	80021c2 <HAL_RTC_SetTime+0x1e>
 80021be:	2302      	movs	r3, #2
 80021c0:	e092      	b.n	80022e8 <HAL_RTC_SetTime+0x144>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2220      	movs	r2, #32
 80021c6:	2101      	movs	r1, #1
 80021c8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2221      	movs	r2, #33	; 0x21
 80021ce:	2102      	movs	r1, #2
 80021d0:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d125      	bne.n	8002224 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2240      	movs	r2, #64	; 0x40
 80021e0:	4013      	ands	r3, r2
 80021e2:	d102      	bne.n	80021ea <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2200      	movs	r2, #0
 80021e8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	0018      	movs	r0, r3
 80021f0:	f000 fc12 	bl	8002a18 <RTC_ByteToBcd2>
 80021f4:	0003      	movs	r3, r0
 80021f6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	785b      	ldrb	r3, [r3, #1]
 80021fc:	0018      	movs	r0, r3
 80021fe:	f000 fc0b 	bl	8002a18 <RTC_ByteToBcd2>
 8002202:	0003      	movs	r3, r0
 8002204:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002206:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	789b      	ldrb	r3, [r3, #2]
 800220c:	0018      	movs	r0, r3
 800220e:	f000 fc03 	bl	8002a18 <RTC_ByteToBcd2>
 8002212:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002214:	0022      	movs	r2, r4
 8002216:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	78db      	ldrb	r3, [r3, #3]
 800221c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800221e:	4313      	orrs	r3, r2
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	e017      	b.n	8002254 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2240      	movs	r2, #64	; 0x40
 800222c:	4013      	ands	r3, r2
 800222e:	d102      	bne.n	8002236 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2200      	movs	r2, #0
 8002234:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	785b      	ldrb	r3, [r3, #1]
 8002240:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002242:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002248:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	78db      	ldrb	r3, [r3, #3]
 800224e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002250:	4313      	orrs	r3, r2
 8002252:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	22ca      	movs	r2, #202	; 0xca
 800225a:	625a      	str	r2, [r3, #36]	; 0x24
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2253      	movs	r2, #83	; 0x53
 8002262:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002264:	2513      	movs	r5, #19
 8002266:	197c      	adds	r4, r7, r5
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	0018      	movs	r0, r3
 800226c:	f000 fb66 	bl	800293c <RTC_EnterInitMode>
 8002270:	0003      	movs	r3, r0
 8002272:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002274:	0028      	movs	r0, r5
 8002276:	183b      	adds	r3, r7, r0
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d120      	bne.n	80022c0 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	491a      	ldr	r1, [pc, #104]	; (80022f0 <HAL_RTC_SetTime+0x14c>)
 8002286:	400a      	ands	r2, r1
 8002288:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4917      	ldr	r1, [pc, #92]	; (80022f4 <HAL_RTC_SetTime+0x150>)
 8002296:	400a      	ands	r2, r1
 8002298:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6899      	ldr	r1, [r3, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	431a      	orrs	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80022b2:	183c      	adds	r4, r7, r0
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	0018      	movs	r0, r3
 80022b8:	f000 fb84 	bl	80029c4 <RTC_ExitInitMode>
 80022bc:	0003      	movs	r3, r0
 80022be:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80022c0:	2313      	movs	r3, #19
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d103      	bne.n	80022d2 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2221      	movs	r2, #33	; 0x21
 80022ce:	2101      	movs	r1, #1
 80022d0:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	22ff      	movs	r2, #255	; 0xff
 80022d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2220      	movs	r2, #32
 80022de:	2100      	movs	r1, #0
 80022e0:	5499      	strb	r1, [r3, r2]

  return status;
 80022e2:	2313      	movs	r3, #19
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	781b      	ldrb	r3, [r3, #0]
}
 80022e8:	0018      	movs	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b006      	add	sp, #24
 80022ee:	bdb0      	pop	{r4, r5, r7, pc}
 80022f0:	007f7f7f 	.word	0x007f7f7f
 80022f4:	fffbffff 	.word	0xfffbffff

080022f8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	045b      	lsls	r3, r3, #17
 800231a:	0c5a      	lsrs	r2, r3, #17
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a22      	ldr	r2, [pc, #136]	; (80023b0 <HAL_RTC_GetTime+0xb8>)
 8002328:	4013      	ands	r3, r2
 800232a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	0c1b      	lsrs	r3, r3, #16
 8002330:	b2db      	uxtb	r3, r3
 8002332:	223f      	movs	r2, #63	; 0x3f
 8002334:	4013      	ands	r3, r2
 8002336:	b2da      	uxtb	r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	b2db      	uxtb	r3, r3
 8002342:	227f      	movs	r2, #127	; 0x7f
 8002344:	4013      	ands	r3, r2
 8002346:	b2da      	uxtb	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	227f      	movs	r2, #127	; 0x7f
 8002352:	4013      	ands	r3, r2
 8002354:	b2da      	uxtb	r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	0d9b      	lsrs	r3, r3, #22
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2201      	movs	r2, #1
 8002362:	4013      	ands	r3, r2
 8002364:	b2da      	uxtb	r2, r3
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d11a      	bne.n	80023a6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	0018      	movs	r0, r3
 8002376:	f000 fb70 	bl	8002a5a <RTC_Bcd2ToByte>
 800237a:	0003      	movs	r3, r0
 800237c:	001a      	movs	r2, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	785b      	ldrb	r3, [r3, #1]
 8002386:	0018      	movs	r0, r3
 8002388:	f000 fb67 	bl	8002a5a <RTC_Bcd2ToByte>
 800238c:	0003      	movs	r3, r0
 800238e:	001a      	movs	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	789b      	ldrb	r3, [r3, #2]
 8002398:	0018      	movs	r0, r3
 800239a:	f000 fb5e 	bl	8002a5a <RTC_Bcd2ToByte>
 800239e:	0003      	movs	r3, r0
 80023a0:	001a      	movs	r2, r3
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	0018      	movs	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b006      	add	sp, #24
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	007f7f7f 	.word	0x007f7f7f

080023b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80023b4:	b5b0      	push	{r4, r5, r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2220      	movs	r2, #32
 80023c8:	5c9b      	ldrb	r3, [r3, r2]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d101      	bne.n	80023d2 <HAL_RTC_SetDate+0x1e>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e07e      	b.n	80024d0 <HAL_RTC_SetDate+0x11c>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2220      	movs	r2, #32
 80023d6:	2101      	movs	r1, #1
 80023d8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2221      	movs	r2, #33	; 0x21
 80023de:	2102      	movs	r1, #2
 80023e0:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10e      	bne.n	8002406 <HAL_RTC_SetDate+0x52>
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	785b      	ldrb	r3, [r3, #1]
 80023ec:	001a      	movs	r2, r3
 80023ee:	2310      	movs	r3, #16
 80023f0:	4013      	ands	r3, r2
 80023f2:	d008      	beq.n	8002406 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	785b      	ldrb	r3, [r3, #1]
 80023f8:	2210      	movs	r2, #16
 80023fa:	4393      	bics	r3, r2
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	330a      	adds	r3, #10
 8002400:	b2da      	uxtb	r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d11c      	bne.n	8002446 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	78db      	ldrb	r3, [r3, #3]
 8002410:	0018      	movs	r0, r3
 8002412:	f000 fb01 	bl	8002a18 <RTC_ByteToBcd2>
 8002416:	0003      	movs	r3, r0
 8002418:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	785b      	ldrb	r3, [r3, #1]
 800241e:	0018      	movs	r0, r3
 8002420:	f000 fafa 	bl	8002a18 <RTC_ByteToBcd2>
 8002424:	0003      	movs	r3, r0
 8002426:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002428:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	789b      	ldrb	r3, [r3, #2]
 800242e:	0018      	movs	r0, r3
 8002430:	f000 faf2 	bl	8002a18 <RTC_ByteToBcd2>
 8002434:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002436:	0022      	movs	r2, r4
 8002438:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002440:	4313      	orrs	r3, r2
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	e00e      	b.n	8002464 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	78db      	ldrb	r3, [r3, #3]
 800244a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	785b      	ldrb	r3, [r3, #1]
 8002450:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002452:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002458:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002460:	4313      	orrs	r3, r2
 8002462:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	22ca      	movs	r2, #202	; 0xca
 800246a:	625a      	str	r2, [r3, #36]	; 0x24
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2253      	movs	r2, #83	; 0x53
 8002472:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002474:	2513      	movs	r5, #19
 8002476:	197c      	adds	r4, r7, r5
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	0018      	movs	r0, r3
 800247c:	f000 fa5e 	bl	800293c <RTC_EnterInitMode>
 8002480:	0003      	movs	r3, r0
 8002482:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002484:	0028      	movs	r0, r5
 8002486:	183b      	adds	r3, r7, r0
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10c      	bne.n	80024a8 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	4910      	ldr	r1, [pc, #64]	; (80024d8 <HAL_RTC_SetDate+0x124>)
 8002496:	400a      	ands	r2, r1
 8002498:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800249a:	183c      	adds	r4, r7, r0
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	0018      	movs	r0, r3
 80024a0:	f000 fa90 	bl	80029c4 <RTC_ExitInitMode>
 80024a4:	0003      	movs	r3, r0
 80024a6:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80024a8:	2313      	movs	r3, #19
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d103      	bne.n	80024ba <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2221      	movs	r2, #33	; 0x21
 80024b6:	2101      	movs	r1, #1
 80024b8:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	22ff      	movs	r2, #255	; 0xff
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2220      	movs	r2, #32
 80024c6:	2100      	movs	r1, #0
 80024c8:	5499      	strb	r1, [r3, r2]

  return status;
 80024ca:	2313      	movs	r3, #19
 80024cc:	18fb      	adds	r3, r7, r3
 80024ce:	781b      	ldrb	r3, [r3, #0]
}
 80024d0:	0018      	movs	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b006      	add	sp, #24
 80024d6:	bdb0      	pop	{r4, r5, r7, pc}
 80024d8:	00ffff3f 	.word	0x00ffff3f

080024dc <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	4a21      	ldr	r2, [pc, #132]	; (8002578 <HAL_RTC_GetDate+0x9c>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	0c1b      	lsrs	r3, r3, #16
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	0a1b      	lsrs	r3, r3, #8
 8002506:	b2db      	uxtb	r3, r3
 8002508:	221f      	movs	r2, #31
 800250a:	4013      	ands	r3, r2
 800250c:	b2da      	uxtb	r2, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	223f      	movs	r2, #63	; 0x3f
 8002518:	4013      	ands	r3, r2
 800251a:	b2da      	uxtb	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	0b5b      	lsrs	r3, r3, #13
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2207      	movs	r2, #7
 8002528:	4013      	ands	r3, r2
 800252a:	b2da      	uxtb	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d11a      	bne.n	800256c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	78db      	ldrb	r3, [r3, #3]
 800253a:	0018      	movs	r0, r3
 800253c:	f000 fa8d 	bl	8002a5a <RTC_Bcd2ToByte>
 8002540:	0003      	movs	r3, r0
 8002542:	001a      	movs	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	785b      	ldrb	r3, [r3, #1]
 800254c:	0018      	movs	r0, r3
 800254e:	f000 fa84 	bl	8002a5a <RTC_Bcd2ToByte>
 8002552:	0003      	movs	r3, r0
 8002554:	001a      	movs	r2, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	789b      	ldrb	r3, [r3, #2]
 800255e:	0018      	movs	r0, r3
 8002560:	f000 fa7b 	bl	8002a5a <RTC_Bcd2ToByte>
 8002564:	0003      	movs	r3, r0
 8002566:	001a      	movs	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	0018      	movs	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	b006      	add	sp, #24
 8002574:	bd80      	pop	{r7, pc}
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	00ffff3f 	.word	0x00ffff3f

0800257c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800257c:	b590      	push	{r4, r7, lr}
 800257e:	b089      	sub	sp, #36	; 0x24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002588:	4ba7      	ldr	r3, [pc, #668]	; (8002828 <HAL_RTC_SetAlarm_IT+0x2ac>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	22fa      	movs	r2, #250	; 0xfa
 800258e:	01d1      	lsls	r1, r2, #7
 8002590:	0018      	movs	r0, r3
 8002592:	f7fd fdb9 	bl	8000108 <__udivsi3>
 8002596:	0003      	movs	r3, r0
 8002598:	001a      	movs	r2, r3
 800259a:	0013      	movs	r3, r2
 800259c:	015b      	lsls	r3, r3, #5
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	189b      	adds	r3, r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2220      	movs	r2, #32
 80025b4:	5c9b      	ldrb	r3, [r3, r2]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_RTC_SetAlarm_IT+0x42>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e130      	b.n	8002820 <HAL_RTC_SetAlarm_IT+0x2a4>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2220      	movs	r2, #32
 80025c2:	2101      	movs	r1, #1
 80025c4:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2221      	movs	r2, #33	; 0x21
 80025ca:	2102      	movs	r1, #2
 80025cc:	5499      	strb	r1, [r3, r2]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d136      	bne.n	8002642 <HAL_RTC_SetAlarm_IT+0xc6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2240      	movs	r2, #64	; 0x40
 80025dc:	4013      	ands	r3, r2
 80025de:	d102      	bne.n	80025e6 <HAL_RTC_SetAlarm_IT+0x6a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2200      	movs	r2, #0
 80025e4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	0018      	movs	r0, r3
 80025ec:	f000 fa14 	bl	8002a18 <RTC_ByteToBcd2>
 80025f0:	0003      	movs	r3, r0
 80025f2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	785b      	ldrb	r3, [r3, #1]
 80025f8:	0018      	movs	r0, r3
 80025fa:	f000 fa0d 	bl	8002a18 <RTC_ByteToBcd2>
 80025fe:	0003      	movs	r3, r0
 8002600:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002602:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	789b      	ldrb	r3, [r3, #2]
 8002608:	0018      	movs	r0, r3
 800260a:	f000 fa05 	bl	8002a18 <RTC_ByteToBcd2>
 800260e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002610:	0022      	movs	r2, r4
 8002612:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	78db      	ldrb	r3, [r3, #3]
 8002618:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800261a:	431a      	orrs	r2, r3
 800261c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2220      	movs	r2, #32
 8002622:	5c9b      	ldrb	r3, [r3, r2]
 8002624:	0018      	movs	r0, r3
 8002626:	f000 f9f7 	bl	8002a18 <RTC_ByteToBcd2>
 800262a:	0003      	movs	r3, r0
 800262c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800262e:	0022      	movs	r2, r4
 8002630:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002636:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800263c:	4313      	orrs	r3, r2
 800263e:	61fb      	str	r3, [r7, #28]
 8002640:	e022      	b.n	8002688 <HAL_RTC_SetAlarm_IT+0x10c>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2240      	movs	r2, #64	; 0x40
 800264a:	4013      	ands	r3, r2
 800264c:	d102      	bne.n	8002654 <HAL_RTC_SetAlarm_IT+0xd8>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2200      	movs	r2, #0
 8002652:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	785b      	ldrb	r3, [r3, #1]
 800265e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002660:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002666:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	78db      	ldrb	r3, [r3, #3]
 800266c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800266e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2120      	movs	r1, #32
 8002674:	5c5b      	ldrb	r3, [r3, r1]
 8002676:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002678:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800267e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002684:	4313      	orrs	r3, r2
 8002686:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	22ca      	movs	r2, #202	; 0xca
 800269a:	625a      	str	r2, [r3, #36]	; 0x24
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2253      	movs	r2, #83	; 0x53
 80026a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026a8:	2380      	movs	r3, #128	; 0x80
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d146      	bne.n	800273e <HAL_RTC_SetAlarm_IT+0x1c2>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	495c      	ldr	r1, [pc, #368]	; (800282c <HAL_RTC_SetAlarm_IT+0x2b0>)
 80026bc:	400a      	ands	r2, r1
 80026be:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	22ff      	movs	r2, #255	; 0xff
 80026c8:	401a      	ands	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4958      	ldr	r1, [pc, #352]	; (8002830 <HAL_RTC_SetAlarm_IT+0x2b4>)
 80026d0:	430a      	orrs	r2, r1
 80026d2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10d      	bne.n	80026fc <HAL_RTC_SetAlarm_IT+0x180>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	22ff      	movs	r2, #255	; 0xff
 80026e6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2221      	movs	r2, #33	; 0x21
 80026ec:	2103      	movs	r1, #3
 80026ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2220      	movs	r2, #32
 80026f4:	2100      	movs	r1, #0
 80026f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e091      	b.n	8002820 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2201      	movs	r2, #1
 8002704:	4013      	ands	r3, r2
 8002706:	d0e5      	beq.n	80026d4 <HAL_RTC_SetAlarm_IT+0x158>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	69fa      	ldr	r2, [r7, #28]
 800270e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2180      	movs	r1, #128	; 0x80
 8002724:	0049      	lsls	r1, r1, #1
 8002726:	430a      	orrs	r2, r1
 8002728:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2180      	movs	r1, #128	; 0x80
 8002736:	0149      	lsls	r1, r1, #5
 8002738:	430a      	orrs	r2, r1
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	e055      	b.n	80027ea <HAL_RTC_SetAlarm_IT+0x26e>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	493a      	ldr	r1, [pc, #232]	; (8002834 <HAL_RTC_SetAlarm_IT+0x2b8>)
 800274a:	400a      	ands	r2, r1
 800274c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	22ff      	movs	r2, #255	; 0xff
 8002756:	401a      	ands	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4936      	ldr	r1, [pc, #216]	; (8002838 <HAL_RTC_SetAlarm_IT+0x2bc>)
 800275e:	430a      	orrs	r2, r1
 8002760:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002762:	4b31      	ldr	r3, [pc, #196]	; (8002828 <HAL_RTC_SetAlarm_IT+0x2ac>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	22fa      	movs	r2, #250	; 0xfa
 8002768:	01d1      	lsls	r1, r2, #7
 800276a:	0018      	movs	r0, r3
 800276c:	f7fd fccc 	bl	8000108 <__udivsi3>
 8002770:	0003      	movs	r3, r0
 8002772:	001a      	movs	r2, r3
 8002774:	0013      	movs	r3, r2
 8002776:	015b      	lsls	r3, r3, #5
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	189b      	adds	r3, r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	3b01      	subs	r3, #1
 8002786:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10d      	bne.n	80027aa <HAL_RTC_SetAlarm_IT+0x22e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	22ff      	movs	r2, #255	; 0xff
 8002794:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2221      	movs	r2, #33	; 0x21
 800279a:	2103      	movs	r1, #3
 800279c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2220      	movs	r2, #32
 80027a2:	2100      	movs	r1, #0
 80027a4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e03a      	b.n	8002820 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	2202      	movs	r2, #2
 80027b2:	4013      	ands	r3, r2
 80027b4:	d0e5      	beq.n	8002782 <HAL_RTC_SetAlarm_IT+0x206>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2180      	movs	r1, #128	; 0x80
 80027d2:	0089      	lsls	r1, r1, #2
 80027d4:	430a      	orrs	r2, r1
 80027d6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2180      	movs	r1, #128	; 0x80
 80027e4:	0189      	lsls	r1, r1, #6
 80027e6:	430a      	orrs	r2, r1
 80027e8:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80027ea:	4b14      	ldr	r3, [pc, #80]	; (800283c <HAL_RTC_SetAlarm_IT+0x2c0>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	4b13      	ldr	r3, [pc, #76]	; (800283c <HAL_RTC_SetAlarm_IT+0x2c0>)
 80027f0:	2180      	movs	r1, #128	; 0x80
 80027f2:	0289      	lsls	r1, r1, #10
 80027f4:	430a      	orrs	r2, r1
 80027f6:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80027f8:	4b10      	ldr	r3, [pc, #64]	; (800283c <HAL_RTC_SetAlarm_IT+0x2c0>)
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	4b0f      	ldr	r3, [pc, #60]	; (800283c <HAL_RTC_SetAlarm_IT+0x2c0>)
 80027fe:	2180      	movs	r1, #128	; 0x80
 8002800:	0289      	lsls	r1, r1, #10
 8002802:	430a      	orrs	r2, r1
 8002804:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	22ff      	movs	r2, #255	; 0xff
 800280c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2221      	movs	r2, #33	; 0x21
 8002812:	2101      	movs	r1, #1
 8002814:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2220      	movs	r2, #32
 800281a:	2100      	movs	r1, #0
 800281c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	0018      	movs	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	b009      	add	sp, #36	; 0x24
 8002826:	bd90      	pop	{r4, r7, pc}
 8002828:	20000000 	.word	0x20000000
 800282c:	fffffeff 	.word	0xfffffeff
 8002830:	fffffe7f 	.word	0xfffffe7f
 8002834:	fffffdff 	.word	0xfffffdff
 8002838:	fffffd7f 	.word	0xfffffd7f
 800283c:	40010400 	.word	0x40010400

08002840 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002848:	4b21      	ldr	r3, [pc, #132]	; (80028d0 <HAL_RTC_AlarmIRQHandler+0x90>)
 800284a:	2280      	movs	r2, #128	; 0x80
 800284c:	0292      	lsls	r2, r2, #10
 800284e:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	2380      	movs	r3, #128	; 0x80
 8002858:	015b      	lsls	r3, r3, #5
 800285a:	4013      	ands	r3, r2
 800285c:	d014      	beq.n	8002888 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	2380      	movs	r3, #128	; 0x80
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	4013      	ands	r3, r2
 800286a:	d00d      	beq.n	8002888 <HAL_RTC_AlarmIRQHandler+0x48>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	22ff      	movs	r2, #255	; 0xff
 8002874:	401a      	ands	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4916      	ldr	r1, [pc, #88]	; (80028d4 <HAL_RTC_AlarmIRQHandler+0x94>)
 800287c:	430a      	orrs	r2, r1
 800287e:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	0018      	movs	r0, r3
 8002884:	f000 f82a 	bl	80028dc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	2380      	movs	r3, #128	; 0x80
 8002890:	019b      	lsls	r3, r3, #6
 8002892:	4013      	ands	r3, r2
 8002894:	d014      	beq.n	80028c0 <HAL_RTC_AlarmIRQHandler+0x80>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	2380      	movs	r3, #128	; 0x80
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4013      	ands	r3, r2
 80028a2:	d00d      	beq.n	80028c0 <HAL_RTC_AlarmIRQHandler+0x80>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	22ff      	movs	r2, #255	; 0xff
 80028ac:	401a      	ands	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4909      	ldr	r1, [pc, #36]	; (80028d8 <HAL_RTC_AlarmIRQHandler+0x98>)
 80028b4:	430a      	orrs	r2, r1
 80028b6:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	0018      	movs	r0, r3
 80028bc:	f000 f91a 	bl	8002af4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2221      	movs	r2, #33	; 0x21
 80028c4:	2101      	movs	r1, #1
 80028c6:	5499      	strb	r1, [r3, r2]
}
 80028c8:	46c0      	nop			; (mov r8, r8)
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b002      	add	sp, #8
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40010400 	.word	0x40010400
 80028d4:	fffffe7f 	.word	0xfffffe7f
 80028d8:	fffffd7f 	.word	0xfffffd7f

080028dc <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80028e4:	46c0      	nop			; (mov r8, r8)
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b002      	add	sp, #8
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a0e      	ldr	r2, [pc, #56]	; (8002938 <HAL_RTC_WaitForSynchro+0x4c>)
 80028fe:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002900:	f7fe f9b2 	bl	8000c68 <HAL_GetTick>
 8002904:	0003      	movs	r3, r0
 8002906:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002908:	e00a      	b.n	8002920 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800290a:	f7fe f9ad 	bl	8000c68 <HAL_GetTick>
 800290e:	0002      	movs	r2, r0
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1ad2      	subs	r2, r2, r3
 8002914:	23fa      	movs	r3, #250	; 0xfa
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	429a      	cmp	r2, r3
 800291a:	d901      	bls.n	8002920 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e006      	b.n	800292e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	2220      	movs	r2, #32
 8002928:	4013      	ands	r3, r2
 800292a:	d0ee      	beq.n	800290a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	0018      	movs	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	b004      	add	sp, #16
 8002934:	bd80      	pop	{r7, pc}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	0001ff5f 	.word	0x0001ff5f

0800293c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002948:	230f      	movs	r3, #15
 800294a:	18fb      	adds	r3, r7, r3
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	2240      	movs	r2, #64	; 0x40
 8002958:	4013      	ands	r3, r2
 800295a:	d12c      	bne.n	80029b6 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2180      	movs	r1, #128	; 0x80
 8002968:	430a      	orrs	r2, r1
 800296a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800296c:	f7fe f97c 	bl	8000c68 <HAL_GetTick>
 8002970:	0003      	movs	r3, r0
 8002972:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002974:	e014      	b.n	80029a0 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002976:	f7fe f977 	bl	8000c68 <HAL_GetTick>
 800297a:	0002      	movs	r2, r0
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	1ad2      	subs	r2, r2, r3
 8002980:	200f      	movs	r0, #15
 8002982:	183b      	adds	r3, r7, r0
 8002984:	1839      	adds	r1, r7, r0
 8002986:	7809      	ldrb	r1, [r1, #0]
 8002988:	7019      	strb	r1, [r3, #0]
 800298a:	23fa      	movs	r3, #250	; 0xfa
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	429a      	cmp	r2, r3
 8002990:	d906      	bls.n	80029a0 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2221      	movs	r2, #33	; 0x21
 8002996:	2104      	movs	r1, #4
 8002998:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 800299a:	183b      	adds	r3, r7, r0
 800299c:	2201      	movs	r2, #1
 800299e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	2240      	movs	r2, #64	; 0x40
 80029a8:	4013      	ands	r3, r2
 80029aa:	d104      	bne.n	80029b6 <RTC_EnterInitMode+0x7a>
 80029ac:	230f      	movs	r3, #15
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d1df      	bne.n	8002976 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80029b6:	230f      	movs	r3, #15
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	781b      	ldrb	r3, [r3, #0]
}
 80029bc:	0018      	movs	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	b004      	add	sp, #16
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80029c4:	b590      	push	{r4, r7, lr}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029cc:	240f      	movs	r4, #15
 80029ce:	193b      	adds	r3, r7, r4
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2180      	movs	r1, #128	; 0x80
 80029e0:	438a      	bics	r2, r1
 80029e2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2220      	movs	r2, #32
 80029ec:	4013      	ands	r3, r2
 80029ee:	d10c      	bne.n	8002a0a <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	0018      	movs	r0, r3
 80029f4:	f7ff ff7a 	bl	80028ec <HAL_RTC_WaitForSynchro>
 80029f8:	1e03      	subs	r3, r0, #0
 80029fa:	d006      	beq.n	8002a0a <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2221      	movs	r2, #33	; 0x21
 8002a00:	2104      	movs	r1, #4
 8002a02:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8002a04:	193b      	adds	r3, r7, r4
 8002a06:	2201      	movs	r2, #1
 8002a08:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002a0a:	230f      	movs	r3, #15
 8002a0c:	18fb      	adds	r3, r7, r3
 8002a0e:	781b      	ldrb	r3, [r3, #0]
}
 8002a10:	0018      	movs	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b005      	add	sp, #20
 8002a16:	bd90      	pop	{r4, r7, pc}

08002a18 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	0002      	movs	r2, r0
 8002a20:	1dfb      	adds	r3, r7, #7
 8002a22:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002a28:	e007      	b.n	8002a3a <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002a30:	1dfb      	adds	r3, r7, #7
 8002a32:	1dfa      	adds	r2, r7, #7
 8002a34:	7812      	ldrb	r2, [r2, #0]
 8002a36:	3a0a      	subs	r2, #10
 8002a38:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8002a3a:	1dfb      	adds	r3, r7, #7
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b09      	cmp	r3, #9
 8002a40:	d8f3      	bhi.n	8002a2a <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	1dfb      	adds	r3, r7, #7
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	b2db      	uxtb	r3, r3
}
 8002a52:	0018      	movs	r0, r3
 8002a54:	46bd      	mov	sp, r7
 8002a56:	b004      	add	sp, #16
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b084      	sub	sp, #16
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	0002      	movs	r2, r0
 8002a62:	1dfb      	adds	r3, r7, #7
 8002a64:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002a6a:	1dfb      	adds	r3, r7, #7
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	091b      	lsrs	r3, r3, #4
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	001a      	movs	r2, r3
 8002a74:	0013      	movs	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	189b      	adds	r3, r3, r2
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	1dfb      	adds	r3, r7, #7
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	210f      	movs	r1, #15
 8002a88:	400b      	ands	r3, r1
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	18d3      	adds	r3, r2, r3
 8002a8e:	b2db      	uxtb	r3, r3
}
 8002a90:	0018      	movs	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	b004      	add	sp, #16
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	3350      	adds	r3, #80	; 0x50
 8002aae:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	18d3      	adds	r3, r2, r3
 8002ab8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	601a      	str	r2, [r3, #0]
}
 8002ac0:	46c0      	nop			; (mov r8, r8)
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b006      	add	sp, #24
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	3350      	adds	r3, #80	; 0x50
 8002adc:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	18d3      	adds	r3, r2, r3
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	0018      	movs	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b004      	add	sp, #16
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002afc:	46c0      	nop			; (mov r8, r8)
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b002      	add	sp, #8
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e044      	b.n	8002ba0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d107      	bne.n	8002b2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2278      	movs	r2, #120	; 0x78
 8002b22:	2100      	movs	r1, #0
 8002b24:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f7fd ff87 	bl	8000a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2224      	movs	r2, #36	; 0x24
 8002b32:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2101      	movs	r1, #1
 8002b40:	438a      	bics	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	0018      	movs	r0, r3
 8002b48:	f000 f830 	bl	8002bac <UART_SetConfig>
 8002b4c:	0003      	movs	r3, r0
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e024      	b.n	8002ba0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	0018      	movs	r0, r3
 8002b62:	f000 fa6d 	bl	8003040 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	490d      	ldr	r1, [pc, #52]	; (8002ba8 <HAL_UART_Init+0xa4>)
 8002b72:	400a      	ands	r2, r1
 8002b74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	212a      	movs	r1, #42	; 0x2a
 8002b82:	438a      	bics	r2, r1
 8002b84:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2101      	movs	r1, #1
 8002b92:	430a      	orrs	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f000 fb05 	bl	80031a8 <UART_CheckIdleState>
 8002b9e:	0003      	movs	r3, r0
}
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b002      	add	sp, #8
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	ffffb7ff 	.word	0xffffb7ff

08002bac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bac:	b5b0      	push	{r4, r5, r7, lr}
 8002bae:	b08e      	sub	sp, #56	; 0x38
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bb4:	231a      	movs	r3, #26
 8002bb6:	2218      	movs	r2, #24
 8002bb8:	189b      	adds	r3, r3, r2
 8002bba:	19db      	adds	r3, r3, r7
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4ab4      	ldr	r2, [pc, #720]	; (8002eb0 <UART_SetConfig+0x304>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	0019      	movs	r1, r3
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bea:	430a      	orrs	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	4aaf      	ldr	r2, [pc, #700]	; (8002eb4 <UART_SetConfig+0x308>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	0019      	movs	r1, r3
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4aa9      	ldr	r2, [pc, #676]	; (8002eb8 <UART_SetConfig+0x30c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d004      	beq.n	8002c20 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	4aa5      	ldr	r2, [pc, #660]	; (8002ebc <UART_SetConfig+0x310>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	0019      	movs	r1, r3
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c32:	430a      	orrs	r2, r1
 8002c34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4aa1      	ldr	r2, [pc, #644]	; (8002ec0 <UART_SetConfig+0x314>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d131      	bne.n	8002ca4 <UART_SetConfig+0xf8>
 8002c40:	4ba0      	ldr	r3, [pc, #640]	; (8002ec4 <UART_SetConfig+0x318>)
 8002c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c44:	220c      	movs	r2, #12
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b0c      	cmp	r3, #12
 8002c4a:	d01d      	beq.n	8002c88 <UART_SetConfig+0xdc>
 8002c4c:	d823      	bhi.n	8002c96 <UART_SetConfig+0xea>
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d00c      	beq.n	8002c6c <UART_SetConfig+0xc0>
 8002c52:	d820      	bhi.n	8002c96 <UART_SetConfig+0xea>
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d002      	beq.n	8002c5e <UART_SetConfig+0xb2>
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d00e      	beq.n	8002c7a <UART_SetConfig+0xce>
 8002c5c:	e01b      	b.n	8002c96 <UART_SetConfig+0xea>
 8002c5e:	231b      	movs	r3, #27
 8002c60:	2218      	movs	r2, #24
 8002c62:	189b      	adds	r3, r3, r2
 8002c64:	19db      	adds	r3, r3, r7
 8002c66:	2200      	movs	r2, #0
 8002c68:	701a      	strb	r2, [r3, #0]
 8002c6a:	e065      	b.n	8002d38 <UART_SetConfig+0x18c>
 8002c6c:	231b      	movs	r3, #27
 8002c6e:	2218      	movs	r2, #24
 8002c70:	189b      	adds	r3, r3, r2
 8002c72:	19db      	adds	r3, r3, r7
 8002c74:	2202      	movs	r2, #2
 8002c76:	701a      	strb	r2, [r3, #0]
 8002c78:	e05e      	b.n	8002d38 <UART_SetConfig+0x18c>
 8002c7a:	231b      	movs	r3, #27
 8002c7c:	2218      	movs	r2, #24
 8002c7e:	189b      	adds	r3, r3, r2
 8002c80:	19db      	adds	r3, r3, r7
 8002c82:	2204      	movs	r2, #4
 8002c84:	701a      	strb	r2, [r3, #0]
 8002c86:	e057      	b.n	8002d38 <UART_SetConfig+0x18c>
 8002c88:	231b      	movs	r3, #27
 8002c8a:	2218      	movs	r2, #24
 8002c8c:	189b      	adds	r3, r3, r2
 8002c8e:	19db      	adds	r3, r3, r7
 8002c90:	2208      	movs	r2, #8
 8002c92:	701a      	strb	r2, [r3, #0]
 8002c94:	e050      	b.n	8002d38 <UART_SetConfig+0x18c>
 8002c96:	231b      	movs	r3, #27
 8002c98:	2218      	movs	r2, #24
 8002c9a:	189b      	adds	r3, r3, r2
 8002c9c:	19db      	adds	r3, r3, r7
 8002c9e:	2210      	movs	r2, #16
 8002ca0:	701a      	strb	r2, [r3, #0]
 8002ca2:	e049      	b.n	8002d38 <UART_SetConfig+0x18c>
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a83      	ldr	r2, [pc, #524]	; (8002eb8 <UART_SetConfig+0x30c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d13e      	bne.n	8002d2c <UART_SetConfig+0x180>
 8002cae:	4b85      	ldr	r3, [pc, #532]	; (8002ec4 <UART_SetConfig+0x318>)
 8002cb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cb2:	23c0      	movs	r3, #192	; 0xc0
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	22c0      	movs	r2, #192	; 0xc0
 8002cba:	0112      	lsls	r2, r2, #4
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d027      	beq.n	8002d10 <UART_SetConfig+0x164>
 8002cc0:	22c0      	movs	r2, #192	; 0xc0
 8002cc2:	0112      	lsls	r2, r2, #4
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d82a      	bhi.n	8002d1e <UART_SetConfig+0x172>
 8002cc8:	2280      	movs	r2, #128	; 0x80
 8002cca:	0112      	lsls	r2, r2, #4
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d011      	beq.n	8002cf4 <UART_SetConfig+0x148>
 8002cd0:	2280      	movs	r2, #128	; 0x80
 8002cd2:	0112      	lsls	r2, r2, #4
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d822      	bhi.n	8002d1e <UART_SetConfig+0x172>
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d004      	beq.n	8002ce6 <UART_SetConfig+0x13a>
 8002cdc:	2280      	movs	r2, #128	; 0x80
 8002cde:	00d2      	lsls	r2, r2, #3
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d00e      	beq.n	8002d02 <UART_SetConfig+0x156>
 8002ce4:	e01b      	b.n	8002d1e <UART_SetConfig+0x172>
 8002ce6:	231b      	movs	r3, #27
 8002ce8:	2218      	movs	r2, #24
 8002cea:	189b      	adds	r3, r3, r2
 8002cec:	19db      	adds	r3, r3, r7
 8002cee:	2200      	movs	r2, #0
 8002cf0:	701a      	strb	r2, [r3, #0]
 8002cf2:	e021      	b.n	8002d38 <UART_SetConfig+0x18c>
 8002cf4:	231b      	movs	r3, #27
 8002cf6:	2218      	movs	r2, #24
 8002cf8:	189b      	adds	r3, r3, r2
 8002cfa:	19db      	adds	r3, r3, r7
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	701a      	strb	r2, [r3, #0]
 8002d00:	e01a      	b.n	8002d38 <UART_SetConfig+0x18c>
 8002d02:	231b      	movs	r3, #27
 8002d04:	2218      	movs	r2, #24
 8002d06:	189b      	adds	r3, r3, r2
 8002d08:	19db      	adds	r3, r3, r7
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	701a      	strb	r2, [r3, #0]
 8002d0e:	e013      	b.n	8002d38 <UART_SetConfig+0x18c>
 8002d10:	231b      	movs	r3, #27
 8002d12:	2218      	movs	r2, #24
 8002d14:	189b      	adds	r3, r3, r2
 8002d16:	19db      	adds	r3, r3, r7
 8002d18:	2208      	movs	r2, #8
 8002d1a:	701a      	strb	r2, [r3, #0]
 8002d1c:	e00c      	b.n	8002d38 <UART_SetConfig+0x18c>
 8002d1e:	231b      	movs	r3, #27
 8002d20:	2218      	movs	r2, #24
 8002d22:	189b      	adds	r3, r3, r2
 8002d24:	19db      	adds	r3, r3, r7
 8002d26:	2210      	movs	r2, #16
 8002d28:	701a      	strb	r2, [r3, #0]
 8002d2a:	e005      	b.n	8002d38 <UART_SetConfig+0x18c>
 8002d2c:	231b      	movs	r3, #27
 8002d2e:	2218      	movs	r2, #24
 8002d30:	189b      	adds	r3, r3, r2
 8002d32:	19db      	adds	r3, r3, r7
 8002d34:	2210      	movs	r2, #16
 8002d36:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a5e      	ldr	r2, [pc, #376]	; (8002eb8 <UART_SetConfig+0x30c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d000      	beq.n	8002d44 <UART_SetConfig+0x198>
 8002d42:	e084      	b.n	8002e4e <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d44:	231b      	movs	r3, #27
 8002d46:	2218      	movs	r2, #24
 8002d48:	189b      	adds	r3, r3, r2
 8002d4a:	19db      	adds	r3, r3, r7
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d01d      	beq.n	8002d8e <UART_SetConfig+0x1e2>
 8002d52:	dc20      	bgt.n	8002d96 <UART_SetConfig+0x1ea>
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d015      	beq.n	8002d84 <UART_SetConfig+0x1d8>
 8002d58:	dc1d      	bgt.n	8002d96 <UART_SetConfig+0x1ea>
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <UART_SetConfig+0x1b8>
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d005      	beq.n	8002d6e <UART_SetConfig+0x1c2>
 8002d62:	e018      	b.n	8002d96 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d64:	f7ff f82a 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 8002d68:	0003      	movs	r3, r0
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d6c:	e01c      	b.n	8002da8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d6e:	4b55      	ldr	r3, [pc, #340]	; (8002ec4 <UART_SetConfig+0x318>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2210      	movs	r2, #16
 8002d74:	4013      	ands	r3, r2
 8002d76:	d002      	beq.n	8002d7e <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d78:	4b53      	ldr	r3, [pc, #332]	; (8002ec8 <UART_SetConfig+0x31c>)
 8002d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d7c:	e014      	b.n	8002da8 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8002d7e:	4b53      	ldr	r3, [pc, #332]	; (8002ecc <UART_SetConfig+0x320>)
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d82:	e011      	b.n	8002da8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d84:	f7fe ff6a 	bl	8001c5c <HAL_RCC_GetSysClockFreq>
 8002d88:	0003      	movs	r3, r0
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d8c:	e00c      	b.n	8002da8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	021b      	lsls	r3, r3, #8
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d94:	e008      	b.n	8002da8 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002d9a:	231a      	movs	r3, #26
 8002d9c:	2218      	movs	r2, #24
 8002d9e:	189b      	adds	r3, r3, r2
 8002da0:	19db      	adds	r3, r3, r7
 8002da2:	2201      	movs	r2, #1
 8002da4:	701a      	strb	r2, [r3, #0]
        break;
 8002da6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d100      	bne.n	8002db0 <UART_SetConfig+0x204>
 8002dae:	e12f      	b.n	8003010 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	0013      	movs	r3, r2
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	189b      	adds	r3, r3, r2
 8002dba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d305      	bcc.n	8002dcc <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d906      	bls.n	8002dda <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8002dcc:	231a      	movs	r3, #26
 8002dce:	2218      	movs	r2, #24
 8002dd0:	189b      	adds	r3, r3, r2
 8002dd2:	19db      	adds	r3, r3, r7
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	701a      	strb	r2, [r3, #0]
 8002dd8:	e11a      	b.n	8003010 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	6939      	ldr	r1, [r7, #16]
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	000b      	movs	r3, r1
 8002de8:	0e1b      	lsrs	r3, r3, #24
 8002dea:	0010      	movs	r0, r2
 8002dec:	0205      	lsls	r5, r0, #8
 8002dee:	431d      	orrs	r5, r3
 8002df0:	000b      	movs	r3, r1
 8002df2:	021c      	lsls	r4, r3, #8
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	085b      	lsrs	r3, r3, #1
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68b8      	ldr	r0, [r7, #8]
 8002e02:	68f9      	ldr	r1, [r7, #12]
 8002e04:	1900      	adds	r0, r0, r4
 8002e06:	4169      	adcs	r1, r5
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	603b      	str	r3, [r7, #0]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	607b      	str	r3, [r7, #4]
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f7fd fa03 	bl	8000220 <__aeabi_uldivmod>
 8002e1a:	0002      	movs	r2, r0
 8002e1c:	000b      	movs	r3, r1
 8002e1e:	0013      	movs	r3, r2
 8002e20:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e24:	23c0      	movs	r3, #192	; 0xc0
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d309      	bcc.n	8002e40 <UART_SetConfig+0x294>
 8002e2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e2e:	2380      	movs	r3, #128	; 0x80
 8002e30:	035b      	lsls	r3, r3, #13
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d204      	bcs.n	8002e40 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e3c:	60da      	str	r2, [r3, #12]
 8002e3e:	e0e7      	b.n	8003010 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8002e40:	231a      	movs	r3, #26
 8002e42:	2218      	movs	r2, #24
 8002e44:	189b      	adds	r3, r3, r2
 8002e46:	19db      	adds	r3, r3, r7
 8002e48:	2201      	movs	r2, #1
 8002e4a:	701a      	strb	r2, [r3, #0]
 8002e4c:	e0e0      	b.n	8003010 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	69da      	ldr	r2, [r3, #28]
 8002e52:	2380      	movs	r3, #128	; 0x80
 8002e54:	021b      	lsls	r3, r3, #8
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d000      	beq.n	8002e5c <UART_SetConfig+0x2b0>
 8002e5a:	e082      	b.n	8002f62 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8002e5c:	231b      	movs	r3, #27
 8002e5e:	2218      	movs	r2, #24
 8002e60:	189b      	adds	r3, r3, r2
 8002e62:	19db      	adds	r3, r3, r7
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d834      	bhi.n	8002ed4 <UART_SetConfig+0x328>
 8002e6a:	009a      	lsls	r2, r3, #2
 8002e6c:	4b18      	ldr	r3, [pc, #96]	; (8002ed0 <UART_SetConfig+0x324>)
 8002e6e:	18d3      	adds	r3, r2, r3
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e74:	f7fe ffa2 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e7c:	e033      	b.n	8002ee6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e7e:	f7fe ffb3 	bl	8001de8 <HAL_RCC_GetPCLK2Freq>
 8002e82:	0003      	movs	r3, r0
 8002e84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e86:	e02e      	b.n	8002ee6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e88:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <UART_SetConfig+0x318>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2210      	movs	r2, #16
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d002      	beq.n	8002e98 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e92:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <UART_SetConfig+0x31c>)
 8002e94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002e96:	e026      	b.n	8002ee6 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8002e98:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <UART_SetConfig+0x320>)
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e9c:	e023      	b.n	8002ee6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e9e:	f7fe fedd 	bl	8001c5c <HAL_RCC_GetSysClockFreq>
 8002ea2:	0003      	movs	r3, r0
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ea6:	e01e      	b.n	8002ee6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ea8:	2380      	movs	r3, #128	; 0x80
 8002eaa:	021b      	lsls	r3, r3, #8
 8002eac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002eae:	e01a      	b.n	8002ee6 <UART_SetConfig+0x33a>
 8002eb0:	efff69f3 	.word	0xefff69f3
 8002eb4:	ffffcfff 	.word	0xffffcfff
 8002eb8:	40004800 	.word	0x40004800
 8002ebc:	fffff4ff 	.word	0xfffff4ff
 8002ec0:	40004400 	.word	0x40004400
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	003d0900 	.word	0x003d0900
 8002ecc:	00f42400 	.word	0x00f42400
 8002ed0:	08003528 	.word	0x08003528
      default:
        pclk = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002ed8:	231a      	movs	r3, #26
 8002eda:	2218      	movs	r2, #24
 8002edc:	189b      	adds	r3, r3, r2
 8002ede:	19db      	adds	r3, r3, r7
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	701a      	strb	r2, [r3, #0]
        break;
 8002ee4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d100      	bne.n	8002eee <UART_SetConfig+0x342>
 8002eec:	e090      	b.n	8003010 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef0:	005a      	lsls	r2, r3, #1
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	085b      	lsrs	r3, r3, #1
 8002ef8:	18d2      	adds	r2, r2, r3
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	0019      	movs	r1, r3
 8002f00:	0010      	movs	r0, r2
 8002f02:	f7fd f901 	bl	8000108 <__udivsi3>
 8002f06:	0003      	movs	r3, r0
 8002f08:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0c:	2b0f      	cmp	r3, #15
 8002f0e:	d921      	bls.n	8002f54 <UART_SetConfig+0x3a8>
 8002f10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f12:	2380      	movs	r3, #128	; 0x80
 8002f14:	025b      	lsls	r3, r3, #9
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d21c      	bcs.n	8002f54 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	200e      	movs	r0, #14
 8002f20:	2418      	movs	r4, #24
 8002f22:	1903      	adds	r3, r0, r4
 8002f24:	19db      	adds	r3, r3, r7
 8002f26:	210f      	movs	r1, #15
 8002f28:	438a      	bics	r2, r1
 8002f2a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2e:	085b      	lsrs	r3, r3, #1
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2207      	movs	r2, #7
 8002f34:	4013      	ands	r3, r2
 8002f36:	b299      	uxth	r1, r3
 8002f38:	1903      	adds	r3, r0, r4
 8002f3a:	19db      	adds	r3, r3, r7
 8002f3c:	1902      	adds	r2, r0, r4
 8002f3e:	19d2      	adds	r2, r2, r7
 8002f40:	8812      	ldrh	r2, [r2, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	1902      	adds	r2, r0, r4
 8002f4c:	19d2      	adds	r2, r2, r7
 8002f4e:	8812      	ldrh	r2, [r2, #0]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	e05d      	b.n	8003010 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002f54:	231a      	movs	r3, #26
 8002f56:	2218      	movs	r2, #24
 8002f58:	189b      	adds	r3, r3, r2
 8002f5a:	19db      	adds	r3, r3, r7
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	701a      	strb	r2, [r3, #0]
 8002f60:	e056      	b.n	8003010 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f62:	231b      	movs	r3, #27
 8002f64:	2218      	movs	r2, #24
 8002f66:	189b      	adds	r3, r3, r2
 8002f68:	19db      	adds	r3, r3, r7
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d822      	bhi.n	8002fb6 <UART_SetConfig+0x40a>
 8002f70:	009a      	lsls	r2, r3, #2
 8002f72:	4b2f      	ldr	r3, [pc, #188]	; (8003030 <UART_SetConfig+0x484>)
 8002f74:	18d3      	adds	r3, r2, r3
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f7a:	f7fe ff1f 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 8002f7e:	0003      	movs	r3, r0
 8002f80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f82:	e021      	b.n	8002fc8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f84:	f7fe ff30 	bl	8001de8 <HAL_RCC_GetPCLK2Freq>
 8002f88:	0003      	movs	r3, r0
 8002f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f8c:	e01c      	b.n	8002fc8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f8e:	4b29      	ldr	r3, [pc, #164]	; (8003034 <UART_SetConfig+0x488>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2210      	movs	r2, #16
 8002f94:	4013      	ands	r3, r2
 8002f96:	d002      	beq.n	8002f9e <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002f98:	4b27      	ldr	r3, [pc, #156]	; (8003038 <UART_SetConfig+0x48c>)
 8002f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002f9c:	e014      	b.n	8002fc8 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8002f9e:	4b27      	ldr	r3, [pc, #156]	; (800303c <UART_SetConfig+0x490>)
 8002fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fa2:	e011      	b.n	8002fc8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fa4:	f7fe fe5a 	bl	8001c5c <HAL_RCC_GetSysClockFreq>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fac:	e00c      	b.n	8002fc8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fae:	2380      	movs	r3, #128	; 0x80
 8002fb0:	021b      	lsls	r3, r3, #8
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fb4:	e008      	b.n	8002fc8 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002fba:	231a      	movs	r3, #26
 8002fbc:	2218      	movs	r2, #24
 8002fbe:	189b      	adds	r3, r3, r2
 8002fc0:	19db      	adds	r3, r3, r7
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	701a      	strb	r2, [r3, #0]
        break;
 8002fc6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d020      	beq.n	8003010 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	085a      	lsrs	r2, r3, #1
 8002fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd6:	18d2      	adds	r2, r2, r3
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	0019      	movs	r1, r3
 8002fde:	0010      	movs	r0, r2
 8002fe0:	f7fd f892 	bl	8000108 <__udivsi3>
 8002fe4:	0003      	movs	r3, r0
 8002fe6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fea:	2b0f      	cmp	r3, #15
 8002fec:	d90a      	bls.n	8003004 <UART_SetConfig+0x458>
 8002fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	025b      	lsls	r3, r3, #9
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d205      	bcs.n	8003004 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	60da      	str	r2, [r3, #12]
 8003002:	e005      	b.n	8003010 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003004:	231a      	movs	r3, #26
 8003006:	2218      	movs	r2, #24
 8003008:	189b      	adds	r3, r3, r2
 800300a:	19db      	adds	r3, r3, r7
 800300c:	2201      	movs	r2, #1
 800300e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	2200      	movs	r2, #0
 8003014:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	2200      	movs	r2, #0
 800301a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800301c:	231a      	movs	r3, #26
 800301e:	2218      	movs	r2, #24
 8003020:	189b      	adds	r3, r3, r2
 8003022:	19db      	adds	r3, r3, r7
 8003024:	781b      	ldrb	r3, [r3, #0]
}
 8003026:	0018      	movs	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	b00e      	add	sp, #56	; 0x38
 800302c:	bdb0      	pop	{r4, r5, r7, pc}
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	0800354c 	.word	0x0800354c
 8003034:	40021000 	.word	0x40021000
 8003038:	003d0900 	.word	0x003d0900
 800303c:	00f42400 	.word	0x00f42400

08003040 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	2201      	movs	r2, #1
 800304e:	4013      	ands	r3, r2
 8003050:	d00b      	beq.n	800306a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4a4a      	ldr	r2, [pc, #296]	; (8003184 <UART_AdvFeatureConfig+0x144>)
 800305a:	4013      	ands	r3, r2
 800305c:	0019      	movs	r1, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	2202      	movs	r2, #2
 8003070:	4013      	ands	r3, r2
 8003072:	d00b      	beq.n	800308c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4a43      	ldr	r2, [pc, #268]	; (8003188 <UART_AdvFeatureConfig+0x148>)
 800307c:	4013      	ands	r3, r2
 800307e:	0019      	movs	r1, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	2204      	movs	r2, #4
 8003092:	4013      	ands	r3, r2
 8003094:	d00b      	beq.n	80030ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4a3b      	ldr	r2, [pc, #236]	; (800318c <UART_AdvFeatureConfig+0x14c>)
 800309e:	4013      	ands	r3, r2
 80030a0:	0019      	movs	r1, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	2208      	movs	r2, #8
 80030b4:	4013      	ands	r3, r2
 80030b6:	d00b      	beq.n	80030d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	4a34      	ldr	r2, [pc, #208]	; (8003190 <UART_AdvFeatureConfig+0x150>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	0019      	movs	r1, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	2210      	movs	r2, #16
 80030d6:	4013      	ands	r3, r2
 80030d8:	d00b      	beq.n	80030f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	4a2c      	ldr	r2, [pc, #176]	; (8003194 <UART_AdvFeatureConfig+0x154>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	0019      	movs	r1, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	2220      	movs	r2, #32
 80030f8:	4013      	ands	r3, r2
 80030fa:	d00b      	beq.n	8003114 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	4a25      	ldr	r2, [pc, #148]	; (8003198 <UART_AdvFeatureConfig+0x158>)
 8003104:	4013      	ands	r3, r2
 8003106:	0019      	movs	r1, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	2240      	movs	r2, #64	; 0x40
 800311a:	4013      	ands	r3, r2
 800311c:	d01d      	beq.n	800315a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	4a1d      	ldr	r2, [pc, #116]	; (800319c <UART_AdvFeatureConfig+0x15c>)
 8003126:	4013      	ands	r3, r2
 8003128:	0019      	movs	r1, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800313a:	2380      	movs	r3, #128	; 0x80
 800313c:	035b      	lsls	r3, r3, #13
 800313e:	429a      	cmp	r2, r3
 8003140:	d10b      	bne.n	800315a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4a15      	ldr	r2, [pc, #84]	; (80031a0 <UART_AdvFeatureConfig+0x160>)
 800314a:	4013      	ands	r3, r2
 800314c:	0019      	movs	r1, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	2280      	movs	r2, #128	; 0x80
 8003160:	4013      	ands	r3, r2
 8003162:	d00b      	beq.n	800317c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	4a0e      	ldr	r2, [pc, #56]	; (80031a4 <UART_AdvFeatureConfig+0x164>)
 800316c:	4013      	ands	r3, r2
 800316e:	0019      	movs	r1, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	605a      	str	r2, [r3, #4]
  }
}
 800317c:	46c0      	nop			; (mov r8, r8)
 800317e:	46bd      	mov	sp, r7
 8003180:	b002      	add	sp, #8
 8003182:	bd80      	pop	{r7, pc}
 8003184:	fffdffff 	.word	0xfffdffff
 8003188:	fffeffff 	.word	0xfffeffff
 800318c:	fffbffff 	.word	0xfffbffff
 8003190:	ffff7fff 	.word	0xffff7fff
 8003194:	ffffefff 	.word	0xffffefff
 8003198:	ffffdfff 	.word	0xffffdfff
 800319c:	ffefffff 	.word	0xffefffff
 80031a0:	ff9fffff 	.word	0xff9fffff
 80031a4:	fff7ffff 	.word	0xfff7ffff

080031a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b092      	sub	sp, #72	; 0x48
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2284      	movs	r2, #132	; 0x84
 80031b4:	2100      	movs	r1, #0
 80031b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031b8:	f7fd fd56 	bl	8000c68 <HAL_GetTick>
 80031bc:	0003      	movs	r3, r0
 80031be:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2208      	movs	r2, #8
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d12c      	bne.n	8003228 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d0:	2280      	movs	r2, #128	; 0x80
 80031d2:	0391      	lsls	r1, r2, #14
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	4a46      	ldr	r2, [pc, #280]	; (80032f0 <UART_CheckIdleState+0x148>)
 80031d8:	9200      	str	r2, [sp, #0]
 80031da:	2200      	movs	r2, #0
 80031dc:	f000 f88c 	bl	80032f8 <UART_WaitOnFlagUntilTimeout>
 80031e0:	1e03      	subs	r3, r0, #0
 80031e2:	d021      	beq.n	8003228 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031e4:	f3ef 8310 	mrs	r3, PRIMASK
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80031ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80031ee:	2301      	movs	r3, #1
 80031f0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f4:	f383 8810 	msr	PRIMASK, r3
}
 80031f8:	46c0      	nop			; (mov r8, r8)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2180      	movs	r1, #128	; 0x80
 8003206:	438a      	bics	r2, r1
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800320e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003210:	f383 8810 	msr	PRIMASK, r3
}
 8003214:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2220      	movs	r2, #32
 800321a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2278      	movs	r2, #120	; 0x78
 8003220:	2100      	movs	r1, #0
 8003222:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e05f      	b.n	80032e8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2204      	movs	r2, #4
 8003230:	4013      	ands	r3, r2
 8003232:	2b04      	cmp	r3, #4
 8003234:	d146      	bne.n	80032c4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003238:	2280      	movs	r2, #128	; 0x80
 800323a:	03d1      	lsls	r1, r2, #15
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	4a2c      	ldr	r2, [pc, #176]	; (80032f0 <UART_CheckIdleState+0x148>)
 8003240:	9200      	str	r2, [sp, #0]
 8003242:	2200      	movs	r2, #0
 8003244:	f000 f858 	bl	80032f8 <UART_WaitOnFlagUntilTimeout>
 8003248:	1e03      	subs	r3, r0, #0
 800324a:	d03b      	beq.n	80032c4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800324c:	f3ef 8310 	mrs	r3, PRIMASK
 8003250:	60fb      	str	r3, [r7, #12]
  return(result);
 8003252:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003254:	637b      	str	r3, [r7, #52]	; 0x34
 8003256:	2301      	movs	r3, #1
 8003258:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f383 8810 	msr	PRIMASK, r3
}
 8003260:	46c0      	nop			; (mov r8, r8)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4921      	ldr	r1, [pc, #132]	; (80032f4 <UART_CheckIdleState+0x14c>)
 800326e:	400a      	ands	r2, r1
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003274:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f383 8810 	msr	PRIMASK, r3
}
 800327c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800327e:	f3ef 8310 	mrs	r3, PRIMASK
 8003282:	61bb      	str	r3, [r7, #24]
  return(result);
 8003284:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003286:	633b      	str	r3, [r7, #48]	; 0x30
 8003288:	2301      	movs	r3, #1
 800328a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f383 8810 	msr	PRIMASK, r3
}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2101      	movs	r1, #1
 80032a0:	438a      	bics	r2, r1
 80032a2:	609a      	str	r2, [r3, #8]
 80032a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	f383 8810 	msr	PRIMASK, r3
}
 80032ae:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2280      	movs	r2, #128	; 0x80
 80032b4:	2120      	movs	r1, #32
 80032b6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2278      	movs	r2, #120	; 0x78
 80032bc:	2100      	movs	r1, #0
 80032be:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e011      	b.n	80032e8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2220      	movs	r2, #32
 80032c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2280      	movs	r2, #128	; 0x80
 80032ce:	2120      	movs	r1, #32
 80032d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2278      	movs	r2, #120	; 0x78
 80032e2:	2100      	movs	r1, #0
 80032e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	0018      	movs	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b010      	add	sp, #64	; 0x40
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	01ffffff 	.word	0x01ffffff
 80032f4:	fffffedf 	.word	0xfffffedf

080032f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	1dfb      	adds	r3, r7, #7
 8003306:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003308:	e04b      	b.n	80033a2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	3301      	adds	r3, #1
 800330e:	d048      	beq.n	80033a2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003310:	f7fd fcaa 	bl	8000c68 <HAL_GetTick>
 8003314:	0002      	movs	r2, r0
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	429a      	cmp	r2, r3
 800331e:	d302      	bcc.n	8003326 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e04b      	b.n	80033c2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2204      	movs	r2, #4
 8003332:	4013      	ands	r3, r2
 8003334:	d035      	beq.n	80033a2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	2208      	movs	r2, #8
 800333e:	4013      	ands	r3, r2
 8003340:	2b08      	cmp	r3, #8
 8003342:	d111      	bne.n	8003368 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2208      	movs	r2, #8
 800334a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	0018      	movs	r0, r3
 8003350:	f000 f83c 	bl	80033cc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2284      	movs	r2, #132	; 0x84
 8003358:	2108      	movs	r1, #8
 800335a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2278      	movs	r2, #120	; 0x78
 8003360:	2100      	movs	r1, #0
 8003362:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e02c      	b.n	80033c2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	69da      	ldr	r2, [r3, #28]
 800336e:	2380      	movs	r3, #128	; 0x80
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	401a      	ands	r2, r3
 8003374:	2380      	movs	r3, #128	; 0x80
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	429a      	cmp	r2, r3
 800337a:	d112      	bne.n	80033a2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2280      	movs	r2, #128	; 0x80
 8003382:	0112      	lsls	r2, r2, #4
 8003384:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	0018      	movs	r0, r3
 800338a:	f000 f81f 	bl	80033cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2284      	movs	r2, #132	; 0x84
 8003392:	2120      	movs	r1, #32
 8003394:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2278      	movs	r2, #120	; 0x78
 800339a:	2100      	movs	r1, #0
 800339c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e00f      	b.n	80033c2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	4013      	ands	r3, r2
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	425a      	negs	r2, r3
 80033b2:	4153      	adcs	r3, r2
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	001a      	movs	r2, r3
 80033b8:	1dfb      	adds	r3, r7, #7
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d0a4      	beq.n	800330a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	0018      	movs	r0, r3
 80033c4:	46bd      	mov	sp, r7
 80033c6:	b004      	add	sp, #16
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08e      	sub	sp, #56	; 0x38
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033d4:	f3ef 8310 	mrs	r3, PRIMASK
 80033d8:	617b      	str	r3, [r7, #20]
  return(result);
 80033da:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033dc:	637b      	str	r3, [r7, #52]	; 0x34
 80033de:	2301      	movs	r3, #1
 80033e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	f383 8810 	msr	PRIMASK, r3
}
 80033e8:	46c0      	nop			; (mov r8, r8)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4926      	ldr	r1, [pc, #152]	; (8003490 <UART_EndRxTransfer+0xc4>)
 80033f6:	400a      	ands	r2, r1
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	f383 8810 	msr	PRIMASK, r3
}
 8003404:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003406:	f3ef 8310 	mrs	r3, PRIMASK
 800340a:	623b      	str	r3, [r7, #32]
  return(result);
 800340c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800340e:	633b      	str	r3, [r7, #48]	; 0x30
 8003410:	2301      	movs	r3, #1
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	f383 8810 	msr	PRIMASK, r3
}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2101      	movs	r1, #1
 8003428:	438a      	bics	r2, r1
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003432:	f383 8810 	msr	PRIMASK, r3
}
 8003436:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343c:	2b01      	cmp	r3, #1
 800343e:	d118      	bne.n	8003472 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003440:	f3ef 8310 	mrs	r3, PRIMASK
 8003444:	60bb      	str	r3, [r7, #8]
  return(result);
 8003446:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800344a:	2301      	movs	r3, #1
 800344c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f383 8810 	msr	PRIMASK, r3
}
 8003454:	46c0      	nop			; (mov r8, r8)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2110      	movs	r1, #16
 8003462:	438a      	bics	r2, r1
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003468:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f383 8810 	msr	PRIMASK, r3
}
 8003470:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2280      	movs	r2, #128	; 0x80
 8003476:	2120      	movs	r1, #32
 8003478:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003486:	46c0      	nop			; (mov r8, r8)
 8003488:	46bd      	mov	sp, r7
 800348a:	b00e      	add	sp, #56	; 0x38
 800348c:	bd80      	pop	{r7, pc}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	fffffedf 	.word	0xfffffedf

08003494 <__libc_init_array>:
 8003494:	b570      	push	{r4, r5, r6, lr}
 8003496:	2600      	movs	r6, #0
 8003498:	4d0c      	ldr	r5, [pc, #48]	; (80034cc <__libc_init_array+0x38>)
 800349a:	4c0d      	ldr	r4, [pc, #52]	; (80034d0 <__libc_init_array+0x3c>)
 800349c:	1b64      	subs	r4, r4, r5
 800349e:	10a4      	asrs	r4, r4, #2
 80034a0:	42a6      	cmp	r6, r4
 80034a2:	d109      	bne.n	80034b8 <__libc_init_array+0x24>
 80034a4:	2600      	movs	r6, #0
 80034a6:	f000 f821 	bl	80034ec <_init>
 80034aa:	4d0a      	ldr	r5, [pc, #40]	; (80034d4 <__libc_init_array+0x40>)
 80034ac:	4c0a      	ldr	r4, [pc, #40]	; (80034d8 <__libc_init_array+0x44>)
 80034ae:	1b64      	subs	r4, r4, r5
 80034b0:	10a4      	asrs	r4, r4, #2
 80034b2:	42a6      	cmp	r6, r4
 80034b4:	d105      	bne.n	80034c2 <__libc_init_array+0x2e>
 80034b6:	bd70      	pop	{r4, r5, r6, pc}
 80034b8:	00b3      	lsls	r3, r6, #2
 80034ba:	58eb      	ldr	r3, [r5, r3]
 80034bc:	4798      	blx	r3
 80034be:	3601      	adds	r6, #1
 80034c0:	e7ee      	b.n	80034a0 <__libc_init_array+0xc>
 80034c2:	00b3      	lsls	r3, r6, #2
 80034c4:	58eb      	ldr	r3, [r5, r3]
 80034c6:	4798      	blx	r3
 80034c8:	3601      	adds	r6, #1
 80034ca:	e7f2      	b.n	80034b2 <__libc_init_array+0x1e>
 80034cc:	08003578 	.word	0x08003578
 80034d0:	08003578 	.word	0x08003578
 80034d4:	08003578 	.word	0x08003578
 80034d8:	0800357c 	.word	0x0800357c

080034dc <memset>:
 80034dc:	0003      	movs	r3, r0
 80034de:	1882      	adds	r2, r0, r2
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d100      	bne.n	80034e6 <memset+0xa>
 80034e4:	4770      	bx	lr
 80034e6:	7019      	strb	r1, [r3, #0]
 80034e8:	3301      	adds	r3, #1
 80034ea:	e7f9      	b.n	80034e0 <memset+0x4>

080034ec <_init>:
 80034ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034f2:	bc08      	pop	{r3}
 80034f4:	469e      	mov	lr, r3
 80034f6:	4770      	bx	lr

080034f8 <_fini>:
 80034f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034fe:	bc08      	pop	{r3}
 8003500:	469e      	mov	lr, r3
 8003502:	4770      	bx	lr
