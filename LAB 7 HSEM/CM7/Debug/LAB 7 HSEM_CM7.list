
LAB 7 HSEM_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064f0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006788  08006788  00016788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067c0  080067c0  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  080067c0  080067c0  000167c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067c8  080067c8  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067c8  080067c8  000167c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067cc  080067cc  000167cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  24000000  080067d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000014  080067e4  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000074  08006844  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006b0  240000d4  080068a4  000200d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000784  080068a4  00020784  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   000195e5  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000028db  00000000  00000000  000396e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001038  00000000  00000000  0003bfc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000f50  00000000  00000000  0003d000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003a39d  00000000  00000000  0003df50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001485d  00000000  00000000  000782ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0017f197  00000000  00000000  0008cb4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0020bce1  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000044e0  00000000  00000000  0020bd34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d4 	.word	0x240000d4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006770 	.word	0x08006770

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d8 	.word	0x240000d8
 80002d4:	08006770 	.word	0x08006770

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000714:	bf00      	nop
 8000716:	4b2d      	ldr	r3, [pc, #180]	; (80007cc <main+0xc4>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
		;
	if (timeout < 0) {
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
		Error_Handler();
 8000732:	f000 fa3f 	bl	8000bb4 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000736:	f000 fc75 	bl	8001024 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800073a:	f000 f84d 	bl	80007d8 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 800073e:	4b23      	ldr	r3, [pc, #140]	; (80007cc <main+0xc4>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a21      	ldr	r2, [pc, #132]	; (80007cc <main+0xc4>)
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <main+0xc4>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 800075c:	2000      	movs	r0, #0
 800075e:	f001 fc09 	bl	8001f74 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f001 fc1f 	bl	8001fa8 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000770:	bf00      	nop
 8000772:	4b16      	ldr	r3, [pc, #88]	; (80007cc <main+0xc4>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x80>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcf4      	bgt.n	8000772 <main+0x6a>
		;
	if (timeout < 0) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <main+0x8a>
		Error_Handler();
 800078e:	f000 fa11 	bl	8000bb4 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000792:	f000 f969 	bl	8000a68 <MX_GPIO_Init>
	MX_ETH_Init();
 8000796:	f000 f89d 	bl	80008d4 <MX_ETH_Init>
	MX_USART3_UART_Init();
 800079a:	f000 f8e7 	bl	800096c <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 800079e:	f000 f931 	bl	8000a04 <MX_USB_OTG_FS_PCD_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (HAL_HSEM_FastTake(1) == HAL_OK) {
 80007a2:	2001      	movs	r0, #1
 80007a4:	f001 fbe6 	bl	8001f74 <HAL_HSEM_FastTake>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d1f9      	bne.n	80007a2 <main+0x9a>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, sharedMemory->led1);
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <main+0xc8>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	461a      	mov	r2, r3
 80007b8:	2101      	movs	r1, #1
 80007ba:	4806      	ldr	r0, [pc, #24]	; (80007d4 <main+0xcc>)
 80007bc:	f001 fbc0 	bl	8001f40 <HAL_GPIO_WritePin>

			HAL_HSEM_Release(1, 0);
 80007c0:	2100      	movs	r1, #0
 80007c2:	2001      	movs	r0, #1
 80007c4:	f001 fbf0 	bl	8001fa8 <HAL_HSEM_Release>
		if (HAL_HSEM_FastTake(1) == HAL_OK) {
 80007c8:	e7eb      	b.n	80007a2 <main+0x9a>
 80007ca:	bf00      	nop
 80007cc:	58024400 	.word	0x58024400
 80007d0:	24000008 	.word	0x24000008
 80007d4:	58020400 	.word	0x58020400

080007d8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b09c      	sub	sp, #112	; 0x70
 80007dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e2:	224c      	movs	r2, #76	; 0x4c
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f005 ffba 	bl	8006760 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2220      	movs	r2, #32
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f005 ffb4 	bl	8006760 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007f8:	2004      	movs	r0, #4
 80007fa:	f001 fd31 	bl	8002260 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b32      	ldr	r3, [pc, #200]	; (80008cc <SystemClock_Config+0xf4>)
 8000804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000806:	4a31      	ldr	r2, [pc, #196]	; (80008cc <SystemClock_Config+0xf4>)
 8000808:	f023 0301 	bic.w	r3, r3, #1
 800080c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800080e:	4b2f      	ldr	r3, [pc, #188]	; (80008cc <SystemClock_Config+0xf4>)
 8000810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	4b2d      	ldr	r3, [pc, #180]	; (80008d0 <SystemClock_Config+0xf8>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000820:	4a2b      	ldr	r2, [pc, #172]	; (80008d0 <SystemClock_Config+0xf8>)
 8000822:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b29      	ldr	r3, [pc, #164]	; (80008d0 <SystemClock_Config+0xf8>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000834:	bf00      	nop
 8000836:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <SystemClock_Config+0xf8>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800083e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000842:	d1f8      	bne.n	8000836 <SystemClock_Config+0x5e>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000844:	2301      	movs	r3, #1
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000848:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084e:	2302      	movs	r3, #2
 8000850:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000852:	2302      	movs	r3, #2
 8000854:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000856:	2301      	movs	r3, #1
 8000858:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 18;
 800085a:	2312      	movs	r3, #18
 800085c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 800085e:	2302      	movs	r3, #2
 8000860:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000862:	2302      	movs	r3, #2
 8000864:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000866:	2302      	movs	r3, #2
 8000868:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800086a:	230c      	movs	r3, #12
 800086c:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800086e:	2302      	movs	r3, #2
 8000870:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000872:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000876:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087c:	4618      	mov	r0, r3
 800087e:	f001 fd59 	bl	8002334 <HAL_RCC_OscConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0xb4>
		Error_Handler();
 8000888:	f000 f994 	bl	8000bb4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
 800088c:	233f      	movs	r3, #63	; 0x3f
 800088e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000890:	2303      	movs	r3, #3
 8000892:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800089c:	2340      	movs	r3, #64	; 0x40
 800089e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008a0:	2340      	movs	r3, #64	; 0x40
 80008a2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a8:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008aa:	2340      	movs	r3, #64	; 0x40
 80008ac:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2101      	movs	r1, #1
 80008b2:	4618      	mov	r0, r3
 80008b4:	f002 f998 	bl	8002be8 <HAL_RCC_ClockConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0xea>
		Error_Handler();
 80008be:	f000 f979 	bl	8000bb4 <Error_Handler>
	}
}
 80008c2:	bf00      	nop
 80008c4:	3770      	adds	r7, #112	; 0x70
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	58000400 	.word	0x58000400
 80008d0:	58024800 	.word	0x58024800

080008d4 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 80008d8:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <MX_ETH_Init+0x80>)
 80008da:	4a1f      	ldr	r2, [pc, #124]	; (8000958 <MX_ETH_Init+0x84>)
 80008dc:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 80008de:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_ETH_Init+0x88>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 80008e4:	4b1d      	ldr	r3, [pc, #116]	; (800095c <MX_ETH_Init+0x88>)
 80008e6:	2280      	movs	r2, #128	; 0x80
 80008e8:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_ETH_Init+0x88>)
 80008ec:	22e1      	movs	r2, #225	; 0xe1
 80008ee:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 80008f0:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_ETH_Init+0x88>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 80008f6:	4b19      	ldr	r3, [pc, #100]	; (800095c <MX_ETH_Init+0x88>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <MX_ETH_Init+0x88>)
 80008fe:	2200      	movs	r2, #0
 8000900:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_ETH_Init+0x80>)
 8000904:	4a15      	ldr	r2, [pc, #84]	; (800095c <MX_ETH_Init+0x88>)
 8000906:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_ETH_Init+0x80>)
 800090a:	2201      	movs	r2, #1
 800090c:	721a      	strb	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_ETH_Init+0x80>)
 8000910:	4a13      	ldr	r2, [pc, #76]	; (8000960 <MX_ETH_Init+0x8c>)
 8000912:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_ETH_Init+0x80>)
 8000916:	4a13      	ldr	r2, [pc, #76]	; (8000964 <MX_ETH_Init+0x90>)
 8000918:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_ETH_Init+0x80>)
 800091c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000920:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8000922:	480c      	ldr	r0, [pc, #48]	; (8000954 <MX_ETH_Init+0x80>)
 8000924:	f000 fd38 	bl	8001398 <HAL_ETH_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_ETH_Init+0x5e>
		Error_Handler();
 800092e:	f000 f941 	bl	8000bb4 <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8000932:	2238      	movs	r2, #56	; 0x38
 8000934:	2100      	movs	r1, #0
 8000936:	480c      	ldr	r0, [pc, #48]	; (8000968 <MX_ETH_Init+0x94>)
 8000938:	f005 ff12 	bl	8006760 <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <MX_ETH_Init+0x94>)
 800093e:	2221      	movs	r2, #33	; 0x21
 8000940:	601a      	str	r2, [r3, #0]
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_ETH_Init+0x94>)
 8000944:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000948:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800094a:	4b07      	ldr	r3, [pc, #28]	; (8000968 <MX_ETH_Init+0x94>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	24000128 	.word	0x24000128
 8000958:	40028000 	.word	0x40028000
 800095c:	24000778 	.word	0x24000778
 8000960:	24000074 	.word	0x24000074
 8000964:	24000014 	.word	0x24000014
 8000968:	240000f0 	.word	0x240000f0

0800096c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <MX_USART3_UART_Init+0x90>)
 8000972:	4a23      	ldr	r2, [pc, #140]	; (8000a00 <MX_USART3_UART_Init+0x94>)
 8000974:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <MX_USART3_UART_Init+0x90>)
 8000978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800097c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <MX_USART3_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <MX_USART3_UART_Init+0x90>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <MX_USART3_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_USART3_UART_Init+0x90>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b19      	ldr	r3, [pc, #100]	; (80009fc <MX_USART3_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b17      	ldr	r3, [pc, #92]	; (80009fc <MX_USART3_UART_Init+0x90>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_USART3_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_USART3_UART_Init+0x90>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_USART3_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80009b4:	4811      	ldr	r0, [pc, #68]	; (80009fc <MX_USART3_UART_Init+0x90>)
 80009b6:	f004 facf 	bl	8004f58 <HAL_UART_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART3_UART_Init+0x58>
		Error_Handler();
 80009c0:	f000 f8f8 	bl	8000bb4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 80009c4:	2100      	movs	r1, #0
 80009c6:	480d      	ldr	r0, [pc, #52]	; (80009fc <MX_USART3_UART_Init+0x90>)
 80009c8:	f005 fad1 	bl	8005f6e <HAL_UARTEx_SetTxFifoThreshold>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART3_UART_Init+0x6a>
		Error_Handler();
 80009d2:	f000 f8ef 	bl	8000bb4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 80009d6:	2100      	movs	r1, #0
 80009d8:	4808      	ldr	r0, [pc, #32]	; (80009fc <MX_USART3_UART_Init+0x90>)
 80009da:	f005 fb06 	bl	8005fea <HAL_UARTEx_SetRxFifoThreshold>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_USART3_UART_Init+0x7c>
		Error_Handler();
 80009e4:	f000 f8e6 	bl	8000bb4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_USART3_UART_Init+0x90>)
 80009ea:	f005 fa87 	bl	8005efc <HAL_UARTEx_DisableFifoMode>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART3_UART_Init+0x8c>
		Error_Handler();
 80009f4:	f000 f8de 	bl	8000bb4 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	240001d8 	.word	0x240001d8
 8000a00:	40004800 	.word	0x40004800

08000a04 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a08:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a0a:	4a16      	ldr	r2, [pc, #88]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a0c:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a10:	2209      	movs	r2, #9
 8000a12:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a16:	2202      	movs	r2, #2
 8000a18:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a22:	2202      	movs	r2, #2
 8000a24:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	629a      	str	r2, [r3, #40]	; 0x28
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a4c:	f001 fac0 	bl	8001fd0 <HAL_PCD_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_USB_OTG_FS_PCD_Init+0x56>
		Error_Handler();
 8000a56:	f000 f8ad 	bl	8000bb4 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	2400026c 	.word	0x2400026c
 8000a64:	40080000 	.word	0x40080000

08000a68 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08c      	sub	sp, #48	; 0x30
 8000a6c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7e:	4b4a      	ldr	r3, [pc, #296]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a84:	4a48      	ldr	r2, [pc, #288]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000a86:	f043 0304 	orr.w	r3, r3, #4
 8000a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a8e:	4b46      	ldr	r3, [pc, #280]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	61bb      	str	r3, [r7, #24]
 8000a9a:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9c:	4b42      	ldr	r3, [pc, #264]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a41      	ldr	r2, [pc, #260]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b3e      	ldr	r3, [pc, #248]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	4b3b      	ldr	r3, [pc, #236]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a39      	ldr	r2, [pc, #228]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b37      	ldr	r3, [pc, #220]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad8:	4b33      	ldr	r3, [pc, #204]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ade:	4a32      	ldr	r2, [pc, #200]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae8:	4b2f      	ldr	r3, [pc, #188]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000af6:	4b2c      	ldr	r3, [pc, #176]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	4a2a      	ldr	r2, [pc, #168]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b06:	4b28      	ldr	r3, [pc, #160]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0c:	f003 0308 	and.w	r3, r3, #8
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000b14:	4b24      	ldr	r3, [pc, #144]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1a:	4a23      	ldr	r2, [pc, #140]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b24:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000b32:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b38:	4a1b      	ldr	r2, [pc, #108]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000b3a:	f043 0310 	orr.w	r3, r3, #16
 8000b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b48:	f003 0310 	and.w	r3, r3, #16
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b56:	4815      	ldr	r0, [pc, #84]	; (8000bac <MX_GPIO_Init+0x144>)
 8000b58:	f001 f9f2 	bl	8001f40 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2102      	movs	r1, #2
 8000b60:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <MX_GPIO_Init+0x148>)
 8000b62:	f001 f9ed 	bl	8001f40 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LD1_Pin LD3_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin;
 8000b66:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b6a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	480b      	ldr	r0, [pc, #44]	; (8000bac <MX_GPIO_Init+0x144>)
 8000b80:	f001 f82e 	bl	8001be0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000b84:	2302      	movs	r3, #2
 8000b86:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_GPIO_Init+0x148>)
 8000b9c:	f001 f820 	bl	8001be0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba0:	bf00      	nop
 8000ba2:	3730      	adds	r7, #48	; 0x30
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	58024400 	.word	0x58024400
 8000bac:	58020400 	.word	0x58020400
 8000bb0:	58021000 	.word	0x58021000

08000bb4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb8:	b672      	cpsid	i
}
 8000bba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bbc:	e7fe      	b.n	8000bbc <Error_Handler+0x8>
	...

08000bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <HAL_MspInit+0x30>)
 8000bc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bcc:	4a08      	ldr	r2, [pc, #32]	; (8000bf0 <HAL_MspInit+0x30>)
 8000bce:	f043 0302 	orr.w	r3, r3, #2
 8000bd2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_MspInit+0x30>)
 8000bd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bdc:	f003 0302 	and.w	r3, r3, #2
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	58024400 	.word	0x58024400

08000bf4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08e      	sub	sp, #56	; 0x38
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a59      	ldr	r2, [pc, #356]	; (8000d78 <HAL_ETH_MspInit+0x184>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	f040 80ab 	bne.w	8000d6e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c18:	4b58      	ldr	r3, [pc, #352]	; (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c1e:	4a57      	ldr	r2, [pc, #348]	; (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c24:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c28:	4b54      	ldr	r3, [pc, #336]	; (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c32:	623b      	str	r3, [r7, #32]
 8000c34:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c36:	4b51      	ldr	r3, [pc, #324]	; (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c3c:	4a4f      	ldr	r2, [pc, #316]	; (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c42:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c46:	4b4d      	ldr	r3, [pc, #308]	; (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c50:	61fb      	str	r3, [r7, #28]
 8000c52:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c54:	4b49      	ldr	r3, [pc, #292]	; (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c5a:	4a48      	ldr	r2, [pc, #288]	; (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c64:	4b45      	ldr	r3, [pc, #276]	; (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6e:	61bb      	str	r3, [r7, #24]
 8000c70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c72:	4b42      	ldr	r3, [pc, #264]	; (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c78:	4a40      	ldr	r2, [pc, #256]	; (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c7a:	f043 0304 	orr.w	r3, r3, #4
 8000c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c82:	4b3e      	ldr	r3, [pc, #248]	; (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c88:	f003 0304 	and.w	r3, r3, #4
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	4b3a      	ldr	r3, [pc, #232]	; (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c96:	4a39      	ldr	r2, [pc, #228]	; (8000d7c <HAL_ETH_MspInit+0x188>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca0:	4b36      	ldr	r3, [pc, #216]	; (8000d7c <HAL_ETH_MspInit+0x188>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	4b33      	ldr	r3, [pc, #204]	; (8000d7c <HAL_ETH_MspInit+0x188>)
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb4:	4a31      	ldr	r2, [pc, #196]	; (8000d7c <HAL_ETH_MspInit+0x188>)
 8000cb6:	f043 0302 	orr.w	r3, r3, #2
 8000cba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cbe:	4b2f      	ldr	r3, [pc, #188]	; (8000d7c <HAL_ETH_MspInit+0x188>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ccc:	4b2b      	ldr	r3, [pc, #172]	; (8000d7c <HAL_ETH_MspInit+0x188>)
 8000cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd2:	4a2a      	ldr	r2, [pc, #168]	; (8000d7c <HAL_ETH_MspInit+0x188>)
 8000cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cdc:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <HAL_ETH_MspInit+0x188>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000cea:	2332      	movs	r3, #50	; 0x32
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cfa:	230b      	movs	r3, #11
 8000cfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d02:	4619      	mov	r1, r3
 8000d04:	481e      	ldr	r0, [pc, #120]	; (8000d80 <HAL_ETH_MspInit+0x18c>)
 8000d06:	f000 ff6b 	bl	8001be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000d0a:	2386      	movs	r3, #134	; 0x86
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d1a:	230b      	movs	r3, #11
 8000d1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d22:	4619      	mov	r1, r3
 8000d24:	4817      	ldr	r0, [pc, #92]	; (8000d84 <HAL_ETH_MspInit+0x190>)
 8000d26:	f000 ff5b 	bl	8001be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d3c:	230b      	movs	r3, #11
 8000d3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d44:	4619      	mov	r1, r3
 8000d46:	4810      	ldr	r0, [pc, #64]	; (8000d88 <HAL_ETH_MspInit+0x194>)
 8000d48:	f000 ff4a 	bl	8001be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d4c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d5e:	230b      	movs	r3, #11
 8000d60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d66:	4619      	mov	r1, r3
 8000d68:	4808      	ldr	r0, [pc, #32]	; (8000d8c <HAL_ETH_MspInit+0x198>)
 8000d6a:	f000 ff39 	bl	8001be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	3738      	adds	r7, #56	; 0x38
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40028000 	.word	0x40028000
 8000d7c:	58024400 	.word	0x58024400
 8000d80:	58020800 	.word	0x58020800
 8000d84:	58020000 	.word	0x58020000
 8000d88:	58020400 	.word	0x58020400
 8000d8c:	58021800 	.word	0x58021800

08000d90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b0ba      	sub	sp, #232	; 0xe8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da8:	f107 0310 	add.w	r3, r7, #16
 8000dac:	22c0      	movs	r2, #192	; 0xc0
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f005 fcd5 	bl	8006760 <memset>
  if(huart->Instance==USART3)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a27      	ldr	r2, [pc, #156]	; (8000e58 <HAL_UART_MspInit+0xc8>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d146      	bne.n	8000e4e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dc0:	f04f 0202 	mov.w	r2, #2
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd2:	f107 0310 	add.w	r3, r7, #16
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f002 fa92 	bl	8003300 <HAL_RCCEx_PeriphCLKConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000de2:	f7ff fee7 	bl	8000bb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000de6:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <HAL_UART_MspInit+0xcc>)
 8000de8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dec:	4a1b      	ldr	r2, [pc, #108]	; (8000e5c <HAL_UART_MspInit+0xcc>)
 8000dee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000df6:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <HAL_UART_MspInit+0xcc>)
 8000df8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e04:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <HAL_UART_MspInit+0xcc>)
 8000e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0a:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <HAL_UART_MspInit+0xcc>)
 8000e0c:	f043 0308 	orr.w	r3, r3, #8
 8000e10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <HAL_UART_MspInit+0xcc>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e3c:	2307      	movs	r3, #7
 8000e3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e42:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e46:	4619      	mov	r1, r3
 8000e48:	4805      	ldr	r0, [pc, #20]	; (8000e60 <HAL_UART_MspInit+0xd0>)
 8000e4a:	f000 fec9 	bl	8001be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e4e:	bf00      	nop
 8000e50:	37e8      	adds	r7, #232	; 0xe8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40004800 	.word	0x40004800
 8000e5c:	58024400 	.word	0x58024400
 8000e60:	58020c00 	.word	0x58020c00

08000e64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b0ba      	sub	sp, #232	; 0xe8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	22c0      	movs	r2, #192	; 0xc0
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f005 fc6b 	bl	8006760 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a38      	ldr	r2, [pc, #224]	; (8000f70 <HAL_PCD_MspInit+0x10c>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d169      	bne.n	8000f68 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e94:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e98:	f04f 0300 	mov.w	r3, #0
 8000e9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8000ea4:	2312      	movs	r3, #18
 8000ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8000eac:	2303      	movs	r3, #3
 8000eae:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000eb4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8000eba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ebe:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000ec0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ec4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec8:	f107 0310 	add.w	r3, r7, #16
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f002 fa17 	bl	8003300 <HAL_RCCEx_PeriphCLKConfig>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8000ed8:	f7ff fe6c 	bl	8000bb4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000edc:	f001 fa1a 	bl	8002314 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee0:	4b24      	ldr	r3, [pc, #144]	; (8000f74 <HAL_PCD_MspInit+0x110>)
 8000ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee6:	4a23      	ldr	r2, [pc, #140]	; (8000f74 <HAL_PCD_MspInit+0x110>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef0:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <HAL_PCD_MspInit+0x110>)
 8000ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000efe:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000f02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f18:	230a      	movs	r3, #10
 8000f1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f22:	4619      	mov	r1, r3
 8000f24:	4814      	ldr	r0, [pc, #80]	; (8000f78 <HAL_PCD_MspInit+0x114>)
 8000f26:	f000 fe5b 	bl	8001be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f42:	4619      	mov	r1, r3
 8000f44:	480c      	ldr	r0, [pc, #48]	; (8000f78 <HAL_PCD_MspInit+0x114>)
 8000f46:	f000 fe4b 	bl	8001be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_PCD_MspInit+0x110>)
 8000f4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f50:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <HAL_PCD_MspInit+0x110>)
 8000f52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f56:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_PCD_MspInit+0x110>)
 8000f5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f68:	bf00      	nop
 8000f6a:	37e8      	adds	r7, #232	; 0xe8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40080000 	.word	0x40080000
 8000f74:	58024400 	.word	0x58024400
 8000f78:	58020000 	.word	0x58020000

08000f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <NMI_Handler+0x4>

08000f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <HardFault_Handler+0x4>

08000f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <MemManage_Handler+0x4>

08000f8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc8:	f000 f89e 	bl	8001108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001008 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fd4:	f7ff fb02 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd8:	480c      	ldr	r0, [pc, #48]	; (800100c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fda:	490d      	ldr	r1, [pc, #52]	; (8001010 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	; (8001014 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe0:	e002      	b.n	8000fe8 <LoopCopyDataInit>

08000fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe6:	3304      	adds	r3, #4

08000fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fec:	d3f9      	bcc.n	8000fe2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fee:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ff0:	4c0a      	ldr	r4, [pc, #40]	; (800101c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff4:	e001      	b.n	8000ffa <LoopFillZerobss>

08000ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff8:	3204      	adds	r2, #4

08000ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ffc:	d3fb      	bcc.n	8000ff6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f005 fb8b 	bl	8006718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001002:	f7ff fb81 	bl	8000708 <main>
  bx  lr
 8001006:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001008:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800100c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001010:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001014:	080067d0 	.word	0x080067d0
  ldr r2, =_sbss
 8001018:	240000d4 	.word	0x240000d4
  ldr r4, =_ebss
 800101c:	24000784 	.word	0x24000784

08001020 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <ADC3_IRQHandler>
	...

08001024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102a:	2003      	movs	r0, #3
 800102c:	f000 f982 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001030:	f001 ff90 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8001034:	4602      	mov	r2, r0
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <HAL_Init+0x68>)
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	0a1b      	lsrs	r3, r3, #8
 800103c:	f003 030f 	and.w	r3, r3, #15
 8001040:	4913      	ldr	r1, [pc, #76]	; (8001090 <HAL_Init+0x6c>)
 8001042:	5ccb      	ldrb	r3, [r1, r3]
 8001044:	f003 031f 	and.w	r3, r3, #31
 8001048:	fa22 f303 	lsr.w	r3, r2, r3
 800104c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <HAL_Init+0x68>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <HAL_Init+0x6c>)
 8001058:	5cd3      	ldrb	r3, [r2, r3]
 800105a:	f003 031f 	and.w	r3, r3, #31
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	fa22 f303 	lsr.w	r3, r2, r3
 8001064:	4a0b      	ldr	r2, [pc, #44]	; (8001094 <HAL_Init+0x70>)
 8001066:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001068:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <HAL_Init+0x74>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800106e:	2000      	movs	r0, #0
 8001070:	f000 f814 	bl	800109c <HAL_InitTick>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e002      	b.n	8001084 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800107e:	f7ff fd9f 	bl	8000bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	58024400 	.word	0x58024400
 8001090:	08006788 	.word	0x08006788
 8001094:	24000004 	.word	0x24000004
 8001098:	24000000 	.word	0x24000000

0800109c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010a4:	4b15      	ldr	r3, [pc, #84]	; (80010fc <HAL_InitTick+0x60>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e021      	b.n	80010f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <HAL_InitTick+0x64>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <HAL_InitTick+0x60>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f959 	bl	800137e <HAL_SYSTICK_Config>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00e      	b.n	80010f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d80a      	bhi.n	80010f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f000 f931 	bl	800134a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e8:	4a06      	ldr	r2, [pc, #24]	; (8001104 <HAL_InitTick+0x68>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e000      	b.n	80010f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	24000010 	.word	0x24000010
 8001100:	24000000 	.word	0x24000000
 8001104:	2400000c 	.word	0x2400000c

08001108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_IncTick+0x20>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x24>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <HAL_IncTick+0x24>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	24000010 	.word	0x24000010
 800112c:	24000780 	.word	0x24000780

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	24000780 	.word	0x24000780

08001148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff ffee 	bl	8001130 <HAL_GetTick>
 8001154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001160:	d005      	beq.n	800116e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_Delay+0x44>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800116e:	bf00      	nop
 8001170:	f7ff ffde 	bl	8001130 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	429a      	cmp	r2, r3
 800117e:	d8f7      	bhi.n	8001170 <HAL_Delay+0x28>
  {
  }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	24000010 	.word	0x24000010

08001190 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <HAL_GetREVID+0x14>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	0c1b      	lsrs	r3, r3, #16
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	5c001000 	.word	0x5c001000

080011a8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80011b8:	4904      	ldr	r1, [pc, #16]	; (80011cc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4313      	orrs	r3, r2
 80011be:	604b      	str	r3, [r1, #4]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	58000400 	.word	0x58000400

080011d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <__NVIC_SetPriorityGrouping+0x40>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ec:	4013      	ands	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fe:	4a04      	ldr	r2, [pc, #16]	; (8001210 <__NVIC_SetPriorityGrouping+0x40>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	60d3      	str	r3, [r2, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00
 8001214:	05fa0000 	.word	0x05fa0000

08001218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <__NVIC_GetPriorityGrouping+0x18>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	f003 0307 	and.w	r3, r3, #7
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001240:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001244:	2b00      	cmp	r3, #0
 8001246:	db0a      	blt.n	800125e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	490c      	ldr	r1, [pc, #48]	; (8001280 <__NVIC_SetPriority+0x4c>)
 800124e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	440b      	add	r3, r1
 8001258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800125c:	e00a      	b.n	8001274 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4908      	ldr	r1, [pc, #32]	; (8001284 <__NVIC_SetPriority+0x50>)
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	3b04      	subs	r3, #4
 800126c:	0112      	lsls	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	440b      	add	r3, r1
 8001272:	761a      	strb	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f1c3 0307 	rsb	r3, r3, #7
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	bf28      	it	cs
 80012a6:	2304      	movcs	r3, #4
 80012a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3304      	adds	r3, #4
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d902      	bls.n	80012b8 <NVIC_EncodePriority+0x30>
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b03      	subs	r3, #3
 80012b6:	e000      	b.n	80012ba <NVIC_EncodePriority+0x32>
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	f04f 32ff 	mov.w	r2, #4294967295
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43d9      	mvns	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	4313      	orrs	r3, r2
         );
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3724      	adds	r7, #36	; 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001300:	d301      	bcc.n	8001306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001302:	2301      	movs	r3, #1
 8001304:	e00f      	b.n	8001326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <SysTick_Config+0x40>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130e:	210f      	movs	r1, #15
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f7ff ff8e 	bl	8001234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <SysTick_Config+0x40>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SysTick_Config+0x40>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ff47 	bl	80011d0 <__NVIC_SetPriorityGrouping>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001358:	f7ff ff5e 	bl	8001218 <__NVIC_GetPriorityGrouping>
 800135c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	6978      	ldr	r0, [r7, #20]
 8001364:	f7ff ff90 	bl	8001288 <NVIC_EncodePriority>
 8001368:	4602      	mov	r2, r0
 800136a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff5f 	bl	8001234 <__NVIC_SetPriority>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ffb2 	bl	80012f0 <SysTick_Config>
 800138c:	4603      	mov	r3, r0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e0cf      	b.n	800154a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d106      	bne.n	80013c2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2223      	movs	r2, #35	; 0x23
 80013b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff fc19 	bl	8000bf4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c2:	4b64      	ldr	r3, [pc, #400]	; (8001554 <HAL_ETH_Init+0x1bc>)
 80013c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013c8:	4a62      	ldr	r2, [pc, #392]	; (8001554 <HAL_ETH_Init+0x1bc>)
 80013ca:	f043 0302 	orr.w	r3, r3, #2
 80013ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013d2:	4b60      	ldr	r3, [pc, #384]	; (8001554 <HAL_ETH_Init+0x1bc>)
 80013d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	7a1b      	ldrb	r3, [r3, #8]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d103      	bne.n	80013f0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff fedd 	bl	80011a8 <HAL_SYSCFG_ETHInterfaceSelect>
 80013ee:	e003      	b.n	80013f8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80013f0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80013f4:	f7ff fed8 	bl	80011a8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80013f8:	4b57      	ldr	r3, [pc, #348]	; (8001558 <HAL_ETH_Init+0x1c0>)
 80013fa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6812      	ldr	r2, [r2, #0]
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001412:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001414:	f7ff fe8c 	bl	8001130 <HAL_GetTick>
 8001418:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800141a:	e011      	b.n	8001440 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800141c:	f7ff fe88 	bl	8001130 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800142a:	d909      	bls.n	8001440 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2204      	movs	r2, #4
 8001430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	22e0      	movs	r2, #224	; 0xe0
 8001438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e084      	b.n	800154a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1e4      	bne.n	800141c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f886 	bl	8001564 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001458:	f001 fef6 	bl	8003248 <HAL_RCC_GetHCLKFreq>
 800145c:	4603      	mov	r3, r0
 800145e:	4a3f      	ldr	r2, [pc, #252]	; (800155c <HAL_ETH_Init+0x1c4>)
 8001460:	fba2 2303 	umull	r2, r3, r2, r3
 8001464:	0c9a      	lsrs	r2, r3, #18
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	3a01      	subs	r2, #1
 800146c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f000 fa71 	bl	8001958 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800147e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001482:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800148e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001492:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d009      	beq.n	80014b6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2201      	movs	r2, #1
 80014a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	22e0      	movs	r2, #224	; 0xe0
 80014ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e049      	b.n	800154a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014be:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80014c2:	4b27      	ldr	r3, [pc, #156]	; (8001560 <HAL_ETH_Init+0x1c8>)
 80014c4:	4013      	ands	r3, r2
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	6952      	ldr	r2, [r2, #20]
 80014ca:	0051      	lsls	r1, r2, #1
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	6812      	ldr	r2, [r2, #0]
 80014d0:	430b      	orrs	r3, r1
 80014d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014d6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 fad9 	bl	8001a92 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 fb1f 	bl	8001b24 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	3305      	adds	r3, #5
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	021a      	lsls	r2, r3, #8
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	3304      	adds	r3, #4
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	3303      	adds	r3, #3
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	061a      	lsls	r2, r3, #24
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	3302      	adds	r3, #2
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	041b      	lsls	r3, r3, #16
 8001518:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	3301      	adds	r3, #1
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001524:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001532:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001534:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2210      	movs	r2, #16
 8001544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	58024400 	.word	0x58024400
 8001558:	58000400 	.word	0x58000400
 800155c:	431bde83 	.word	0x431bde83
 8001560:	ffff8001 	.word	0xffff8001

08001564 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001574:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800157c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800157e:	f001 fe63 	bl	8003248 <HAL_RCC_GetHCLKFreq>
 8001582:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4a1e      	ldr	r2, [pc, #120]	; (8001600 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d908      	bls.n	800159e <HAL_ETH_SetMDIOClockRange+0x3a>
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d804      	bhi.n	800159e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	e027      	b.n	80015ee <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	4a18      	ldr	r2, [pc, #96]	; (8001604 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d908      	bls.n	80015b8 <HAL_ETH_SetMDIOClockRange+0x54>
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	4a17      	ldr	r2, [pc, #92]	; (8001608 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d204      	bcs.n	80015b8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	e01a      	b.n	80015ee <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	4a13      	ldr	r2, [pc, #76]	; (8001608 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d303      	bcc.n	80015c8 <HAL_ETH_SetMDIOClockRange+0x64>
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d911      	bls.n	80015ec <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	4a10      	ldr	r2, [pc, #64]	; (800160c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d908      	bls.n	80015e2 <HAL_ETH_SetMDIOClockRange+0x7e>
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	4a0f      	ldr	r2, [pc, #60]	; (8001610 <HAL_ETH_SetMDIOClockRange+0xac>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d804      	bhi.n	80015e2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	e005      	b.n	80015ee <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	e000      	b.n	80015ee <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80015ec:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	01312cff 	.word	0x01312cff
 8001604:	02160ebf 	.word	0x02160ebf
 8001608:	03938700 	.word	0x03938700
 800160c:	05f5e0ff 	.word	0x05f5e0ff
 8001610:	08f0d17f 	.word	0x08f0d17f

08001614 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001626:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	791b      	ldrb	r3, [r3, #4]
 800162c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800162e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	7b1b      	ldrb	r3, [r3, #12]
 8001634:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001636:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	7b5b      	ldrb	r3, [r3, #13]
 800163c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800163e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	7b9b      	ldrb	r3, [r3, #14]
 8001644:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001646:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	7bdb      	ldrb	r3, [r3, #15]
 800164c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800164e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	7c12      	ldrb	r2, [r2, #16]
 8001654:	2a00      	cmp	r2, #0
 8001656:	d102      	bne.n	800165e <ETH_SetMACConfig+0x4a>
 8001658:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800165c:	e000      	b.n	8001660 <ETH_SetMACConfig+0x4c>
 800165e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001660:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	7c52      	ldrb	r2, [r2, #17]
 8001666:	2a00      	cmp	r2, #0
 8001668:	d102      	bne.n	8001670 <ETH_SetMACConfig+0x5c>
 800166a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800166e:	e000      	b.n	8001672 <ETH_SetMACConfig+0x5e>
 8001670:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001672:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	7c9b      	ldrb	r3, [r3, #18]
 8001678:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800167a:	431a      	orrs	r2, r3
               macconf->Speed |
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001680:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001686:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	7f1b      	ldrb	r3, [r3, #28]
 800168c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800168e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	7f5b      	ldrb	r3, [r3, #29]
 8001694:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001696:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	7f92      	ldrb	r2, [r2, #30]
 800169c:	2a00      	cmp	r2, #0
 800169e:	d102      	bne.n	80016a6 <ETH_SetMACConfig+0x92>
 80016a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016a4:	e000      	b.n	80016a8 <ETH_SetMACConfig+0x94>
 80016a6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80016a8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	7fdb      	ldrb	r3, [r3, #31]
 80016ae:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80016b0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80016b8:	2a00      	cmp	r2, #0
 80016ba:	d102      	bne.n	80016c2 <ETH_SetMACConfig+0xae>
 80016bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016c0:	e000      	b.n	80016c4 <ETH_SetMACConfig+0xb0>
 80016c2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80016c4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80016ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80016d2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80016d4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80016da:	4313      	orrs	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b56      	ldr	r3, [pc, #344]	; (8001840 <ETH_SetMACConfig+0x22c>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	68f9      	ldr	r1, [r7, #12]
 80016ee:	430b      	orrs	r3, r1
 80016f0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016fe:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001700:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001708:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800170a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001712:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001714:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800171c:	2a00      	cmp	r2, #0
 800171e:	d102      	bne.n	8001726 <ETH_SetMACConfig+0x112>
 8001720:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001724:	e000      	b.n	8001728 <ETH_SetMACConfig+0x114>
 8001726:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001728:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800172e:	4313      	orrs	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	4b42      	ldr	r3, [pc, #264]	; (8001844 <ETH_SetMACConfig+0x230>)
 800173a:	4013      	ands	r3, r2
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	68f9      	ldr	r1, [r7, #12]
 8001742:	430b      	orrs	r3, r1
 8001744:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800174c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001752:	4313      	orrs	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	4b3a      	ldr	r3, [pc, #232]	; (8001848 <ETH_SetMACConfig+0x234>)
 800175e:	4013      	ands	r3, r2
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	68f9      	ldr	r1, [r7, #12]
 8001766:	430b      	orrs	r3, r1
 8001768:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001770:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001776:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800177e:	2a00      	cmp	r2, #0
 8001780:	d101      	bne.n	8001786 <ETH_SetMACConfig+0x172>
 8001782:	2280      	movs	r2, #128	; 0x80
 8001784:	e000      	b.n	8001788 <ETH_SetMACConfig+0x174>
 8001786:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001788:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800178e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001790:	4313      	orrs	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800179a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800179e:	4013      	ands	r3, r2
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	6812      	ldr	r2, [r2, #0]
 80017a4:	68f9      	ldr	r1, [r7, #12]
 80017a6:	430b      	orrs	r3, r1
 80017a8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80017b0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80017b8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80017ba:	4313      	orrs	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c6:	f023 0103 	bic.w	r1, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80017de:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80017fa:	2a00      	cmp	r2, #0
 80017fc:	d101      	bne.n	8001802 <ETH_SetMACConfig+0x1ee>
 80017fe:	2240      	movs	r2, #64	; 0x40
 8001800:	e000      	b.n	8001804 <ETH_SetMACConfig+0x1f0>
 8001802:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001804:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800180c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800180e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001816:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001818:	4313      	orrs	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001824:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	430a      	orrs	r2, r1
 8001830:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	00048083 	.word	0x00048083
 8001844:	c0f88000 	.word	0xc0f88000
 8001848:	fffffef0 	.word	0xfffffef0

0800184c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b38      	ldr	r3, [pc, #224]	; (8001944 <ETH_SetDMAConfig+0xf8>)
 8001862:	4013      	ands	r3, r2
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	6811      	ldr	r1, [r2, #0]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	430b      	orrs	r3, r1
 800186e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001872:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	791b      	ldrb	r3, [r3, #4]
 8001878:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800187e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	7b1b      	ldrb	r3, [r3, #12]
 8001884:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001886:	4313      	orrs	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <ETH_SetDMAConfig+0xfc>)
 8001896:	4013      	ands	r3, r2
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	68f9      	ldr	r1, [r7, #12]
 800189e:	430b      	orrs	r3, r1
 80018a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018a4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	7b5b      	ldrb	r3, [r3, #13]
 80018aa:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80018b0:	4313      	orrs	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018bc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80018c0:	4b22      	ldr	r3, [pc, #136]	; (800194c <ETH_SetDMAConfig+0x100>)
 80018c2:	4013      	ands	r3, r2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	68f9      	ldr	r1, [r7, #12]
 80018ca:	430b      	orrs	r3, r1
 80018cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018d0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	7d1b      	ldrb	r3, [r3, #20]
 80018dc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80018de:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	7f5b      	ldrb	r3, [r3, #29]
 80018e4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018f2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80018f6:	4b16      	ldr	r3, [pc, #88]	; (8001950 <ETH_SetDMAConfig+0x104>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6812      	ldr	r2, [r2, #0]
 80018fe:	68f9      	ldr	r1, [r7, #12]
 8001900:	430b      	orrs	r3, r1
 8001902:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001906:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	7f1b      	ldrb	r3, [r3, #28]
 800190e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001914:	4313      	orrs	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001920:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <ETH_SetDMAConfig+0x108>)
 8001926:	4013      	ands	r3, r2
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	68f9      	ldr	r1, [r7, #12]
 800192e:	430b      	orrs	r3, r1
 8001930:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001934:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	ffff87fd 	.word	0xffff87fd
 8001948:	ffff2ffe 	.word	0xffff2ffe
 800194c:	fffec000 	.word	0xfffec000
 8001950:	ffc0efef 	.word	0xffc0efef
 8001954:	7fc0ffff 	.word	0x7fc0ffff

08001958 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b0a4      	sub	sp, #144	; 0x90
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001960:	2301      	movs	r3, #1
 8001962:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001966:	2300      	movs	r3, #0
 8001968:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001970:	2300      	movs	r3, #0
 8001972:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001976:	2301      	movs	r3, #1
 8001978:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800197c:	2301      	movs	r3, #1
 800197e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001982:	2301      	movs	r3, #1
 8001984:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800198e:	2301      	movs	r3, #1
 8001990:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001998:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80019b0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80019b4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80019bc:	2300      	movs	r3, #0
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80019c0:	2301      	movs	r3, #1
 80019c2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80019d2:	2300      	movs	r3, #0
 80019d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80019da:	2300      	movs	r3, #0
 80019dc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80019ea:	2301      	movs	r3, #1
 80019ec:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80019f0:	2320      	movs	r3, #32
 80019f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80019f6:	2301      	movs	r3, #1
 80019f8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001a02:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001a08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a0c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001a14:	2302      	movs	r3, #2
 8001a16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001a32:	2300      	movs	r3, #0
 8001a34:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001a36:	2301      	movs	r3, #1
 8001a38:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a40:	4619      	mov	r1, r3
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff fde6 	bl	8001614 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a62:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a66:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a70:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001a78:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001a7e:	f107 0308 	add.w	r3, r7, #8
 8001a82:	4619      	mov	r1, r3
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff fee1 	bl	800184c <ETH_SetDMAConfig>
}
 8001a8a:	bf00      	nop
 8001a8c:	3790      	adds	r7, #144	; 0x90
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b085      	sub	sp, #20
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	e01d      	b.n	8001adc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68d9      	ldr	r1, [r3, #12]
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	440b      	add	r3, r1
 8001ab0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2200      	movs	r2, #0
 8001abc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001aca:	68b9      	ldr	r1, [r7, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	3206      	adds	r2, #6
 8001ad2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d9de      	bls.n	8001aa0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af0:	461a      	mov	r2, r3
 8001af2:	2303      	movs	r3, #3
 8001af4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b04:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b14:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	e023      	b.n	8001b7a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6919      	ldr	r1, [r3, #16]
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	440b      	add	r3, r1
 8001b42:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	2200      	movs	r2, #0
 8001b66:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	3212      	adds	r2, #18
 8001b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	3301      	adds	r3, #1
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d9d8      	bls.n	8001b32 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	2303      	movs	r3, #3
 8001baa:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691a      	ldr	r2, [r3, #16]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bba:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bce:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	; 0x24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001bee:	4b89      	ldr	r3, [pc, #548]	; (8001e14 <HAL_GPIO_Init+0x234>)
 8001bf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001bf2:	e194      	b.n	8001f1e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001c00:	4013      	ands	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 8186 	beq.w	8001f18 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d005      	beq.n	8001c24 <HAL_GPIO_Init+0x44>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d130      	bne.n	8001c86 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	2203      	movs	r2, #3
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	091b      	lsrs	r3, r3, #4
 8001c70:	f003 0201 	and.w	r2, r3, #1
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	d017      	beq.n	8001cc2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d123      	bne.n	8001d16 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	08da      	lsrs	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3208      	adds	r2, #8
 8001cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	220f      	movs	r2, #15
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	691a      	ldr	r2, [r3, #16]
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	08da      	lsrs	r2, r3, #3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3208      	adds	r2, #8
 8001d10:	69b9      	ldr	r1, [r7, #24]
 8001d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	2203      	movs	r2, #3
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 0203 	and.w	r2, r3, #3
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 80e0 	beq.w	8001f18 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d58:	4b2f      	ldr	r3, [pc, #188]	; (8001e18 <HAL_GPIO_Init+0x238>)
 8001d5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d5e:	4a2e      	ldr	r2, [pc, #184]	; (8001e18 <HAL_GPIO_Init+0x238>)
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d68:	4b2b      	ldr	r3, [pc, #172]	; (8001e18 <HAL_GPIO_Init+0x238>)
 8001d6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d76:	4a29      	ldr	r2, [pc, #164]	; (8001e1c <HAL_GPIO_Init+0x23c>)
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	089b      	lsrs	r3, r3, #2
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	220f      	movs	r2, #15
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a20      	ldr	r2, [pc, #128]	; (8001e20 <HAL_GPIO_Init+0x240>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d052      	beq.n	8001e48 <HAL_GPIO_Init+0x268>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a1f      	ldr	r2, [pc, #124]	; (8001e24 <HAL_GPIO_Init+0x244>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d031      	beq.n	8001e0e <HAL_GPIO_Init+0x22e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a1e      	ldr	r2, [pc, #120]	; (8001e28 <HAL_GPIO_Init+0x248>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d02b      	beq.n	8001e0a <HAL_GPIO_Init+0x22a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a1d      	ldr	r2, [pc, #116]	; (8001e2c <HAL_GPIO_Init+0x24c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d025      	beq.n	8001e06 <HAL_GPIO_Init+0x226>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a1c      	ldr	r2, [pc, #112]	; (8001e30 <HAL_GPIO_Init+0x250>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d01f      	beq.n	8001e02 <HAL_GPIO_Init+0x222>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a1b      	ldr	r2, [pc, #108]	; (8001e34 <HAL_GPIO_Init+0x254>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d019      	beq.n	8001dfe <HAL_GPIO_Init+0x21e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a1a      	ldr	r2, [pc, #104]	; (8001e38 <HAL_GPIO_Init+0x258>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d013      	beq.n	8001dfa <HAL_GPIO_Init+0x21a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a19      	ldr	r2, [pc, #100]	; (8001e3c <HAL_GPIO_Init+0x25c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d00d      	beq.n	8001df6 <HAL_GPIO_Init+0x216>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <HAL_GPIO_Init+0x260>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d007      	beq.n	8001df2 <HAL_GPIO_Init+0x212>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a17      	ldr	r2, [pc, #92]	; (8001e44 <HAL_GPIO_Init+0x264>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d101      	bne.n	8001dee <HAL_GPIO_Init+0x20e>
 8001dea:	2309      	movs	r3, #9
 8001dec:	e02d      	b.n	8001e4a <HAL_GPIO_Init+0x26a>
 8001dee:	230a      	movs	r3, #10
 8001df0:	e02b      	b.n	8001e4a <HAL_GPIO_Init+0x26a>
 8001df2:	2308      	movs	r3, #8
 8001df4:	e029      	b.n	8001e4a <HAL_GPIO_Init+0x26a>
 8001df6:	2307      	movs	r3, #7
 8001df8:	e027      	b.n	8001e4a <HAL_GPIO_Init+0x26a>
 8001dfa:	2306      	movs	r3, #6
 8001dfc:	e025      	b.n	8001e4a <HAL_GPIO_Init+0x26a>
 8001dfe:	2305      	movs	r3, #5
 8001e00:	e023      	b.n	8001e4a <HAL_GPIO_Init+0x26a>
 8001e02:	2304      	movs	r3, #4
 8001e04:	e021      	b.n	8001e4a <HAL_GPIO_Init+0x26a>
 8001e06:	2303      	movs	r3, #3
 8001e08:	e01f      	b.n	8001e4a <HAL_GPIO_Init+0x26a>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e01d      	b.n	8001e4a <HAL_GPIO_Init+0x26a>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e01b      	b.n	8001e4a <HAL_GPIO_Init+0x26a>
 8001e12:	bf00      	nop
 8001e14:	58000080 	.word	0x58000080
 8001e18:	58024400 	.word	0x58024400
 8001e1c:	58000400 	.word	0x58000400
 8001e20:	58020000 	.word	0x58020000
 8001e24:	58020400 	.word	0x58020400
 8001e28:	58020800 	.word	0x58020800
 8001e2c:	58020c00 	.word	0x58020c00
 8001e30:	58021000 	.word	0x58021000
 8001e34:	58021400 	.word	0x58021400
 8001e38:	58021800 	.word	0x58021800
 8001e3c:	58021c00 	.word	0x58021c00
 8001e40:	58022000 	.word	0x58022000
 8001e44:	58022400 	.word	0x58022400
 8001e48:	2300      	movs	r3, #0
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	f002 0203 	and.w	r2, r2, #3
 8001e50:	0092      	lsls	r2, r2, #2
 8001e52:	4093      	lsls	r3, r2
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e5a:	4938      	ldr	r1, [pc, #224]	; (8001f3c <HAL_GPIO_Init+0x35c>)
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	089b      	lsrs	r3, r3, #2
 8001e60:	3302      	adds	r3, #2
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ebc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f47f ae63 	bne.w	8001bf4 <HAL_GPIO_Init+0x14>
  }
}
 8001f2e:	bf00      	nop
 8001f30:	bf00      	nop
 8001f32:	3724      	adds	r7, #36	; 0x24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	58000400 	.word	0x58000400

08001f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	807b      	strh	r3, [r7, #2]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f50:	787b      	ldrb	r3, [r7, #1]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f56:	887a      	ldrh	r2, [r7, #2]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f5c:	e003      	b.n	8001f66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f5e:	887b      	ldrh	r3, [r7, #2]
 8001f60:	041a      	lsls	r2, r3, #16
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	619a      	str	r2, [r3, #24]
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001f7c:	4a08      	ldr	r2, [pc, #32]	; (8001fa0 <HAL_HSEM_FastTake+0x2c>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3320      	adds	r3, #32
 8001f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f86:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <HAL_HSEM_FastTake+0x30>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d101      	bne.n	8001f90 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e000      	b.n	8001f92 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	58026400 	.word	0x58026400
 8001fa4:	80000300 	.word	0x80000300

08001fa8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001fb2:	4906      	ldr	r1, [pc, #24]	; (8001fcc <HAL_HSEM_Release+0x24>)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	58026400 	.word	0x58026400

08001fd0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fd2:	b08f      	sub	sp, #60	; 0x3c
 8001fd4:	af0a      	add	r7, sp, #40	; 0x28
 8001fd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e116      	b.n	8002210 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d106      	bne.n	8002002 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7fe ff31 	bl	8000e64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2203      	movs	r2, #3
 8002006:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002012:	2b00      	cmp	r3, #0
 8002014:	d102      	bne.n	800201c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f004 f8dd 	bl	80061e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	687e      	ldr	r6, [r7, #4]
 800202e:	466d      	mov	r5, sp
 8002030:	f106 0410 	add.w	r4, r6, #16
 8002034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002036:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002038:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800203a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800203c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002040:	e885 0003 	stmia.w	r5, {r0, r1}
 8002044:	1d33      	adds	r3, r6, #4
 8002046:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002048:	6838      	ldr	r0, [r7, #0]
 800204a:	f004 f85b 	bl	8006104 <USB_CoreInit>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2202      	movs	r2, #2
 8002058:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0d7      	b.n	8002210 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f004 f8cb 	bl	8006202 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800206c:	2300      	movs	r3, #0
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	e04a      	b.n	8002108 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002072:	7bfa      	ldrb	r2, [r7, #15]
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	333d      	adds	r3, #61	; 0x3d
 8002082:	2201      	movs	r2, #1
 8002084:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002086:	7bfa      	ldrb	r2, [r7, #15]
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	333c      	adds	r3, #60	; 0x3c
 8002096:	7bfa      	ldrb	r2, [r7, #15]
 8002098:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	b298      	uxth	r0, r3
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	3356      	adds	r3, #86	; 0x56
 80020ae:	4602      	mov	r2, r0
 80020b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020b2:	7bfa      	ldrb	r2, [r7, #15]
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4413      	add	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	3340      	adds	r3, #64	; 0x40
 80020c2:	2200      	movs	r2, #0
 80020c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4413      	add	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	3344      	adds	r3, #68	; 0x44
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020da:	7bfa      	ldrb	r2, [r7, #15]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	3348      	adds	r3, #72	; 0x48
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	334c      	adds	r3, #76	; 0x4c
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	3301      	adds	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	429a      	cmp	r2, r3
 8002110:	d3af      	bcc.n	8002072 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002112:	2300      	movs	r3, #0
 8002114:	73fb      	strb	r3, [r7, #15]
 8002116:	e044      	b.n	80021a2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800212e:	7bfa      	ldrb	r2, [r7, #15]
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002140:	7bfa      	ldrb	r2, [r7, #15]
 8002142:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800215a:	7bfa      	ldrb	r2, [r7, #15]
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4413      	add	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	440b      	add	r3, r1
 8002168:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002170:	7bfa      	ldrb	r2, [r7, #15]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002186:	7bfa      	ldrb	r2, [r7, #15]
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	440b      	add	r3, r1
 8002194:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	3301      	adds	r3, #1
 80021a0:	73fb      	strb	r3, [r7, #15]
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d3b5      	bcc.n	8002118 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	603b      	str	r3, [r7, #0]
 80021b2:	687e      	ldr	r6, [r7, #4]
 80021b4:	466d      	mov	r5, sp
 80021b6:	f106 0410 	add.w	r4, r6, #16
 80021ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80021ca:	1d33      	adds	r3, r6, #4
 80021cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021ce:	6838      	ldr	r0, [r7, #0]
 80021d0:	f004 f864 	bl	800629c <USB_DevInit>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d005      	beq.n	80021e6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2202      	movs	r2, #2
 80021de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e014      	b.n	8002210 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d102      	bne.n	8002204 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f80a 	bl	8002218 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f004 fa22 	bl	8006652 <USB_DevDisconnect>

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002218 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002246:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_PCDEx_ActivateLPM+0x44>)
 8002248:	4313      	orrs	r3, r2
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	10000003 	.word	0x10000003

08002260 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002268:	4b29      	ldr	r3, [pc, #164]	; (8002310 <HAL_PWREx_ConfigSupply+0xb0>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	2b06      	cmp	r3, #6
 8002272:	d00a      	beq.n	800228a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002274:	4b26      	ldr	r3, [pc, #152]	; (8002310 <HAL_PWREx_ConfigSupply+0xb0>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	429a      	cmp	r2, r3
 8002280:	d001      	beq.n	8002286 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e040      	b.n	8002308 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	e03e      	b.n	8002308 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800228a:	4b21      	ldr	r3, [pc, #132]	; (8002310 <HAL_PWREx_ConfigSupply+0xb0>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002292:	491f      	ldr	r1, [pc, #124]	; (8002310 <HAL_PWREx_ConfigSupply+0xb0>)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4313      	orrs	r3, r2
 8002298:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800229a:	f7fe ff49 	bl	8001130 <HAL_GetTick>
 800229e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022a0:	e009      	b.n	80022b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022a2:	f7fe ff45 	bl	8001130 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022b0:	d901      	bls.n	80022b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e028      	b.n	8002308 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022b6:	4b16      	ldr	r3, [pc, #88]	; (8002310 <HAL_PWREx_ConfigSupply+0xb0>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022c2:	d1ee      	bne.n	80022a2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b1e      	cmp	r3, #30
 80022c8:	d008      	beq.n	80022dc <HAL_PWREx_ConfigSupply+0x7c>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b2e      	cmp	r3, #46	; 0x2e
 80022ce:	d005      	beq.n	80022dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b1d      	cmp	r3, #29
 80022d4:	d002      	beq.n	80022dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b2d      	cmp	r3, #45	; 0x2d
 80022da:	d114      	bne.n	8002306 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80022dc:	f7fe ff28 	bl	8001130 <HAL_GetTick>
 80022e0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80022e2:	e009      	b.n	80022f8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022e4:	f7fe ff24 	bl	8001130 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022f2:	d901      	bls.n	80022f8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e007      	b.n	8002308 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80022f8:	4b05      	ldr	r3, [pc, #20]	; (8002310 <HAL_PWREx_ConfigSupply+0xb0>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002304:	d1ee      	bne.n	80022e4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	58024800 	.word	0x58024800

08002314 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4a04      	ldr	r2, [pc, #16]	; (8002330 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800231e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002322:	60d3      	str	r3, [r2, #12]
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	58024800 	.word	0x58024800

08002334 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08c      	sub	sp, #48	; 0x30
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d102      	bne.n	8002348 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	f000 bc48 	b.w	8002bd8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 8088 	beq.w	8002466 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002356:	4b99      	ldr	r3, [pc, #612]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002360:	4b96      	ldr	r3, [pc, #600]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002368:	2b10      	cmp	r3, #16
 800236a:	d007      	beq.n	800237c <HAL_RCC_OscConfig+0x48>
 800236c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236e:	2b18      	cmp	r3, #24
 8002370:	d111      	bne.n	8002396 <HAL_RCC_OscConfig+0x62>
 8002372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d10c      	bne.n	8002396 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	4b8f      	ldr	r3, [pc, #572]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d06d      	beq.n	8002464 <HAL_RCC_OscConfig+0x130>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d169      	bne.n	8002464 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	f000 bc21 	b.w	8002bd8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239e:	d106      	bne.n	80023ae <HAL_RCC_OscConfig+0x7a>
 80023a0:	4b86      	ldr	r3, [pc, #536]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a85      	ldr	r2, [pc, #532]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 80023a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	e02e      	b.n	800240c <HAL_RCC_OscConfig+0xd8>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x9c>
 80023b6:	4b81      	ldr	r3, [pc, #516]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a80      	ldr	r2, [pc, #512]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 80023bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b7e      	ldr	r3, [pc, #504]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a7d      	ldr	r2, [pc, #500]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 80023c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e01d      	b.n	800240c <HAL_RCC_OscConfig+0xd8>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023d8:	d10c      	bne.n	80023f4 <HAL_RCC_OscConfig+0xc0>
 80023da:	4b78      	ldr	r3, [pc, #480]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a77      	ldr	r2, [pc, #476]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 80023e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	4b75      	ldr	r3, [pc, #468]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a74      	ldr	r2, [pc, #464]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 80023ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	e00b      	b.n	800240c <HAL_RCC_OscConfig+0xd8>
 80023f4:	4b71      	ldr	r3, [pc, #452]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a70      	ldr	r2, [pc, #448]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 80023fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	4b6e      	ldr	r3, [pc, #440]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a6d      	ldr	r2, [pc, #436]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 8002406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800240a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d013      	beq.n	800243c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7fe fe8c 	bl	8001130 <HAL_GetTick>
 8002418:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800241c:	f7fe fe88 	bl	8001130 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	; 0x64
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e3d4      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800242e:	4b63      	ldr	r3, [pc, #396]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0xe8>
 800243a:	e014      	b.n	8002466 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7fe fe78 	bl	8001130 <HAL_GetTick>
 8002440:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002444:	f7fe fe74 	bl	8001130 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b64      	cmp	r3, #100	; 0x64
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e3c0      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002456:	4b59      	ldr	r3, [pc, #356]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x110>
 8002462:	e000      	b.n	8002466 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 80ca 	beq.w	8002608 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002474:	4b51      	ldr	r3, [pc, #324]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800247c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800247e:	4b4f      	ldr	r3, [pc, #316]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d007      	beq.n	800249a <HAL_RCC_OscConfig+0x166>
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	2b18      	cmp	r3, #24
 800248e:	d156      	bne.n	800253e <HAL_RCC_OscConfig+0x20a>
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d151      	bne.n	800253e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800249a:	4b48      	ldr	r3, [pc, #288]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d005      	beq.n	80024b2 <HAL_RCC_OscConfig+0x17e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e392      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024b2:	4b42      	ldr	r3, [pc, #264]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 0219 	bic.w	r2, r3, #25
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	493f      	ldr	r1, [pc, #252]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c4:	f7fe fe34 	bl	8001130 <HAL_GetTick>
 80024c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024cc:	f7fe fe30 	bl	8001130 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e37c      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024de:	4b37      	ldr	r3, [pc, #220]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ea:	f7fe fe51 	bl	8001190 <HAL_GetREVID>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d817      	bhi.n	8002528 <HAL_RCC_OscConfig+0x1f4>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	2b40      	cmp	r3, #64	; 0x40
 80024fe:	d108      	bne.n	8002512 <HAL_RCC_OscConfig+0x1de>
 8002500:	4b2e      	ldr	r3, [pc, #184]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002508:	4a2c      	ldr	r2, [pc, #176]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 800250a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800250e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002510:	e07a      	b.n	8002608 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002512:	4b2a      	ldr	r3, [pc, #168]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	031b      	lsls	r3, r3, #12
 8002520:	4926      	ldr	r1, [pc, #152]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 8002522:	4313      	orrs	r3, r2
 8002524:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002526:	e06f      	b.n	8002608 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002528:	4b24      	ldr	r3, [pc, #144]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	061b      	lsls	r3, r3, #24
 8002536:	4921      	ldr	r1, [pc, #132]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800253c:	e064      	b.n	8002608 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d047      	beq.n	80025d6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002546:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 0219 	bic.w	r2, r3, #25
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	491a      	ldr	r1, [pc, #104]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 8002554:	4313      	orrs	r3, r2
 8002556:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002558:	f7fe fdea 	bl	8001130 <HAL_GetTick>
 800255c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002560:	f7fe fde6 	bl	8001130 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e332      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002572:	4b12      	ldr	r3, [pc, #72]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257e:	f7fe fe07 	bl	8001190 <HAL_GetREVID>
 8002582:	4603      	mov	r3, r0
 8002584:	f241 0203 	movw	r2, #4099	; 0x1003
 8002588:	4293      	cmp	r3, r2
 800258a:	d819      	bhi.n	80025c0 <HAL_RCC_OscConfig+0x28c>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	2b40      	cmp	r3, #64	; 0x40
 8002592:	d108      	bne.n	80025a6 <HAL_RCC_OscConfig+0x272>
 8002594:	4b09      	ldr	r3, [pc, #36]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800259c:	4a07      	ldr	r2, [pc, #28]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 800259e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a2:	6053      	str	r3, [r2, #4]
 80025a4:	e030      	b.n	8002608 <HAL_RCC_OscConfig+0x2d4>
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	031b      	lsls	r3, r3, #12
 80025b4:	4901      	ldr	r1, [pc, #4]	; (80025bc <HAL_RCC_OscConfig+0x288>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	604b      	str	r3, [r1, #4]
 80025ba:	e025      	b.n	8002608 <HAL_RCC_OscConfig+0x2d4>
 80025bc:	58024400 	.word	0x58024400
 80025c0:	4b9a      	ldr	r3, [pc, #616]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	061b      	lsls	r3, r3, #24
 80025ce:	4997      	ldr	r1, [pc, #604]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]
 80025d4:	e018      	b.n	8002608 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d6:	4b95      	ldr	r3, [pc, #596]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a94      	ldr	r2, [pc, #592]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 80025dc:	f023 0301 	bic.w	r3, r3, #1
 80025e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e2:	f7fe fda5 	bl	8001130 <HAL_GetTick>
 80025e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ea:	f7fe fda1 	bl	8001130 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e2ed      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025fc:	4b8b      	ldr	r3, [pc, #556]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f0      	bne.n	80025ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 80a9 	beq.w	8002768 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002616:	4b85      	ldr	r3, [pc, #532]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800261e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002620:	4b82      	ldr	r3, [pc, #520]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	2b08      	cmp	r3, #8
 800262a:	d007      	beq.n	800263c <HAL_RCC_OscConfig+0x308>
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	2b18      	cmp	r3, #24
 8002630:	d13a      	bne.n	80026a8 <HAL_RCC_OscConfig+0x374>
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	2b01      	cmp	r3, #1
 800263a:	d135      	bne.n	80026a8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800263c:	4b7b      	ldr	r3, [pc, #492]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_RCC_OscConfig+0x320>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	2b80      	cmp	r3, #128	; 0x80
 800264e:	d001      	beq.n	8002654 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e2c1      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002654:	f7fe fd9c 	bl	8001190 <HAL_GetREVID>
 8002658:	4603      	mov	r3, r0
 800265a:	f241 0203 	movw	r2, #4099	; 0x1003
 800265e:	4293      	cmp	r3, r2
 8002660:	d817      	bhi.n	8002692 <HAL_RCC_OscConfig+0x35e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	2b20      	cmp	r3, #32
 8002668:	d108      	bne.n	800267c <HAL_RCC_OscConfig+0x348>
 800266a:	4b70      	ldr	r3, [pc, #448]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002672:	4a6e      	ldr	r2, [pc, #440]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 8002674:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002678:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800267a:	e075      	b.n	8002768 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800267c:	4b6b      	ldr	r3, [pc, #428]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	069b      	lsls	r3, r3, #26
 800268a:	4968      	ldr	r1, [pc, #416]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002690:	e06a      	b.n	8002768 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002692:	4b66      	ldr	r3, [pc, #408]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	061b      	lsls	r3, r3, #24
 80026a0:	4962      	ldr	r1, [pc, #392]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026a6:	e05f      	b.n	8002768 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d042      	beq.n	8002736 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80026b0:	4b5e      	ldr	r3, [pc, #376]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a5d      	ldr	r2, [pc, #372]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 80026b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7fe fd38 	bl	8001130 <HAL_GetTick>
 80026c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026c4:	f7fe fd34 	bl	8001130 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e280      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026d6:	4b55      	ldr	r3, [pc, #340]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0f0      	beq.n	80026c4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026e2:	f7fe fd55 	bl	8001190 <HAL_GetREVID>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d817      	bhi.n	8002720 <HAL_RCC_OscConfig+0x3ec>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	2b20      	cmp	r3, #32
 80026f6:	d108      	bne.n	800270a <HAL_RCC_OscConfig+0x3d6>
 80026f8:	4b4c      	ldr	r3, [pc, #304]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002700:	4a4a      	ldr	r2, [pc, #296]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 8002702:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002706:	6053      	str	r3, [r2, #4]
 8002708:	e02e      	b.n	8002768 <HAL_RCC_OscConfig+0x434>
 800270a:	4b48      	ldr	r3, [pc, #288]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	069b      	lsls	r3, r3, #26
 8002718:	4944      	ldr	r1, [pc, #272]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 800271a:	4313      	orrs	r3, r2
 800271c:	604b      	str	r3, [r1, #4]
 800271e:	e023      	b.n	8002768 <HAL_RCC_OscConfig+0x434>
 8002720:	4b42      	ldr	r3, [pc, #264]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	061b      	lsls	r3, r3, #24
 800272e:	493f      	ldr	r1, [pc, #252]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 8002730:	4313      	orrs	r3, r2
 8002732:	60cb      	str	r3, [r1, #12]
 8002734:	e018      	b.n	8002768 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002736:	4b3d      	ldr	r3, [pc, #244]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a3c      	ldr	r2, [pc, #240]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 800273c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002742:	f7fe fcf5 	bl	8001130 <HAL_GetTick>
 8002746:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800274a:	f7fe fcf1 	bl	8001130 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e23d      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800275c:	4b33      	ldr	r3, [pc, #204]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1f0      	bne.n	800274a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b00      	cmp	r3, #0
 8002772:	d036      	beq.n	80027e2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d019      	beq.n	80027b0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800277c:	4b2b      	ldr	r3, [pc, #172]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 800277e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002780:	4a2a      	ldr	r2, [pc, #168]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002788:	f7fe fcd2 	bl	8001130 <HAL_GetTick>
 800278c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002790:	f7fe fcce 	bl	8001130 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e21a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027a2:	4b22      	ldr	r3, [pc, #136]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 80027a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x45c>
 80027ae:	e018      	b.n	80027e2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b0:	4b1e      	ldr	r3, [pc, #120]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 80027b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b4:	4a1d      	ldr	r2, [pc, #116]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 80027b6:	f023 0301 	bic.w	r3, r3, #1
 80027ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027bc:	f7fe fcb8 	bl	8001130 <HAL_GetTick>
 80027c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c4:	f7fe fcb4 	bl	8001130 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e200      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 80027d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0320 	and.w	r3, r3, #32
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d039      	beq.n	8002862 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d01c      	beq.n	8002830 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027f6:	4b0d      	ldr	r3, [pc, #52]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a0c      	ldr	r2, [pc, #48]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 80027fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002800:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002802:	f7fe fc95 	bl	8001130 <HAL_GetTick>
 8002806:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800280a:	f7fe fc91 	bl	8001130 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e1dd      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800281c:	4b03      	ldr	r3, [pc, #12]	; (800282c <HAL_RCC_OscConfig+0x4f8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x4d6>
 8002828:	e01b      	b.n	8002862 <HAL_RCC_OscConfig+0x52e>
 800282a:	bf00      	nop
 800282c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002830:	4b9b      	ldr	r3, [pc, #620]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a9a      	ldr	r2, [pc, #616]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800283a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800283c:	f7fe fc78 	bl	8001130 <HAL_GetTick>
 8002840:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002844:	f7fe fc74 	bl	8001130 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e1c0      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002856:	4b92      	ldr	r3, [pc, #584]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 8081 	beq.w	8002972 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002870:	4b8c      	ldr	r3, [pc, #560]	; (8002aa4 <HAL_RCC_OscConfig+0x770>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a8b      	ldr	r2, [pc, #556]	; (8002aa4 <HAL_RCC_OscConfig+0x770>)
 8002876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800287c:	f7fe fc58 	bl	8001130 <HAL_GetTick>
 8002880:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002884:	f7fe fc54 	bl	8001130 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	; 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e1a0      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002896:	4b83      	ldr	r3, [pc, #524]	; (8002aa4 <HAL_RCC_OscConfig+0x770>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d106      	bne.n	80028b8 <HAL_RCC_OscConfig+0x584>
 80028aa:	4b7d      	ldr	r3, [pc, #500]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80028ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ae:	4a7c      	ldr	r2, [pc, #496]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	6713      	str	r3, [r2, #112]	; 0x70
 80028b6:	e02d      	b.n	8002914 <HAL_RCC_OscConfig+0x5e0>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10c      	bne.n	80028da <HAL_RCC_OscConfig+0x5a6>
 80028c0:	4b77      	ldr	r3, [pc, #476]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80028c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c4:	4a76      	ldr	r2, [pc, #472]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80028c6:	f023 0301 	bic.w	r3, r3, #1
 80028ca:	6713      	str	r3, [r2, #112]	; 0x70
 80028cc:	4b74      	ldr	r3, [pc, #464]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80028ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d0:	4a73      	ldr	r2, [pc, #460]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80028d2:	f023 0304 	bic.w	r3, r3, #4
 80028d6:	6713      	str	r3, [r2, #112]	; 0x70
 80028d8:	e01c      	b.n	8002914 <HAL_RCC_OscConfig+0x5e0>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2b05      	cmp	r3, #5
 80028e0:	d10c      	bne.n	80028fc <HAL_RCC_OscConfig+0x5c8>
 80028e2:	4b6f      	ldr	r3, [pc, #444]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80028e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e6:	4a6e      	ldr	r2, [pc, #440]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80028e8:	f043 0304 	orr.w	r3, r3, #4
 80028ec:	6713      	str	r3, [r2, #112]	; 0x70
 80028ee:	4b6c      	ldr	r3, [pc, #432]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80028f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f2:	4a6b      	ldr	r2, [pc, #428]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	6713      	str	r3, [r2, #112]	; 0x70
 80028fa:	e00b      	b.n	8002914 <HAL_RCC_OscConfig+0x5e0>
 80028fc:	4b68      	ldr	r3, [pc, #416]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80028fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002900:	4a67      	ldr	r2, [pc, #412]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002902:	f023 0301 	bic.w	r3, r3, #1
 8002906:	6713      	str	r3, [r2, #112]	; 0x70
 8002908:	4b65      	ldr	r3, [pc, #404]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 800290a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290c:	4a64      	ldr	r2, [pc, #400]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 800290e:	f023 0304 	bic.w	r3, r3, #4
 8002912:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d015      	beq.n	8002948 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291c:	f7fe fc08 	bl	8001130 <HAL_GetTick>
 8002920:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002922:	e00a      	b.n	800293a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002924:	f7fe fc04 	bl	8001130 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002932:	4293      	cmp	r3, r2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e14e      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800293a:	4b59      	ldr	r3, [pc, #356]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0ee      	beq.n	8002924 <HAL_RCC_OscConfig+0x5f0>
 8002946:	e014      	b.n	8002972 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002948:	f7fe fbf2 	bl	8001130 <HAL_GetTick>
 800294c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800294e:	e00a      	b.n	8002966 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002950:	f7fe fbee 	bl	8001130 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	; 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e138      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002966:	4b4e      	ldr	r3, [pc, #312]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1ee      	bne.n	8002950 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 812d 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800297c:	4b48      	ldr	r3, [pc, #288]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002984:	2b18      	cmp	r3, #24
 8002986:	f000 80bd 	beq.w	8002b04 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	2b02      	cmp	r3, #2
 8002990:	f040 809e 	bne.w	8002ad0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002994:	4b42      	ldr	r3, [pc, #264]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a41      	ldr	r2, [pc, #260]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 800299a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800299e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a0:	f7fe fbc6 	bl	8001130 <HAL_GetTick>
 80029a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a8:	f7fe fbc2 	bl	8001130 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e10e      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ba:	4b39      	ldr	r3, [pc, #228]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029c6:	4b36      	ldr	r3, [pc, #216]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80029c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ca:	4b37      	ldr	r3, [pc, #220]	; (8002aa8 <HAL_RCC_OscConfig+0x774>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029d6:	0112      	lsls	r2, r2, #4
 80029d8:	430a      	orrs	r2, r1
 80029da:	4931      	ldr	r1, [pc, #196]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	628b      	str	r3, [r1, #40]	; 0x28
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	3b01      	subs	r3, #1
 80029e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ee:	3b01      	subs	r3, #1
 80029f0:	025b      	lsls	r3, r3, #9
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fa:	3b01      	subs	r3, #1
 80029fc:	041b      	lsls	r3, r3, #16
 80029fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	061b      	lsls	r3, r3, #24
 8002a0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002a10:	4923      	ldr	r1, [pc, #140]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a16:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	4a21      	ldr	r2, [pc, #132]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a1c:	f023 0301 	bic.w	r3, r3, #1
 8002a20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a22:	4b1f      	ldr	r3, [pc, #124]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a26:	4b21      	ldr	r3, [pc, #132]	; (8002aac <HAL_RCC_OscConfig+0x778>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a2e:	00d2      	lsls	r2, r2, #3
 8002a30:	491b      	ldr	r1, [pc, #108]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a36:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3a:	f023 020c 	bic.w	r2, r3, #12
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	4917      	ldr	r1, [pc, #92]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a48:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	f023 0202 	bic.w	r2, r3, #2
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	4912      	ldr	r1, [pc, #72]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a5a:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	4a10      	ldr	r2, [pc, #64]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a66:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6a:	4a0d      	ldr	r2, [pc, #52]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a72:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a7e:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a82:	4a07      	ldr	r2, [pc, #28]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <HAL_RCC_OscConfig+0x76c>)
 8002a90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a96:	f7fe fb4b 	bl	8001130 <HAL_GetTick>
 8002a9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a9c:	e011      	b.n	8002ac2 <HAL_RCC_OscConfig+0x78e>
 8002a9e:	bf00      	nop
 8002aa0:	58024400 	.word	0x58024400
 8002aa4:	58024800 	.word	0x58024800
 8002aa8:	fffffc0c 	.word	0xfffffc0c
 8002aac:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7fe fb3e 	bl	8001130 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e08a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ac2:	4b47      	ldr	r3, [pc, #284]	; (8002be0 <HAL_RCC_OscConfig+0x8ac>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x77c>
 8002ace:	e082      	b.n	8002bd6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad0:	4b43      	ldr	r3, [pc, #268]	; (8002be0 <HAL_RCC_OscConfig+0x8ac>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a42      	ldr	r2, [pc, #264]	; (8002be0 <HAL_RCC_OscConfig+0x8ac>)
 8002ad6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe fb28 	bl	8001130 <HAL_GetTick>
 8002ae0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae4:	f7fe fb24 	bl	8001130 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e070      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002af6:	4b3a      	ldr	r3, [pc, #232]	; (8002be0 <HAL_RCC_OscConfig+0x8ac>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x7b0>
 8002b02:	e068      	b.n	8002bd6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b04:	4b36      	ldr	r3, [pc, #216]	; (8002be0 <HAL_RCC_OscConfig+0x8ac>)
 8002b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b08:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b0a:	4b35      	ldr	r3, [pc, #212]	; (8002be0 <HAL_RCC_OscConfig+0x8ac>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d031      	beq.n	8002b7c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f003 0203 	and.w	r2, r3, #3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d12a      	bne.n	8002b7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d122      	bne.n	8002b7c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d11a      	bne.n	8002b7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	0a5b      	lsrs	r3, r3, #9
 8002b4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b52:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d111      	bne.n	8002b7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	0c1b      	lsrs	r3, r3, #16
 8002b5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b64:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d108      	bne.n	8002b7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	0e1b      	lsrs	r3, r3, #24
 8002b6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b76:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e02b      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b80:	4b17      	ldr	r3, [pc, #92]	; (8002be0 <HAL_RCC_OscConfig+0x8ac>)
 8002b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b84:	08db      	lsrs	r3, r3, #3
 8002b86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b8a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d01f      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b96:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <HAL_RCC_OscConfig+0x8ac>)
 8002b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9a:	4a11      	ldr	r2, [pc, #68]	; (8002be0 <HAL_RCC_OscConfig+0x8ac>)
 8002b9c:	f023 0301 	bic.w	r3, r3, #1
 8002ba0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ba2:	f7fe fac5 	bl	8001130 <HAL_GetTick>
 8002ba6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ba8:	bf00      	nop
 8002baa:	f7fe fac1 	bl	8001130 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d0f9      	beq.n	8002baa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <HAL_RCC_OscConfig+0x8ac>)
 8002bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bba:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <HAL_RCC_OscConfig+0x8b0>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bc2:	00d2      	lsls	r2, r2, #3
 8002bc4:	4906      	ldr	r1, [pc, #24]	; (8002be0 <HAL_RCC_OscConfig+0x8ac>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002bca:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <HAL_RCC_OscConfig+0x8ac>)
 8002bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bce:	4a04      	ldr	r2, [pc, #16]	; (8002be0 <HAL_RCC_OscConfig+0x8ac>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3730      	adds	r7, #48	; 0x30
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	58024400 	.word	0x58024400
 8002be4:	ffff0007 	.word	0xffff0007

08002be8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e19c      	b.n	8002f36 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b8a      	ldr	r3, [pc, #552]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d910      	bls.n	8002c2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b87      	ldr	r3, [pc, #540]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 020f 	bic.w	r2, r3, #15
 8002c12:	4985      	ldr	r1, [pc, #532]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1a:	4b83      	ldr	r3, [pc, #524]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e184      	b.n	8002f36 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d010      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	4b7b      	ldr	r3, [pc, #492]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d908      	bls.n	8002c5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c48:	4b78      	ldr	r3, [pc, #480]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	4975      	ldr	r1, [pc, #468]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d010      	beq.n	8002c88 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	4b70      	ldr	r3, [pc, #448]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d908      	bls.n	8002c88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c76:	4b6d      	ldr	r3, [pc, #436]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	496a      	ldr	r1, [pc, #424]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d010      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699a      	ldr	r2, [r3, #24]
 8002c98:	4b64      	ldr	r3, [pc, #400]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d908      	bls.n	8002cb6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ca4:	4b61      	ldr	r3, [pc, #388]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	495e      	ldr	r1, [pc, #376]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0320 	and.w	r3, r3, #32
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d010      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69da      	ldr	r2, [r3, #28]
 8002cc6:	4b59      	ldr	r3, [pc, #356]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d908      	bls.n	8002ce4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002cd2:	4b56      	ldr	r3, [pc, #344]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	4953      	ldr	r1, [pc, #332]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d010      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	4b4d      	ldr	r3, [pc, #308]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d908      	bls.n	8002d12 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d00:	4b4a      	ldr	r3, [pc, #296]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f023 020f 	bic.w	r2, r3, #15
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	4947      	ldr	r1, [pc, #284]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d055      	beq.n	8002dca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d1e:	4b43      	ldr	r3, [pc, #268]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	4940      	ldr	r1, [pc, #256]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d107      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d38:	4b3c      	ldr	r3, [pc, #240]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d121      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0f6      	b.n	8002f36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d107      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d50:	4b36      	ldr	r3, [pc, #216]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d115      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0ea      	b.n	8002f36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d107      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d68:	4b30      	ldr	r3, [pc, #192]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d109      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0de      	b.n	8002f36 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d78:	4b2c      	ldr	r3, [pc, #176]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0d6      	b.n	8002f36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d88:	4b28      	ldr	r3, [pc, #160]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	f023 0207 	bic.w	r2, r3, #7
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4925      	ldr	r1, [pc, #148]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d9a:	f7fe f9c9 	bl	8001130 <HAL_GetTick>
 8002d9e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da0:	e00a      	b.n	8002db8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da2:	f7fe f9c5 	bl	8001130 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e0be      	b.n	8002f36 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db8:	4b1c      	ldr	r3, [pc, #112]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d1eb      	bne.n	8002da2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d010      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d208      	bcs.n	8002df8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de6:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	f023 020f 	bic.w	r2, r3, #15
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	490e      	ldr	r1, [pc, #56]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 030f 	and.w	r3, r3, #15
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d214      	bcs.n	8002e30 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e06:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f023 020f 	bic.w	r2, r3, #15
 8002e0e:	4906      	ldr	r1, [pc, #24]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e16:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e086      	b.n	8002f36 <HAL_RCC_ClockConfig+0x34e>
 8002e28:	52002000 	.word	0x52002000
 8002e2c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d010      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	4b3f      	ldr	r3, [pc, #252]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d208      	bcs.n	8002e5e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e4c:	4b3c      	ldr	r3, [pc, #240]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	4939      	ldr	r1, [pc, #228]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d010      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695a      	ldr	r2, [r3, #20]
 8002e6e:	4b34      	ldr	r3, [pc, #208]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d208      	bcs.n	8002e8c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e7a:	4b31      	ldr	r3, [pc, #196]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	492e      	ldr	r1, [pc, #184]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d010      	beq.n	8002eba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699a      	ldr	r2, [r3, #24]
 8002e9c:	4b28      	ldr	r3, [pc, #160]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d208      	bcs.n	8002eba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ea8:	4b25      	ldr	r3, [pc, #148]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	4922      	ldr	r1, [pc, #136]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0320 	and.w	r3, r3, #32
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d010      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69da      	ldr	r2, [r3, #28]
 8002eca:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d208      	bcs.n	8002ee8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ed6:	4b1a      	ldr	r3, [pc, #104]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	4917      	ldr	r1, [pc, #92]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ee8:	f000 f834 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8002eec:	4602      	mov	r2, r0
 8002eee:	4b14      	ldr	r3, [pc, #80]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	0a1b      	lsrs	r3, r3, #8
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	4912      	ldr	r1, [pc, #72]	; (8002f44 <HAL_RCC_ClockConfig+0x35c>)
 8002efa:	5ccb      	ldrb	r3, [r1, r3]
 8002efc:	f003 031f 	and.w	r3, r3, #31
 8002f00:	fa22 f303 	lsr.w	r3, r2, r3
 8002f04:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f06:	4b0e      	ldr	r3, [pc, #56]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	4a0d      	ldr	r2, [pc, #52]	; (8002f44 <HAL_RCC_ClockConfig+0x35c>)
 8002f10:	5cd3      	ldrb	r3, [r2, r3]
 8002f12:	f003 031f 	and.w	r3, r3, #31
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1c:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <HAL_RCC_ClockConfig+0x360>)
 8002f1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f20:	4a0a      	ldr	r2, [pc, #40]	; (8002f4c <HAL_RCC_ClockConfig+0x364>)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f26:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <HAL_RCC_ClockConfig+0x368>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fe f8b6 	bl	800109c <HAL_InitTick>
 8002f30:	4603      	mov	r3, r0
 8002f32:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	58024400 	.word	0x58024400
 8002f44:	08006788 	.word	0x08006788
 8002f48:	24000004 	.word	0x24000004
 8002f4c:	24000000 	.word	0x24000000
 8002f50:	2400000c 	.word	0x2400000c

08002f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b089      	sub	sp, #36	; 0x24
 8002f58:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f5a:	4bb3      	ldr	r3, [pc, #716]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f62:	2b18      	cmp	r3, #24
 8002f64:	f200 8155 	bhi.w	8003212 <HAL_RCC_GetSysClockFreq+0x2be>
 8002f68:	a201      	add	r2, pc, #4	; (adr r2, 8002f70 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6e:	bf00      	nop
 8002f70:	08002fd5 	.word	0x08002fd5
 8002f74:	08003213 	.word	0x08003213
 8002f78:	08003213 	.word	0x08003213
 8002f7c:	08003213 	.word	0x08003213
 8002f80:	08003213 	.word	0x08003213
 8002f84:	08003213 	.word	0x08003213
 8002f88:	08003213 	.word	0x08003213
 8002f8c:	08003213 	.word	0x08003213
 8002f90:	08002ffb 	.word	0x08002ffb
 8002f94:	08003213 	.word	0x08003213
 8002f98:	08003213 	.word	0x08003213
 8002f9c:	08003213 	.word	0x08003213
 8002fa0:	08003213 	.word	0x08003213
 8002fa4:	08003213 	.word	0x08003213
 8002fa8:	08003213 	.word	0x08003213
 8002fac:	08003213 	.word	0x08003213
 8002fb0:	08003001 	.word	0x08003001
 8002fb4:	08003213 	.word	0x08003213
 8002fb8:	08003213 	.word	0x08003213
 8002fbc:	08003213 	.word	0x08003213
 8002fc0:	08003213 	.word	0x08003213
 8002fc4:	08003213 	.word	0x08003213
 8002fc8:	08003213 	.word	0x08003213
 8002fcc:	08003213 	.word	0x08003213
 8002fd0:	08003007 	.word	0x08003007
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fd4:	4b94      	ldr	r3, [pc, #592]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d009      	beq.n	8002ff4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fe0:	4b91      	ldr	r3, [pc, #580]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	08db      	lsrs	r3, r3, #3
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	4a90      	ldr	r2, [pc, #576]	; (800322c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fec:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002ff2:	e111      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ff4:	4b8d      	ldr	r3, [pc, #564]	; (800322c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ff6:	61bb      	str	r3, [r7, #24]
      break;
 8002ff8:	e10e      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002ffa:	4b8d      	ldr	r3, [pc, #564]	; (8003230 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ffc:	61bb      	str	r3, [r7, #24]
      break;
 8002ffe:	e10b      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003000:	4b8c      	ldr	r3, [pc, #560]	; (8003234 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003002:	61bb      	str	r3, [r7, #24]
      break;
 8003004:	e108      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003006:	4b88      	ldr	r3, [pc, #544]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003010:	4b85      	ldr	r3, [pc, #532]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800301a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800301c:	4b82      	ldr	r3, [pc, #520]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003026:	4b80      	ldr	r3, [pc, #512]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302a:	08db      	lsrs	r3, r3, #3
 800302c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	fb02 f303 	mul.w	r3, r2, r3
 8003036:	ee07 3a90 	vmov	s15, r3
 800303a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800303e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80e1 	beq.w	800320c <HAL_RCC_GetSysClockFreq+0x2b8>
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2b02      	cmp	r3, #2
 800304e:	f000 8083 	beq.w	8003158 <HAL_RCC_GetSysClockFreq+0x204>
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b02      	cmp	r3, #2
 8003056:	f200 80a1 	bhi.w	800319c <HAL_RCC_GetSysClockFreq+0x248>
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0x114>
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d056      	beq.n	8003114 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003066:	e099      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003068:	4b6f      	ldr	r3, [pc, #444]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0320 	and.w	r3, r3, #32
 8003070:	2b00      	cmp	r3, #0
 8003072:	d02d      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003074:	4b6c      	ldr	r3, [pc, #432]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	08db      	lsrs	r3, r3, #3
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	4a6b      	ldr	r2, [pc, #428]	; (800322c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003080:	fa22 f303 	lsr.w	r3, r2, r3
 8003084:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	ee07 3a90 	vmov	s15, r3
 800308c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	ee07 3a90 	vmov	s15, r3
 8003096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800309a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800309e:	4b62      	ldr	r3, [pc, #392]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030a6:	ee07 3a90 	vmov	s15, r3
 80030aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80030b2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003238 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80030ce:	e087      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	ee07 3a90 	vmov	s15, r3
 80030d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030da:	eddf 6a58 	vldr	s13, [pc, #352]	; 800323c <HAL_RCC_GetSysClockFreq+0x2e8>
 80030de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030e2:	4b51      	ldr	r3, [pc, #324]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ea:	ee07 3a90 	vmov	s15, r3
 80030ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80030f6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003238 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800310a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800310e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003112:	e065      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	ee07 3a90 	vmov	s15, r3
 800311a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800311e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003240 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003126:	4b40      	ldr	r3, [pc, #256]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800312e:	ee07 3a90 	vmov	s15, r3
 8003132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003136:	ed97 6a02 	vldr	s12, [r7, #8]
 800313a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003238 <HAL_RCC_GetSysClockFreq+0x2e4>
 800313e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800314a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800314e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003152:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003156:	e043      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	ee07 3a90 	vmov	s15, r3
 800315e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003162:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003244 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800316a:	4b2f      	ldr	r3, [pc, #188]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003172:	ee07 3a90 	vmov	s15, r3
 8003176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800317a:	ed97 6a02 	vldr	s12, [r7, #8]
 800317e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003238 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800318a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800318e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003196:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800319a:	e021      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	ee07 3a90 	vmov	s15, r3
 80031a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003240 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ae:	4b1e      	ldr	r3, [pc, #120]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031b6:	ee07 3a90 	vmov	s15, r3
 80031ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031be:	ed97 6a02 	vldr	s12, [r7, #8]
 80031c2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003238 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031de:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80031e0:	4b11      	ldr	r3, [pc, #68]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	0a5b      	lsrs	r3, r3, #9
 80031e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031ea:	3301      	adds	r3, #1
 80031ec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	ee07 3a90 	vmov	s15, r3
 80031f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80031fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003204:	ee17 3a90 	vmov	r3, s15
 8003208:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800320a:	e005      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	61bb      	str	r3, [r7, #24]
      break;
 8003210:	e002      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003212:	4b07      	ldr	r3, [pc, #28]	; (8003230 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003214:	61bb      	str	r3, [r7, #24]
      break;
 8003216:	bf00      	nop
  }

  return sysclockfreq;
 8003218:	69bb      	ldr	r3, [r7, #24]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3724      	adds	r7, #36	; 0x24
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	58024400 	.word	0x58024400
 800322c:	03d09000 	.word	0x03d09000
 8003230:	003d0900 	.word	0x003d0900
 8003234:	007a1200 	.word	0x007a1200
 8003238:	46000000 	.word	0x46000000
 800323c:	4c742400 	.word	0x4c742400
 8003240:	4a742400 	.word	0x4a742400
 8003244:	4af42400 	.word	0x4af42400

08003248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800324e:	f7ff fe81 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8003252:	4602      	mov	r2, r0
 8003254:	4b10      	ldr	r3, [pc, #64]	; (8003298 <HAL_RCC_GetHCLKFreq+0x50>)
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	0a1b      	lsrs	r3, r3, #8
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	490f      	ldr	r1, [pc, #60]	; (800329c <HAL_RCC_GetHCLKFreq+0x54>)
 8003260:	5ccb      	ldrb	r3, [r1, r3]
 8003262:	f003 031f 	and.w	r3, r3, #31
 8003266:	fa22 f303 	lsr.w	r3, r2, r3
 800326a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800326c:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <HAL_RCC_GetHCLKFreq+0x50>)
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	f003 030f 	and.w	r3, r3, #15
 8003274:	4a09      	ldr	r2, [pc, #36]	; (800329c <HAL_RCC_GetHCLKFreq+0x54>)
 8003276:	5cd3      	ldrb	r3, [r2, r3]
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	fa22 f303 	lsr.w	r3, r2, r3
 8003282:	4a07      	ldr	r2, [pc, #28]	; (80032a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003284:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003286:	4a07      	ldr	r2, [pc, #28]	; (80032a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800328c:	4b04      	ldr	r3, [pc, #16]	; (80032a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800328e:	681b      	ldr	r3, [r3, #0]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	58024400 	.word	0x58024400
 800329c:	08006788 	.word	0x08006788
 80032a0:	24000004 	.word	0x24000004
 80032a4:	24000000 	.word	0x24000000

080032a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80032ac:	f7ff ffcc 	bl	8003248 <HAL_RCC_GetHCLKFreq>
 80032b0:	4602      	mov	r2, r0
 80032b2:	4b06      	ldr	r3, [pc, #24]	; (80032cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	091b      	lsrs	r3, r3, #4
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	4904      	ldr	r1, [pc, #16]	; (80032d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032be:	5ccb      	ldrb	r3, [r1, r3]
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	58024400 	.word	0x58024400
 80032d0:	08006788 	.word	0x08006788

080032d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80032d8:	f7ff ffb6 	bl	8003248 <HAL_RCC_GetHCLKFreq>
 80032dc:	4602      	mov	r2, r0
 80032de:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	0a1b      	lsrs	r3, r3, #8
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	4904      	ldr	r1, [pc, #16]	; (80032fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80032ea:	5ccb      	ldrb	r3, [r1, r3]
 80032ec:	f003 031f 	and.w	r3, r3, #31
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	58024400 	.word	0x58024400
 80032fc:	08006788 	.word	0x08006788

08003300 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003304:	b0ca      	sub	sp, #296	; 0x128
 8003306:	af00      	add	r7, sp, #0
 8003308:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800330c:	2300      	movs	r3, #0
 800330e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003312:	2300      	movs	r3, #0
 8003314:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800331c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003320:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003324:	2500      	movs	r5, #0
 8003326:	ea54 0305 	orrs.w	r3, r4, r5
 800332a:	d049      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800332c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003332:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003336:	d02f      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003338:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800333c:	d828      	bhi.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800333e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003342:	d01a      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003344:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003348:	d822      	bhi.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800334e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003352:	d007      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003354:	e01c      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003356:	4bb8      	ldr	r3, [pc, #736]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335a:	4ab7      	ldr	r2, [pc, #732]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800335c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003360:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003362:	e01a      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003368:	3308      	adds	r3, #8
 800336a:	2102      	movs	r1, #2
 800336c:	4618      	mov	r0, r3
 800336e:	f001 fc8f 	bl	8004c90 <RCCEx_PLL2_Config>
 8003372:	4603      	mov	r3, r0
 8003374:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003378:	e00f      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800337a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800337e:	3328      	adds	r3, #40	; 0x28
 8003380:	2102      	movs	r1, #2
 8003382:	4618      	mov	r0, r3
 8003384:	f001 fd36 	bl	8004df4 <RCCEx_PLL3_Config>
 8003388:	4603      	mov	r3, r0
 800338a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800338e:	e004      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003396:	e000      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003398:	bf00      	nop
    }

    if (ret == HAL_OK)
 800339a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10a      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80033a2:	4ba5      	ldr	r3, [pc, #660]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80033aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033b0:	4aa1      	ldr	r2, [pc, #644]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033b2:	430b      	orrs	r3, r1
 80033b4:	6513      	str	r3, [r2, #80]	; 0x50
 80033b6:	e003      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80033cc:	f04f 0900 	mov.w	r9, #0
 80033d0:	ea58 0309 	orrs.w	r3, r8, r9
 80033d4:	d047      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80033d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d82a      	bhi.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80033e0:	a201      	add	r2, pc, #4	; (adr r2, 80033e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80033e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e6:	bf00      	nop
 80033e8:	080033fd 	.word	0x080033fd
 80033ec:	0800340b 	.word	0x0800340b
 80033f0:	08003421 	.word	0x08003421
 80033f4:	0800343f 	.word	0x0800343f
 80033f8:	0800343f 	.word	0x0800343f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033fc:	4b8e      	ldr	r3, [pc, #568]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	4a8d      	ldr	r2, [pc, #564]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003406:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003408:	e01a      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800340a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800340e:	3308      	adds	r3, #8
 8003410:	2100      	movs	r1, #0
 8003412:	4618      	mov	r0, r3
 8003414:	f001 fc3c 	bl	8004c90 <RCCEx_PLL2_Config>
 8003418:	4603      	mov	r3, r0
 800341a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800341e:	e00f      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003424:	3328      	adds	r3, #40	; 0x28
 8003426:	2100      	movs	r1, #0
 8003428:	4618      	mov	r0, r3
 800342a:	f001 fce3 	bl	8004df4 <RCCEx_PLL3_Config>
 800342e:	4603      	mov	r3, r0
 8003430:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003434:	e004      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800343c:	e000      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800343e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003440:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10a      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003448:	4b7b      	ldr	r3, [pc, #492]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800344a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800344c:	f023 0107 	bic.w	r1, r3, #7
 8003450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003456:	4a78      	ldr	r2, [pc, #480]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003458:	430b      	orrs	r3, r1
 800345a:	6513      	str	r3, [r2, #80]	; 0x50
 800345c:	e003      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800345e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003462:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800346a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003472:	f04f 0b00 	mov.w	fp, #0
 8003476:	ea5a 030b 	orrs.w	r3, sl, fp
 800347a:	d04c      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800347c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003486:	d030      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800348c:	d829      	bhi.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800348e:	2bc0      	cmp	r3, #192	; 0xc0
 8003490:	d02d      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003492:	2bc0      	cmp	r3, #192	; 0xc0
 8003494:	d825      	bhi.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003496:	2b80      	cmp	r3, #128	; 0x80
 8003498:	d018      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800349a:	2b80      	cmp	r3, #128	; 0x80
 800349c:	d821      	bhi.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80034a2:	2b40      	cmp	r3, #64	; 0x40
 80034a4:	d007      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80034a6:	e01c      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034a8:	4b63      	ldr	r3, [pc, #396]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ac:	4a62      	ldr	r2, [pc, #392]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034b4:	e01c      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034ba:	3308      	adds	r3, #8
 80034bc:	2100      	movs	r1, #0
 80034be:	4618      	mov	r0, r3
 80034c0:	f001 fbe6 	bl	8004c90 <RCCEx_PLL2_Config>
 80034c4:	4603      	mov	r3, r0
 80034c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034ca:	e011      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034d0:	3328      	adds	r3, #40	; 0x28
 80034d2:	2100      	movs	r1, #0
 80034d4:	4618      	mov	r0, r3
 80034d6:	f001 fc8d 	bl	8004df4 <RCCEx_PLL3_Config>
 80034da:	4603      	mov	r3, r0
 80034dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034e0:	e006      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034e8:	e002      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034ea:	bf00      	nop
 80034ec:	e000      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10a      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80034f8:	4b4f      	ldr	r3, [pc, #316]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034fc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003506:	4a4c      	ldr	r2, [pc, #304]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003508:	430b      	orrs	r3, r1
 800350a:	6513      	str	r3, [r2, #80]	; 0x50
 800350c:	e003      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800350e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003512:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800351a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003522:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003526:	2300      	movs	r3, #0
 8003528:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800352c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003530:	460b      	mov	r3, r1
 8003532:	4313      	orrs	r3, r2
 8003534:	d053      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800353a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800353e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003542:	d035      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003544:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003548:	d82e      	bhi.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800354a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800354e:	d031      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003550:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003554:	d828      	bhi.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800355a:	d01a      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800355c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003560:	d822      	bhi.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003566:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800356a:	d007      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800356c:	e01c      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800356e:	4b32      	ldr	r3, [pc, #200]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	4a31      	ldr	r2, [pc, #196]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003578:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800357a:	e01c      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800357c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003580:	3308      	adds	r3, #8
 8003582:	2100      	movs	r1, #0
 8003584:	4618      	mov	r0, r3
 8003586:	f001 fb83 	bl	8004c90 <RCCEx_PLL2_Config>
 800358a:	4603      	mov	r3, r0
 800358c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003590:	e011      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003596:	3328      	adds	r3, #40	; 0x28
 8003598:	2100      	movs	r1, #0
 800359a:	4618      	mov	r0, r3
 800359c:	f001 fc2a 	bl	8004df4 <RCCEx_PLL3_Config>
 80035a0:	4603      	mov	r3, r0
 80035a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035a6:	e006      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035ae:	e002      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80035b0:	bf00      	nop
 80035b2:	e000      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80035b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10b      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80035be:	4b1e      	ldr	r3, [pc, #120]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80035c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80035ce:	4a1a      	ldr	r2, [pc, #104]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035d0:	430b      	orrs	r3, r1
 80035d2:	6593      	str	r3, [r2, #88]	; 0x58
 80035d4:	e003      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80035de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80035ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80035ee:	2300      	movs	r3, #0
 80035f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80035f4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80035f8:	460b      	mov	r3, r1
 80035fa:	4313      	orrs	r3, r2
 80035fc:	d056      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80035fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003602:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003606:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800360a:	d038      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800360c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003610:	d831      	bhi.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003612:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003616:	d034      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003618:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800361c:	d82b      	bhi.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800361e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003622:	d01d      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003624:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003628:	d825      	bhi.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800362a:	2b00      	cmp	r3, #0
 800362c:	d006      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800362e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003632:	d00a      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003634:	e01f      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003636:	bf00      	nop
 8003638:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800363c:	4ba2      	ldr	r3, [pc, #648]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800363e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003640:	4aa1      	ldr	r2, [pc, #644]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003646:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003648:	e01c      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800364a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800364e:	3308      	adds	r3, #8
 8003650:	2100      	movs	r1, #0
 8003652:	4618      	mov	r0, r3
 8003654:	f001 fb1c 	bl	8004c90 <RCCEx_PLL2_Config>
 8003658:	4603      	mov	r3, r0
 800365a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800365e:	e011      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003664:	3328      	adds	r3, #40	; 0x28
 8003666:	2100      	movs	r1, #0
 8003668:	4618      	mov	r0, r3
 800366a:	f001 fbc3 	bl	8004df4 <RCCEx_PLL3_Config>
 800366e:	4603      	mov	r3, r0
 8003670:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003674:	e006      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800367c:	e002      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800367e:	bf00      	nop
 8003680:	e000      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003682:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003684:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10b      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800368c:	4b8e      	ldr	r3, [pc, #568]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800368e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003690:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003698:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800369c:	4a8a      	ldr	r2, [pc, #552]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800369e:	430b      	orrs	r3, r1
 80036a0:	6593      	str	r3, [r2, #88]	; 0x58
 80036a2:	e003      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80036ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80036b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80036bc:	2300      	movs	r3, #0
 80036be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80036c2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80036c6:	460b      	mov	r3, r1
 80036c8:	4313      	orrs	r3, r2
 80036ca:	d03a      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80036cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d2:	2b30      	cmp	r3, #48	; 0x30
 80036d4:	d01f      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80036d6:	2b30      	cmp	r3, #48	; 0x30
 80036d8:	d819      	bhi.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80036da:	2b20      	cmp	r3, #32
 80036dc:	d00c      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80036de:	2b20      	cmp	r3, #32
 80036e0:	d815      	bhi.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d019      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80036e6:	2b10      	cmp	r3, #16
 80036e8:	d111      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ea:	4b77      	ldr	r3, [pc, #476]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	4a76      	ldr	r2, [pc, #472]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036f6:	e011      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036fc:	3308      	adds	r3, #8
 80036fe:	2102      	movs	r1, #2
 8003700:	4618      	mov	r0, r3
 8003702:	f001 fac5 	bl	8004c90 <RCCEx_PLL2_Config>
 8003706:	4603      	mov	r3, r0
 8003708:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800370c:	e006      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003714:	e002      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003716:	bf00      	nop
 8003718:	e000      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800371a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800371c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10a      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003724:	4b68      	ldr	r3, [pc, #416]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003728:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800372c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003732:	4a65      	ldr	r2, [pc, #404]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003734:	430b      	orrs	r3, r1
 8003736:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003738:	e003      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800373e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800374e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003752:	2300      	movs	r3, #0
 8003754:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003758:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800375c:	460b      	mov	r3, r1
 800375e:	4313      	orrs	r3, r2
 8003760:	d051      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003768:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800376c:	d035      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800376e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003772:	d82e      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003774:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003778:	d031      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800377a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800377e:	d828      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003784:	d01a      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800378a:	d822      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003794:	d007      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003796:	e01c      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003798:	4b4b      	ldr	r3, [pc, #300]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	4a4a      	ldr	r2, [pc, #296]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800379e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037a4:	e01c      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037aa:	3308      	adds	r3, #8
 80037ac:	2100      	movs	r1, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	f001 fa6e 	bl	8004c90 <RCCEx_PLL2_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037ba:	e011      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037c0:	3328      	adds	r3, #40	; 0x28
 80037c2:	2100      	movs	r1, #0
 80037c4:	4618      	mov	r0, r3
 80037c6:	f001 fb15 	bl	8004df4 <RCCEx_PLL3_Config>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037d0:	e006      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037d8:	e002      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80037da:	bf00      	nop
 80037dc:	e000      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80037de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10a      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037e8:	4b37      	ldr	r3, [pc, #220]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ec:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80037f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f6:	4a34      	ldr	r2, [pc, #208]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037f8:	430b      	orrs	r3, r1
 80037fa:	6513      	str	r3, [r2, #80]	; 0x50
 80037fc:	e003      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003802:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003812:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003816:	2300      	movs	r3, #0
 8003818:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800381c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003820:	460b      	mov	r3, r1
 8003822:	4313      	orrs	r3, r2
 8003824:	d056      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800382a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800382c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003830:	d033      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003832:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003836:	d82c      	bhi.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003838:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800383c:	d02f      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800383e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003842:	d826      	bhi.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003844:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003848:	d02b      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800384a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800384e:	d820      	bhi.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003850:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003854:	d012      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003856:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800385a:	d81a      	bhi.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800385c:	2b00      	cmp	r3, #0
 800385e:	d022      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003864:	d115      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800386a:	3308      	adds	r3, #8
 800386c:	2101      	movs	r1, #1
 800386e:	4618      	mov	r0, r3
 8003870:	f001 fa0e 	bl	8004c90 <RCCEx_PLL2_Config>
 8003874:	4603      	mov	r3, r0
 8003876:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800387a:	e015      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800387c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003880:	3328      	adds	r3, #40	; 0x28
 8003882:	2101      	movs	r1, #1
 8003884:	4618      	mov	r0, r3
 8003886:	f001 fab5 	bl	8004df4 <RCCEx_PLL3_Config>
 800388a:	4603      	mov	r3, r0
 800388c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003890:	e00a      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003898:	e006      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800389a:	bf00      	nop
 800389c:	e004      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800389e:	bf00      	nop
 80038a0:	e002      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80038a2:	bf00      	nop
 80038a4:	e000      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80038a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10d      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80038b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038be:	4a02      	ldr	r2, [pc, #8]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038c0:	430b      	orrs	r3, r1
 80038c2:	6513      	str	r3, [r2, #80]	; 0x50
 80038c4:	e006      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80038c6:	bf00      	nop
 80038c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038dc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80038e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038e4:	2300      	movs	r3, #0
 80038e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038ea:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4313      	orrs	r3, r2
 80038f2:	d055      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80038f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003900:	d033      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003902:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003906:	d82c      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800390c:	d02f      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800390e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003912:	d826      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003914:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003918:	d02b      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800391a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800391e:	d820      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003924:	d012      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003926:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800392a:	d81a      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800392c:	2b00      	cmp	r3, #0
 800392e:	d022      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003930:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003934:	d115      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800393a:	3308      	adds	r3, #8
 800393c:	2101      	movs	r1, #1
 800393e:	4618      	mov	r0, r3
 8003940:	f001 f9a6 	bl	8004c90 <RCCEx_PLL2_Config>
 8003944:	4603      	mov	r3, r0
 8003946:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800394a:	e015      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800394c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003950:	3328      	adds	r3, #40	; 0x28
 8003952:	2101      	movs	r1, #1
 8003954:	4618      	mov	r0, r3
 8003956:	f001 fa4d 	bl	8004df4 <RCCEx_PLL3_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003960:	e00a      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003968:	e006      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800396a:	bf00      	nop
 800396c:	e004      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800396e:	bf00      	nop
 8003970:	e002      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003972:	bf00      	nop
 8003974:	e000      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003978:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10b      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003980:	4ba3      	ldr	r3, [pc, #652]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003984:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800398c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003990:	4a9f      	ldr	r2, [pc, #636]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003992:	430b      	orrs	r3, r1
 8003994:	6593      	str	r3, [r2, #88]	; 0x58
 8003996:	e003      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003998:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800399c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80039ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039b0:	2300      	movs	r3, #0
 80039b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80039b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039ba:	460b      	mov	r3, r1
 80039bc:	4313      	orrs	r3, r2
 80039be:	d037      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80039c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ca:	d00e      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80039cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039d0:	d816      	bhi.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d018      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80039d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039da:	d111      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039dc:	4b8c      	ldr	r3, [pc, #560]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	4a8b      	ldr	r2, [pc, #556]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039e8:	e00f      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ee:	3308      	adds	r3, #8
 80039f0:	2101      	movs	r1, #1
 80039f2:	4618      	mov	r0, r3
 80039f4:	f001 f94c 	bl	8004c90 <RCCEx_PLL2_Config>
 80039f8:	4603      	mov	r3, r0
 80039fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039fe:	e004      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a06:	e000      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10a      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a12:	4b7f      	ldr	r3, [pc, #508]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a16:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a20:	4a7b      	ldr	r2, [pc, #492]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a22:	430b      	orrs	r3, r1
 8003a24:	6513      	str	r3, [r2, #80]	; 0x50
 8003a26:	e003      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a38:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003a3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a40:	2300      	movs	r3, #0
 8003a42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003a46:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	d039      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	d81c      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003a5a:	a201      	add	r2, pc, #4	; (adr r2, 8003a60 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a60:	08003a9d 	.word	0x08003a9d
 8003a64:	08003a71 	.word	0x08003a71
 8003a68:	08003a7f 	.word	0x08003a7f
 8003a6c:	08003a9d 	.word	0x08003a9d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a70:	4b67      	ldr	r3, [pc, #412]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	4a66      	ldr	r2, [pc, #408]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a7c:	e00f      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a82:	3308      	adds	r3, #8
 8003a84:	2102      	movs	r1, #2
 8003a86:	4618      	mov	r0, r3
 8003a88:	f001 f902 	bl	8004c90 <RCCEx_PLL2_Config>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a92:	e004      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a9a:	e000      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10a      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003aa6:	4b5a      	ldr	r3, [pc, #360]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aaa:	f023 0103 	bic.w	r1, r3, #3
 8003aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab4:	4a56      	ldr	r2, [pc, #344]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ab6:	430b      	orrs	r3, r1
 8003ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003aba:	e003      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003abc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ac0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003acc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003ad0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ada:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f000 809f 	beq.w	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ae6:	4b4b      	ldr	r3, [pc, #300]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a4a      	ldr	r2, [pc, #296]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003af2:	f7fd fb1d 	bl	8001130 <HAL_GetTick>
 8003af6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003afa:	e00b      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003afc:	f7fd fb18 	bl	8001130 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b64      	cmp	r3, #100	; 0x64
 8003b0a:	d903      	bls.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b12:	e005      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b14:	4b3f      	ldr	r3, [pc, #252]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0ed      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003b20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d179      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b28:	4b39      	ldr	r3, [pc, #228]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b34:	4053      	eors	r3, r2
 8003b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d015      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b3e:	4b34      	ldr	r3, [pc, #208]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b46:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b4a:	4b31      	ldr	r3, [pc, #196]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4e:	4a30      	ldr	r2, [pc, #192]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b54:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b56:	4b2e      	ldr	r3, [pc, #184]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5a:	4a2d      	ldr	r2, [pc, #180]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b60:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b62:	4a2b      	ldr	r2, [pc, #172]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b68:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b76:	d118      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fd fada 	bl	8001130 <HAL_GetTick>
 8003b7c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b80:	e00d      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b82:	f7fd fad5 	bl	8001130 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003b8c:	1ad2      	subs	r2, r2, r3
 8003b8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d903      	bls.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003b9c:	e005      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b9e:	4b1c      	ldr	r3, [pc, #112]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0eb      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003baa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d129      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bc2:	d10e      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003bc4:	4b12      	ldr	r3, [pc, #72]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bd4:	091a      	lsrs	r2, r3, #4
 8003bd6:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	4a0d      	ldr	r2, [pc, #52]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	6113      	str	r3, [r2, #16]
 8003be0:	e005      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003be2:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	4a0a      	ldr	r2, [pc, #40]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003bec:	6113      	str	r3, [r2, #16]
 8003bee:	4b08      	ldr	r3, [pc, #32]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bf0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bf6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bfe:	4a04      	ldr	r2, [pc, #16]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c00:	430b      	orrs	r3, r1
 8003c02:	6713      	str	r3, [r2, #112]	; 0x70
 8003c04:	e00e      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003c0e:	e009      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003c10:	58024400 	.word	0x58024400
 8003c14:	58024800 	.word	0x58024800
 8003c18:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2c:	f002 0301 	and.w	r3, r2, #1
 8003c30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c34:	2300      	movs	r3, #0
 8003c36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c3a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f000 8089 	beq.w	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c4c:	2b28      	cmp	r3, #40	; 0x28
 8003c4e:	d86b      	bhi.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003c50:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c56:	bf00      	nop
 8003c58:	08003d31 	.word	0x08003d31
 8003c5c:	08003d29 	.word	0x08003d29
 8003c60:	08003d29 	.word	0x08003d29
 8003c64:	08003d29 	.word	0x08003d29
 8003c68:	08003d29 	.word	0x08003d29
 8003c6c:	08003d29 	.word	0x08003d29
 8003c70:	08003d29 	.word	0x08003d29
 8003c74:	08003d29 	.word	0x08003d29
 8003c78:	08003cfd 	.word	0x08003cfd
 8003c7c:	08003d29 	.word	0x08003d29
 8003c80:	08003d29 	.word	0x08003d29
 8003c84:	08003d29 	.word	0x08003d29
 8003c88:	08003d29 	.word	0x08003d29
 8003c8c:	08003d29 	.word	0x08003d29
 8003c90:	08003d29 	.word	0x08003d29
 8003c94:	08003d29 	.word	0x08003d29
 8003c98:	08003d13 	.word	0x08003d13
 8003c9c:	08003d29 	.word	0x08003d29
 8003ca0:	08003d29 	.word	0x08003d29
 8003ca4:	08003d29 	.word	0x08003d29
 8003ca8:	08003d29 	.word	0x08003d29
 8003cac:	08003d29 	.word	0x08003d29
 8003cb0:	08003d29 	.word	0x08003d29
 8003cb4:	08003d29 	.word	0x08003d29
 8003cb8:	08003d31 	.word	0x08003d31
 8003cbc:	08003d29 	.word	0x08003d29
 8003cc0:	08003d29 	.word	0x08003d29
 8003cc4:	08003d29 	.word	0x08003d29
 8003cc8:	08003d29 	.word	0x08003d29
 8003ccc:	08003d29 	.word	0x08003d29
 8003cd0:	08003d29 	.word	0x08003d29
 8003cd4:	08003d29 	.word	0x08003d29
 8003cd8:	08003d31 	.word	0x08003d31
 8003cdc:	08003d29 	.word	0x08003d29
 8003ce0:	08003d29 	.word	0x08003d29
 8003ce4:	08003d29 	.word	0x08003d29
 8003ce8:	08003d29 	.word	0x08003d29
 8003cec:	08003d29 	.word	0x08003d29
 8003cf0:	08003d29 	.word	0x08003d29
 8003cf4:	08003d29 	.word	0x08003d29
 8003cf8:	08003d31 	.word	0x08003d31
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d00:	3308      	adds	r3, #8
 8003d02:	2101      	movs	r1, #1
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 ffc3 	bl	8004c90 <RCCEx_PLL2_Config>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d10:	e00f      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d16:	3328      	adds	r3, #40	; 0x28
 8003d18:	2101      	movs	r1, #1
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f001 f86a 	bl	8004df4 <RCCEx_PLL3_Config>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d26:	e004      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d2e:	e000      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10a      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d3a:	4bbf      	ldr	r3, [pc, #764]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d48:	4abb      	ldr	r2, [pc, #748]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d4a:	430b      	orrs	r3, r1
 8003d4c:	6553      	str	r3, [r2, #84]	; 0x54
 8003d4e:	e003      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d60:	f002 0302 	and.w	r3, r2, #2
 8003d64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003d6e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003d72:	460b      	mov	r3, r1
 8003d74:	4313      	orrs	r3, r2
 8003d76:	d041      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d7e:	2b05      	cmp	r3, #5
 8003d80:	d824      	bhi.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003d82:	a201      	add	r2, pc, #4	; (adr r2, 8003d88 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d88:	08003dd5 	.word	0x08003dd5
 8003d8c:	08003da1 	.word	0x08003da1
 8003d90:	08003db7 	.word	0x08003db7
 8003d94:	08003dd5 	.word	0x08003dd5
 8003d98:	08003dd5 	.word	0x08003dd5
 8003d9c:	08003dd5 	.word	0x08003dd5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003da4:	3308      	adds	r3, #8
 8003da6:	2101      	movs	r1, #1
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 ff71 	bl	8004c90 <RCCEx_PLL2_Config>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003db4:	e00f      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dba:	3328      	adds	r3, #40	; 0x28
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f001 f818 	bl	8004df4 <RCCEx_PLL3_Config>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003dca:	e004      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003dd2:	e000      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10a      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003dde:	4b96      	ldr	r3, [pc, #600]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de2:	f023 0107 	bic.w	r1, r3, #7
 8003de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dec:	4a92      	ldr	r2, [pc, #584]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dee:	430b      	orrs	r3, r1
 8003df0:	6553      	str	r3, [r2, #84]	; 0x54
 8003df2:	e003      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003df8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e04:	f002 0304 	and.w	r3, r2, #4
 8003e08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e12:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	d044      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e24:	2b05      	cmp	r3, #5
 8003e26:	d825      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003e28:	a201      	add	r2, pc, #4	; (adr r2, 8003e30 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2e:	bf00      	nop
 8003e30:	08003e7d 	.word	0x08003e7d
 8003e34:	08003e49 	.word	0x08003e49
 8003e38:	08003e5f 	.word	0x08003e5f
 8003e3c:	08003e7d 	.word	0x08003e7d
 8003e40:	08003e7d 	.word	0x08003e7d
 8003e44:	08003e7d 	.word	0x08003e7d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e4c:	3308      	adds	r3, #8
 8003e4e:	2101      	movs	r1, #1
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 ff1d 	bl	8004c90 <RCCEx_PLL2_Config>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e5c:	e00f      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e62:	3328      	adds	r3, #40	; 0x28
 8003e64:	2101      	movs	r1, #1
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 ffc4 	bl	8004df4 <RCCEx_PLL3_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e72:	e004      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e7a:	e000      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10b      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e86:	4b6c      	ldr	r3, [pc, #432]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8a:	f023 0107 	bic.w	r1, r3, #7
 8003e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e96:	4a68      	ldr	r2, [pc, #416]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e98:	430b      	orrs	r3, r1
 8003e9a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e9c:	e003      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ea2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eae:	f002 0320 	and.w	r3, r2, #32
 8003eb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ebc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	d055      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ece:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ed2:	d033      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ed8:	d82c      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ede:	d02f      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee4:	d826      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ee6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003eea:	d02b      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003eec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ef0:	d820      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ef2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ef6:	d012      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003efc:	d81a      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d022      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003f02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f06:	d115      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f0c:	3308      	adds	r3, #8
 8003f0e:	2100      	movs	r1, #0
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 febd 	bl	8004c90 <RCCEx_PLL2_Config>
 8003f16:	4603      	mov	r3, r0
 8003f18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f1c:	e015      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f22:	3328      	adds	r3, #40	; 0x28
 8003f24:	2102      	movs	r1, #2
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 ff64 	bl	8004df4 <RCCEx_PLL3_Config>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f32:	e00a      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f3a:	e006      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f3c:	bf00      	nop
 8003f3e:	e004      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f40:	bf00      	nop
 8003f42:	e002      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f44:	bf00      	nop
 8003f46:	e000      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10b      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f52:	4b39      	ldr	r3, [pc, #228]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f56:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f62:	4a35      	ldr	r2, [pc, #212]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f64:	430b      	orrs	r3, r1
 8003f66:	6553      	str	r3, [r2, #84]	; 0x54
 8003f68:	e003      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f82:	2300      	movs	r3, #0
 8003f84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003f88:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	d058      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f9a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f9e:	d033      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003fa0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003fa4:	d82c      	bhi.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003faa:	d02f      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb0:	d826      	bhi.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003fb2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fb6:	d02b      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003fb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fbc:	d820      	bhi.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003fbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fc2:	d012      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fc8:	d81a      	bhi.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d022      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fd2:	d115      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd8:	3308      	adds	r3, #8
 8003fda:	2100      	movs	r1, #0
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fe57 	bl	8004c90 <RCCEx_PLL2_Config>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fe8:	e015      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fee:	3328      	adds	r3, #40	; 0x28
 8003ff0:	2102      	movs	r1, #2
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fefe 	bl	8004df4 <RCCEx_PLL3_Config>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ffe:	e00a      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004006:	e006      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004008:	bf00      	nop
 800400a:	e004      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800400c:	bf00      	nop
 800400e:	e002      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004010:	bf00      	nop
 8004012:	e000      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004016:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10e      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800401e:	4b06      	ldr	r3, [pc, #24]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004022:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800402a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800402e:	4a02      	ldr	r2, [pc, #8]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004030:	430b      	orrs	r3, r1
 8004032:	6593      	str	r3, [r2, #88]	; 0x58
 8004034:	e006      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004036:	bf00      	nop
 8004038:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004040:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004050:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004054:	2300      	movs	r3, #0
 8004056:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800405a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800405e:	460b      	mov	r3, r1
 8004060:	4313      	orrs	r3, r2
 8004062:	d055      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004068:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800406c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004070:	d033      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004072:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004076:	d82c      	bhi.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800407c:	d02f      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800407e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004082:	d826      	bhi.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004084:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004088:	d02b      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800408a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800408e:	d820      	bhi.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004090:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004094:	d012      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004096:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800409a:	d81a      	bhi.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800409c:	2b00      	cmp	r3, #0
 800409e:	d022      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80040a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a4:	d115      	bne.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040aa:	3308      	adds	r3, #8
 80040ac:	2100      	movs	r1, #0
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 fdee 	bl	8004c90 <RCCEx_PLL2_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040ba:	e015      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040c0:	3328      	adds	r3, #40	; 0x28
 80040c2:	2102      	movs	r1, #2
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 fe95 	bl	8004df4 <RCCEx_PLL3_Config>
 80040ca:	4603      	mov	r3, r0
 80040cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040d0:	e00a      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040d8:	e006      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040da:	bf00      	nop
 80040dc:	e004      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040de:	bf00      	nop
 80040e0:	e002      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040e2:	bf00      	nop
 80040e4:	e000      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10b      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040f0:	4ba1      	ldr	r3, [pc, #644]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80040f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004100:	4a9d      	ldr	r2, [pc, #628]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004102:	430b      	orrs	r3, r1
 8004104:	6593      	str	r3, [r2, #88]	; 0x58
 8004106:	e003      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004108:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800410c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004118:	f002 0308 	and.w	r3, r2, #8
 800411c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004120:	2300      	movs	r3, #0
 8004122:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004126:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800412a:	460b      	mov	r3, r1
 800412c:	4313      	orrs	r3, r2
 800412e:	d01e      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800413c:	d10c      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800413e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004142:	3328      	adds	r3, #40	; 0x28
 8004144:	2102      	movs	r1, #2
 8004146:	4618      	mov	r0, r3
 8004148:	f000 fe54 	bl	8004df4 <RCCEx_PLL3_Config>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004158:	4b87      	ldr	r3, [pc, #540]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800415a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004164:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004168:	4a83      	ldr	r2, [pc, #524]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800416a:	430b      	orrs	r3, r1
 800416c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800416e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004176:	f002 0310 	and.w	r3, r2, #16
 800417a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800417e:	2300      	movs	r3, #0
 8004180:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004184:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004188:	460b      	mov	r3, r1
 800418a:	4313      	orrs	r3, r2
 800418c:	d01e      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800418e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004192:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800419a:	d10c      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800419c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a0:	3328      	adds	r3, #40	; 0x28
 80041a2:	2102      	movs	r1, #2
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 fe25 	bl	8004df4 <RCCEx_PLL3_Config>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041b6:	4b70      	ldr	r3, [pc, #448]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041c6:	4a6c      	ldr	r2, [pc, #432]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041c8:	430b      	orrs	r3, r1
 80041ca:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80041d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041dc:	2300      	movs	r3, #0
 80041de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041e2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80041e6:	460b      	mov	r3, r1
 80041e8:	4313      	orrs	r3, r2
 80041ea:	d03e      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80041ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80041f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041f8:	d022      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80041fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041fe:	d81b      	bhi.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004208:	d00b      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800420a:	e015      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800420c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004210:	3308      	adds	r3, #8
 8004212:	2100      	movs	r1, #0
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fd3b 	bl	8004c90 <RCCEx_PLL2_Config>
 800421a:	4603      	mov	r3, r0
 800421c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004220:	e00f      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004226:	3328      	adds	r3, #40	; 0x28
 8004228:	2102      	movs	r1, #2
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fde2 	bl	8004df4 <RCCEx_PLL3_Config>
 8004230:	4603      	mov	r3, r0
 8004232:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004236:	e004      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800423e:	e000      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004242:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10b      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800424a:	4b4b      	ldr	r3, [pc, #300]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800424c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004256:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800425a:	4a47      	ldr	r2, [pc, #284]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800425c:	430b      	orrs	r3, r1
 800425e:	6593      	str	r3, [r2, #88]	; 0x58
 8004260:	e003      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004262:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004266:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800426a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800426e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004272:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004276:	67bb      	str	r3, [r7, #120]	; 0x78
 8004278:	2300      	movs	r3, #0
 800427a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800427c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004280:	460b      	mov	r3, r1
 8004282:	4313      	orrs	r3, r2
 8004284:	d03b      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004292:	d01f      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004294:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004298:	d818      	bhi.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800429a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800429e:	d003      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80042a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042a4:	d007      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80042a6:	e011      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042a8:	4b33      	ldr	r3, [pc, #204]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	4a32      	ldr	r2, [pc, #200]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80042b4:	e00f      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ba:	3328      	adds	r3, #40	; 0x28
 80042bc:	2101      	movs	r1, #1
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 fd98 	bl	8004df4 <RCCEx_PLL3_Config>
 80042c4:	4603      	mov	r3, r0
 80042c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80042ca:	e004      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042d2:	e000      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80042d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10b      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042de:	4b26      	ldr	r3, [pc, #152]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80042e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ee:	4a22      	ldr	r2, [pc, #136]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042f0:	430b      	orrs	r3, r1
 80042f2:	6553      	str	r3, [r2, #84]	; 0x54
 80042f4:	e003      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004306:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800430a:	673b      	str	r3, [r7, #112]	; 0x70
 800430c:	2300      	movs	r3, #0
 800430e:	677b      	str	r3, [r7, #116]	; 0x74
 8004310:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004314:	460b      	mov	r3, r1
 8004316:	4313      	orrs	r3, r2
 8004318:	d034      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800431a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800431e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004328:	d007      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800432a:	e011      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800432c:	4b12      	ldr	r3, [pc, #72]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	4a11      	ldr	r2, [pc, #68]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004336:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004338:	e00e      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800433a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800433e:	3308      	adds	r3, #8
 8004340:	2102      	movs	r1, #2
 8004342:	4618      	mov	r0, r3
 8004344:	f000 fca4 	bl	8004c90 <RCCEx_PLL2_Config>
 8004348:	4603      	mov	r3, r0
 800434a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800434e:	e003      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004356:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004358:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10d      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004360:	4b05      	ldr	r3, [pc, #20]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800436c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800436e:	4a02      	ldr	r2, [pc, #8]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004370:	430b      	orrs	r3, r1
 8004372:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004374:	e006      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004376:	bf00      	nop
 8004378:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004380:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004390:	66bb      	str	r3, [r7, #104]	; 0x68
 8004392:	2300      	movs	r3, #0
 8004394:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004396:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800439a:	460b      	mov	r3, r1
 800439c:	4313      	orrs	r3, r2
 800439e:	d00c      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043a4:	3328      	adds	r3, #40	; 0x28
 80043a6:	2102      	movs	r1, #2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 fd23 	bl	8004df4 <RCCEx_PLL3_Config>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80043c6:	663b      	str	r3, [r7, #96]	; 0x60
 80043c8:	2300      	movs	r3, #0
 80043ca:	667b      	str	r3, [r7, #100]	; 0x64
 80043cc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80043d0:	460b      	mov	r3, r1
 80043d2:	4313      	orrs	r3, r2
 80043d4:	d038      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80043d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e2:	d018      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80043e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e8:	d811      	bhi.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80043ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ee:	d014      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80043f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f4:	d80b      	bhi.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d011      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80043fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043fe:	d106      	bne.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004400:	4bc3      	ldr	r3, [pc, #780]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	4ac2      	ldr	r2, [pc, #776]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800440a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800440c:	e008      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004414:	e004      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004416:	bf00      	nop
 8004418:	e002      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800441a:	bf00      	nop
 800441c:	e000      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800441e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004420:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10b      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004428:	4bb9      	ldr	r3, [pc, #740]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800442a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004434:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004438:	4ab5      	ldr	r2, [pc, #724]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800443a:	430b      	orrs	r3, r1
 800443c:	6553      	str	r3, [r2, #84]	; 0x54
 800443e:	e003      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004440:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004444:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800444c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004450:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004454:	65bb      	str	r3, [r7, #88]	; 0x58
 8004456:	2300      	movs	r3, #0
 8004458:	65fb      	str	r3, [r7, #92]	; 0x5c
 800445a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800445e:	460b      	mov	r3, r1
 8004460:	4313      	orrs	r3, r2
 8004462:	d009      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004464:	4baa      	ldr	r3, [pc, #680]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004468:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800446c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004472:	4aa7      	ldr	r2, [pc, #668]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004474:	430b      	orrs	r3, r1
 8004476:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800447c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004480:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004484:	653b      	str	r3, [r7, #80]	; 0x50
 8004486:	2300      	movs	r3, #0
 8004488:	657b      	str	r3, [r7, #84]	; 0x54
 800448a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800448e:	460b      	mov	r3, r1
 8004490:	4313      	orrs	r3, r2
 8004492:	d00a      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004494:	4b9e      	ldr	r3, [pc, #632]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800449c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80044a4:	4a9a      	ldr	r2, [pc, #616]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044a6:	430b      	orrs	r3, r1
 80044a8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80044b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80044b8:	2300      	movs	r3, #0
 80044ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044bc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80044c0:	460b      	mov	r3, r1
 80044c2:	4313      	orrs	r3, r2
 80044c4:	d009      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044c6:	4b92      	ldr	r3, [pc, #584]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ca:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80044ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044d4:	4a8e      	ldr	r2, [pc, #568]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044d6:	430b      	orrs	r3, r1
 80044d8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80044e6:	643b      	str	r3, [r7, #64]	; 0x40
 80044e8:	2300      	movs	r3, #0
 80044ea:	647b      	str	r3, [r7, #68]	; 0x44
 80044ec:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80044f0:	460b      	mov	r3, r1
 80044f2:	4313      	orrs	r3, r2
 80044f4:	d00e      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044f6:	4b86      	ldr	r3, [pc, #536]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	4a85      	ldr	r2, [pc, #532]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004500:	6113      	str	r3, [r2, #16]
 8004502:	4b83      	ldr	r3, [pc, #524]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004504:	6919      	ldr	r1, [r3, #16]
 8004506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800450a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800450e:	4a80      	ldr	r2, [pc, #512]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004510:	430b      	orrs	r3, r1
 8004512:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004520:	63bb      	str	r3, [r7, #56]	; 0x38
 8004522:	2300      	movs	r3, #0
 8004524:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004526:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800452a:	460b      	mov	r3, r1
 800452c:	4313      	orrs	r3, r2
 800452e:	d009      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004530:	4b77      	ldr	r3, [pc, #476]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004534:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800453c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453e:	4a74      	ldr	r2, [pc, #464]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004540:	430b      	orrs	r3, r1
 8004542:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004550:	633b      	str	r3, [r7, #48]	; 0x30
 8004552:	2300      	movs	r3, #0
 8004554:	637b      	str	r3, [r7, #52]	; 0x34
 8004556:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800455a:	460b      	mov	r3, r1
 800455c:	4313      	orrs	r3, r2
 800455e:	d00a      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004560:	4b6b      	ldr	r3, [pc, #428]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004564:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800456c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004570:	4a67      	ldr	r2, [pc, #412]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004572:	430b      	orrs	r3, r1
 8004574:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	2100      	movs	r1, #0
 8004580:	62b9      	str	r1, [r7, #40]	; 0x28
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004588:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800458c:	460b      	mov	r3, r1
 800458e:	4313      	orrs	r3, r2
 8004590:	d011      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004596:	3308      	adds	r3, #8
 8004598:	2100      	movs	r1, #0
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fb78 	bl	8004c90 <RCCEx_PLL2_Config>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80045a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80045b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	2100      	movs	r1, #0
 80045c0:	6239      	str	r1, [r7, #32]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	627b      	str	r3, [r7, #36]	; 0x24
 80045c8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80045cc:	460b      	mov	r3, r1
 80045ce:	4313      	orrs	r3, r2
 80045d0:	d011      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d6:	3308      	adds	r3, #8
 80045d8:	2101      	movs	r1, #1
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fb58 	bl	8004c90 <RCCEx_PLL2_Config>
 80045e0:	4603      	mov	r3, r0
 80045e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80045e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80045f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fe:	2100      	movs	r1, #0
 8004600:	61b9      	str	r1, [r7, #24]
 8004602:	f003 0304 	and.w	r3, r3, #4
 8004606:	61fb      	str	r3, [r7, #28]
 8004608:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800460c:	460b      	mov	r3, r1
 800460e:	4313      	orrs	r3, r2
 8004610:	d011      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004616:	3308      	adds	r3, #8
 8004618:	2102      	movs	r1, #2
 800461a:	4618      	mov	r0, r3
 800461c:	f000 fb38 	bl	8004c90 <RCCEx_PLL2_Config>
 8004620:	4603      	mov	r3, r0
 8004622:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004626:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004632:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800463a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463e:	2100      	movs	r1, #0
 8004640:	6139      	str	r1, [r7, #16]
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800464c:	460b      	mov	r3, r1
 800464e:	4313      	orrs	r3, r2
 8004650:	d011      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004656:	3328      	adds	r3, #40	; 0x28
 8004658:	2100      	movs	r1, #0
 800465a:	4618      	mov	r0, r3
 800465c:	f000 fbca 	bl	8004df4 <RCCEx_PLL3_Config>
 8004660:	4603      	mov	r3, r0
 8004662:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004666:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800466e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004672:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800467a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467e:	2100      	movs	r1, #0
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800468c:	460b      	mov	r3, r1
 800468e:	4313      	orrs	r3, r2
 8004690:	d011      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004696:	3328      	adds	r3, #40	; 0x28
 8004698:	2101      	movs	r1, #1
 800469a:	4618      	mov	r0, r3
 800469c:	f000 fbaa 	bl	8004df4 <RCCEx_PLL3_Config>
 80046a0:	4603      	mov	r3, r0
 80046a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80046a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80046b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046be:	2100      	movs	r1, #0
 80046c0:	6039      	str	r1, [r7, #0]
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	607b      	str	r3, [r7, #4]
 80046c8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80046cc:	460b      	mov	r3, r1
 80046ce:	4313      	orrs	r3, r2
 80046d0:	d011      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d6:	3328      	adds	r3, #40	; 0x28
 80046d8:	2102      	movs	r1, #2
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 fb8a 	bl	8004df4 <RCCEx_PLL3_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80046e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80046f6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	e000      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
}
 8004704:	4618      	mov	r0, r3
 8004706:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800470a:	46bd      	mov	sp, r7
 800470c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004710:	58024400 	.word	0x58024400

08004714 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004718:	f7fe fd96 	bl	8003248 <HAL_RCC_GetHCLKFreq>
 800471c:	4602      	mov	r2, r0
 800471e:	4b06      	ldr	r3, [pc, #24]	; (8004738 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	091b      	lsrs	r3, r3, #4
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	4904      	ldr	r1, [pc, #16]	; (800473c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800472a:	5ccb      	ldrb	r3, [r1, r3]
 800472c:	f003 031f 	and.w	r3, r3, #31
 8004730:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004734:	4618      	mov	r0, r3
 8004736:	bd80      	pop	{r7, pc}
 8004738:	58024400 	.word	0x58024400
 800473c:	08006788 	.word	0x08006788

08004740 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004740:	b480      	push	{r7}
 8004742:	b089      	sub	sp, #36	; 0x24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004748:	4ba1      	ldr	r3, [pc, #644]	; (80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474c:	f003 0303 	and.w	r3, r3, #3
 8004750:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004752:	4b9f      	ldr	r3, [pc, #636]	; (80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004756:	0b1b      	lsrs	r3, r3, #12
 8004758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800475c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800475e:	4b9c      	ldr	r3, [pc, #624]	; (80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	091b      	lsrs	r3, r3, #4
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800476a:	4b99      	ldr	r3, [pc, #612]	; (80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800476c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476e:	08db      	lsrs	r3, r3, #3
 8004770:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	fb02 f303 	mul.w	r3, r2, r3
 800477a:	ee07 3a90 	vmov	s15, r3
 800477e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004782:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 8111 	beq.w	80049b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	2b02      	cmp	r3, #2
 8004792:	f000 8083 	beq.w	800489c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	2b02      	cmp	r3, #2
 800479a:	f200 80a1 	bhi.w	80048e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d056      	beq.n	8004858 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80047aa:	e099      	b.n	80048e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047ac:	4b88      	ldr	r3, [pc, #544]	; (80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d02d      	beq.n	8004814 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047b8:	4b85      	ldr	r3, [pc, #532]	; (80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	08db      	lsrs	r3, r3, #3
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	4a84      	ldr	r2, [pc, #528]	; (80049d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80047c4:	fa22 f303 	lsr.w	r3, r2, r3
 80047c8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	ee07 3a90 	vmov	s15, r3
 80047d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047e2:	4b7b      	ldr	r3, [pc, #492]	; (80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ea:	ee07 3a90 	vmov	s15, r3
 80047ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800480a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800480e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004812:	e087      	b.n	8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	ee07 3a90 	vmov	s15, r3
 800481a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800481e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80049dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004826:	4b6a      	ldr	r3, [pc, #424]	; (80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800482e:	ee07 3a90 	vmov	s15, r3
 8004832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004836:	ed97 6a03 	vldr	s12, [r7, #12]
 800483a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800483e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800484a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800484e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004852:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004856:	e065      	b.n	8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004862:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80049e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800486a:	4b59      	ldr	r3, [pc, #356]	; (80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800486c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004872:	ee07 3a90 	vmov	s15, r3
 8004876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487a:	ed97 6a03 	vldr	s12, [r7, #12]
 800487e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800488e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004896:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800489a:	e043      	b.n	8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80048aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ae:	4b48      	ldr	r3, [pc, #288]	; (80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048be:	ed97 6a03 	vldr	s12, [r7, #12]
 80048c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048de:	e021      	b.n	8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80049e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f2:	4b37      	ldr	r3, [pc, #220]	; (80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004902:	ed97 6a03 	vldr	s12, [r7, #12]
 8004906:	eddf 5a34 	vldr	s11, [pc, #208]	; 80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800490a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800490e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800491a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004922:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004924:	4b2a      	ldr	r3, [pc, #168]	; (80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004928:	0a5b      	lsrs	r3, r3, #9
 800492a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800492e:	ee07 3a90 	vmov	s15, r3
 8004932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004936:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800493a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800493e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004942:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800494a:	ee17 2a90 	vmov	r2, s15
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004952:	4b1f      	ldr	r3, [pc, #124]	; (80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004956:	0c1b      	lsrs	r3, r3, #16
 8004958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800495c:	ee07 3a90 	vmov	s15, r3
 8004960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004964:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004968:	ee37 7a87 	vadd.f32	s14, s15, s14
 800496c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004978:	ee17 2a90 	vmov	r2, s15
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004980:	4b13      	ldr	r3, [pc, #76]	; (80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004984:	0e1b      	lsrs	r3, r3, #24
 8004986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800498a:	ee07 3a90 	vmov	s15, r3
 800498e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004992:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004996:	ee37 7a87 	vadd.f32	s14, s15, s14
 800499a:	edd7 6a07 	vldr	s13, [r7, #28]
 800499e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049a6:	ee17 2a90 	vmov	r2, s15
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80049ae:	e008      	b.n	80049c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	609a      	str	r2, [r3, #8]
}
 80049c2:	bf00      	nop
 80049c4:	3724      	adds	r7, #36	; 0x24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	58024400 	.word	0x58024400
 80049d4:	03d09000 	.word	0x03d09000
 80049d8:	46000000 	.word	0x46000000
 80049dc:	4c742400 	.word	0x4c742400
 80049e0:	4a742400 	.word	0x4a742400
 80049e4:	4af42400 	.word	0x4af42400

080049e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b089      	sub	sp, #36	; 0x24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049f0:	4ba1      	ldr	r3, [pc, #644]	; (8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f4:	f003 0303 	and.w	r3, r3, #3
 80049f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80049fa:	4b9f      	ldr	r3, [pc, #636]	; (8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fe:	0d1b      	lsrs	r3, r3, #20
 8004a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a04:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a06:	4b9c      	ldr	r3, [pc, #624]	; (8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0a:	0a1b      	lsrs	r3, r3, #8
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004a12:	4b99      	ldr	r3, [pc, #612]	; (8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a16:	08db      	lsrs	r3, r3, #3
 8004a18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	fb02 f303 	mul.w	r3, r2, r3
 8004a22:	ee07 3a90 	vmov	s15, r3
 8004a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 8111 	beq.w	8004c58 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	f000 8083 	beq.w	8004b44 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	f200 80a1 	bhi.w	8004b88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d056      	beq.n	8004b00 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a52:	e099      	b.n	8004b88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a54:	4b88      	ldr	r3, [pc, #544]	; (8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0320 	and.w	r3, r3, #32
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d02d      	beq.n	8004abc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a60:	4b85      	ldr	r3, [pc, #532]	; (8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	08db      	lsrs	r3, r3, #3
 8004a66:	f003 0303 	and.w	r3, r3, #3
 8004a6a:	4a84      	ldr	r2, [pc, #528]	; (8004c7c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a70:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	ee07 3a90 	vmov	s15, r3
 8004a78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a8a:	4b7b      	ldr	r3, [pc, #492]	; (8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a9e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004aba:	e087      	b.n	8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	ee07 3a90 	vmov	s15, r3
 8004ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004c84 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ace:	4b6a      	ldr	r3, [pc, #424]	; (8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad6:	ee07 3a90 	vmov	s15, r3
 8004ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ae2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004afa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004afe:	e065      	b.n	8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004c88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b12:	4b59      	ldr	r3, [pc, #356]	; (8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b26:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b42:	e043      	b.n	8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004c8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b56:	4b48      	ldr	r3, [pc, #288]	; (8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b86:	e021      	b.n	8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	ee07 3a90 	vmov	s15, r3
 8004b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004c88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b9a:	4b37      	ldr	r3, [pc, #220]	; (8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004bcc:	4b2a      	ldr	r3, [pc, #168]	; (8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd0:	0a5b      	lsrs	r3, r3, #9
 8004bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bd6:	ee07 3a90 	vmov	s15, r3
 8004bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004be2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004be6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bf2:	ee17 2a90 	vmov	r2, s15
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004bfa:	4b1f      	ldr	r3, [pc, #124]	; (8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	0c1b      	lsrs	r3, r3, #16
 8004c00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c04:	ee07 3a90 	vmov	s15, r3
 8004c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c14:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c20:	ee17 2a90 	vmov	r2, s15
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004c28:	4b13      	ldr	r3, [pc, #76]	; (8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	0e1b      	lsrs	r3, r3, #24
 8004c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c32:	ee07 3a90 	vmov	s15, r3
 8004c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c42:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c4e:	ee17 2a90 	vmov	r2, s15
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c56:	e008      	b.n	8004c6a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	609a      	str	r2, [r3, #8]
}
 8004c6a:	bf00      	nop
 8004c6c:	3724      	adds	r7, #36	; 0x24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	58024400 	.word	0x58024400
 8004c7c:	03d09000 	.word	0x03d09000
 8004c80:	46000000 	.word	0x46000000
 8004c84:	4c742400 	.word	0x4c742400
 8004c88:	4a742400 	.word	0x4a742400
 8004c8c:	4af42400 	.word	0x4af42400

08004c90 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c9e:	4b53      	ldr	r3, [pc, #332]	; (8004dec <RCCEx_PLL2_Config+0x15c>)
 8004ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d101      	bne.n	8004cae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e099      	b.n	8004de2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004cae:	4b4f      	ldr	r3, [pc, #316]	; (8004dec <RCCEx_PLL2_Config+0x15c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a4e      	ldr	r2, [pc, #312]	; (8004dec <RCCEx_PLL2_Config+0x15c>)
 8004cb4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cba:	f7fc fa39 	bl	8001130 <HAL_GetTick>
 8004cbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cc0:	e008      	b.n	8004cd4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cc2:	f7fc fa35 	bl	8001130 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e086      	b.n	8004de2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cd4:	4b45      	ldr	r3, [pc, #276]	; (8004dec <RCCEx_PLL2_Config+0x15c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1f0      	bne.n	8004cc2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ce0:	4b42      	ldr	r3, [pc, #264]	; (8004dec <RCCEx_PLL2_Config+0x15c>)
 8004ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	031b      	lsls	r3, r3, #12
 8004cee:	493f      	ldr	r1, [pc, #252]	; (8004dec <RCCEx_PLL2_Config+0x15c>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	628b      	str	r3, [r1, #40]	; 0x28
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	3b01      	subs	r3, #1
 8004d04:	025b      	lsls	r3, r3, #9
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	041b      	lsls	r3, r3, #16
 8004d12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	061b      	lsls	r3, r3, #24
 8004d20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d24:	4931      	ldr	r1, [pc, #196]	; (8004dec <RCCEx_PLL2_Config+0x15c>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d2a:	4b30      	ldr	r3, [pc, #192]	; (8004dec <RCCEx_PLL2_Config+0x15c>)
 8004d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	492d      	ldr	r1, [pc, #180]	; (8004dec <RCCEx_PLL2_Config+0x15c>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d3c:	4b2b      	ldr	r3, [pc, #172]	; (8004dec <RCCEx_PLL2_Config+0x15c>)
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	f023 0220 	bic.w	r2, r3, #32
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	4928      	ldr	r1, [pc, #160]	; (8004dec <RCCEx_PLL2_Config+0x15c>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d4e:	4b27      	ldr	r3, [pc, #156]	; (8004dec <RCCEx_PLL2_Config+0x15c>)
 8004d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d52:	4a26      	ldr	r2, [pc, #152]	; (8004dec <RCCEx_PLL2_Config+0x15c>)
 8004d54:	f023 0310 	bic.w	r3, r3, #16
 8004d58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d5a:	4b24      	ldr	r3, [pc, #144]	; (8004dec <RCCEx_PLL2_Config+0x15c>)
 8004d5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d5e:	4b24      	ldr	r3, [pc, #144]	; (8004df0 <RCCEx_PLL2_Config+0x160>)
 8004d60:	4013      	ands	r3, r2
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	69d2      	ldr	r2, [r2, #28]
 8004d66:	00d2      	lsls	r2, r2, #3
 8004d68:	4920      	ldr	r1, [pc, #128]	; (8004dec <RCCEx_PLL2_Config+0x15c>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d6e:	4b1f      	ldr	r3, [pc, #124]	; (8004dec <RCCEx_PLL2_Config+0x15c>)
 8004d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d72:	4a1e      	ldr	r2, [pc, #120]	; (8004dec <RCCEx_PLL2_Config+0x15c>)
 8004d74:	f043 0310 	orr.w	r3, r3, #16
 8004d78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d106      	bne.n	8004d8e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d80:	4b1a      	ldr	r3, [pc, #104]	; (8004dec <RCCEx_PLL2_Config+0x15c>)
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	4a19      	ldr	r2, [pc, #100]	; (8004dec <RCCEx_PLL2_Config+0x15c>)
 8004d86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d8c:	e00f      	b.n	8004dae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d106      	bne.n	8004da2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d94:	4b15      	ldr	r3, [pc, #84]	; (8004dec <RCCEx_PLL2_Config+0x15c>)
 8004d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d98:	4a14      	ldr	r2, [pc, #80]	; (8004dec <RCCEx_PLL2_Config+0x15c>)
 8004d9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004da0:	e005      	b.n	8004dae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004da2:	4b12      	ldr	r3, [pc, #72]	; (8004dec <RCCEx_PLL2_Config+0x15c>)
 8004da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da6:	4a11      	ldr	r2, [pc, #68]	; (8004dec <RCCEx_PLL2_Config+0x15c>)
 8004da8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004dac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004dae:	4b0f      	ldr	r3, [pc, #60]	; (8004dec <RCCEx_PLL2_Config+0x15c>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a0e      	ldr	r2, [pc, #56]	; (8004dec <RCCEx_PLL2_Config+0x15c>)
 8004db4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004db8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dba:	f7fc f9b9 	bl	8001130 <HAL_GetTick>
 8004dbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004dc0:	e008      	b.n	8004dd4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004dc2:	f7fc f9b5 	bl	8001130 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d901      	bls.n	8004dd4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e006      	b.n	8004de2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004dd4:	4b05      	ldr	r3, [pc, #20]	; (8004dec <RCCEx_PLL2_Config+0x15c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0f0      	beq.n	8004dc2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	58024400 	.word	0x58024400
 8004df0:	ffff0007 	.word	0xffff0007

08004df4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e02:	4b53      	ldr	r3, [pc, #332]	; (8004f50 <RCCEx_PLL3_Config+0x15c>)
 8004e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	2b03      	cmp	r3, #3
 8004e0c:	d101      	bne.n	8004e12 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e099      	b.n	8004f46 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e12:	4b4f      	ldr	r3, [pc, #316]	; (8004f50 <RCCEx_PLL3_Config+0x15c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a4e      	ldr	r2, [pc, #312]	; (8004f50 <RCCEx_PLL3_Config+0x15c>)
 8004e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e1e:	f7fc f987 	bl	8001130 <HAL_GetTick>
 8004e22:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e24:	e008      	b.n	8004e38 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e26:	f7fc f983 	bl	8001130 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e086      	b.n	8004f46 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e38:	4b45      	ldr	r3, [pc, #276]	; (8004f50 <RCCEx_PLL3_Config+0x15c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1f0      	bne.n	8004e26 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e44:	4b42      	ldr	r3, [pc, #264]	; (8004f50 <RCCEx_PLL3_Config+0x15c>)
 8004e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e48:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	051b      	lsls	r3, r3, #20
 8004e52:	493f      	ldr	r1, [pc, #252]	; (8004f50 <RCCEx_PLL3_Config+0x15c>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	628b      	str	r3, [r1, #40]	; 0x28
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	025b      	lsls	r3, r3, #9
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	041b      	lsls	r3, r3, #16
 8004e76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	3b01      	subs	r3, #1
 8004e82:	061b      	lsls	r3, r3, #24
 8004e84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e88:	4931      	ldr	r1, [pc, #196]	; (8004f50 <RCCEx_PLL3_Config+0x15c>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e8e:	4b30      	ldr	r3, [pc, #192]	; (8004f50 <RCCEx_PLL3_Config+0x15c>)
 8004e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	492d      	ldr	r1, [pc, #180]	; (8004f50 <RCCEx_PLL3_Config+0x15c>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ea0:	4b2b      	ldr	r3, [pc, #172]	; (8004f50 <RCCEx_PLL3_Config+0x15c>)
 8004ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	4928      	ldr	r1, [pc, #160]	; (8004f50 <RCCEx_PLL3_Config+0x15c>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004eb2:	4b27      	ldr	r3, [pc, #156]	; (8004f50 <RCCEx_PLL3_Config+0x15c>)
 8004eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb6:	4a26      	ldr	r2, [pc, #152]	; (8004f50 <RCCEx_PLL3_Config+0x15c>)
 8004eb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ebc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ebe:	4b24      	ldr	r3, [pc, #144]	; (8004f50 <RCCEx_PLL3_Config+0x15c>)
 8004ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ec2:	4b24      	ldr	r3, [pc, #144]	; (8004f54 <RCCEx_PLL3_Config+0x160>)
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	69d2      	ldr	r2, [r2, #28]
 8004eca:	00d2      	lsls	r2, r2, #3
 8004ecc:	4920      	ldr	r1, [pc, #128]	; (8004f50 <RCCEx_PLL3_Config+0x15c>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004ed2:	4b1f      	ldr	r3, [pc, #124]	; (8004f50 <RCCEx_PLL3_Config+0x15c>)
 8004ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed6:	4a1e      	ldr	r2, [pc, #120]	; (8004f50 <RCCEx_PLL3_Config+0x15c>)
 8004ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004edc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d106      	bne.n	8004ef2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ee4:	4b1a      	ldr	r3, [pc, #104]	; (8004f50 <RCCEx_PLL3_Config+0x15c>)
 8004ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee8:	4a19      	ldr	r2, [pc, #100]	; (8004f50 <RCCEx_PLL3_Config+0x15c>)
 8004eea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004eee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ef0:	e00f      	b.n	8004f12 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d106      	bne.n	8004f06 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ef8:	4b15      	ldr	r3, [pc, #84]	; (8004f50 <RCCEx_PLL3_Config+0x15c>)
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	4a14      	ldr	r2, [pc, #80]	; (8004f50 <RCCEx_PLL3_Config+0x15c>)
 8004efe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f04:	e005      	b.n	8004f12 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f06:	4b12      	ldr	r3, [pc, #72]	; (8004f50 <RCCEx_PLL3_Config+0x15c>)
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0a:	4a11      	ldr	r2, [pc, #68]	; (8004f50 <RCCEx_PLL3_Config+0x15c>)
 8004f0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f10:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f12:	4b0f      	ldr	r3, [pc, #60]	; (8004f50 <RCCEx_PLL3_Config+0x15c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a0e      	ldr	r2, [pc, #56]	; (8004f50 <RCCEx_PLL3_Config+0x15c>)
 8004f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f1e:	f7fc f907 	bl	8001130 <HAL_GetTick>
 8004f22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f24:	e008      	b.n	8004f38 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f26:	f7fc f903 	bl	8001130 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d901      	bls.n	8004f38 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e006      	b.n	8004f46 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f38:	4b05      	ldr	r3, [pc, #20]	; (8004f50 <RCCEx_PLL3_Config+0x15c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0f0      	beq.n	8004f26 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	58024400 	.word	0x58024400
 8004f54:	ffff0007 	.word	0xffff0007

08004f58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e042      	b.n	8004ff0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d106      	bne.n	8004f82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7fb ff07 	bl	8000d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2224      	movs	r2, #36	; 0x24
 8004f86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0201 	bic.w	r2, r2, #1
 8004f98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f82c 	bl	8004ff8 <UART_SetConfig>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d101      	bne.n	8004faa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e022      	b.n	8004ff0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d002      	beq.n	8004fb8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fd88 	bl	8005ac8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0201 	orr.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 fe0f 	bl	8005c0c <UART_CheckIdleState>
 8004fee:	4603      	mov	r3, r0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ffc:	b092      	sub	sp, #72	; 0x48
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	431a      	orrs	r2, r3
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	431a      	orrs	r2, r3
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	4313      	orrs	r3, r2
 800501e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	4bbe      	ldr	r3, [pc, #760]	; (8005320 <UART_SetConfig+0x328>)
 8005028:	4013      	ands	r3, r2
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	6812      	ldr	r2, [r2, #0]
 800502e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005030:	430b      	orrs	r3, r1
 8005032:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4ab3      	ldr	r2, [pc, #716]	; (8005324 <UART_SetConfig+0x32c>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d004      	beq.n	8005064 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005060:	4313      	orrs	r3, r2
 8005062:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689a      	ldr	r2, [r3, #8]
 800506a:	4baf      	ldr	r3, [pc, #700]	; (8005328 <UART_SetConfig+0x330>)
 800506c:	4013      	ands	r3, r2
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	6812      	ldr	r2, [r2, #0]
 8005072:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005074:	430b      	orrs	r3, r1
 8005076:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507e:	f023 010f 	bic.w	r1, r3, #15
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4aa6      	ldr	r2, [pc, #664]	; (800532c <UART_SetConfig+0x334>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d177      	bne.n	8005188 <UART_SetConfig+0x190>
 8005098:	4ba5      	ldr	r3, [pc, #660]	; (8005330 <UART_SetConfig+0x338>)
 800509a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050a0:	2b28      	cmp	r3, #40	; 0x28
 80050a2:	d86d      	bhi.n	8005180 <UART_SetConfig+0x188>
 80050a4:	a201      	add	r2, pc, #4	; (adr r2, 80050ac <UART_SetConfig+0xb4>)
 80050a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050aa:	bf00      	nop
 80050ac:	08005151 	.word	0x08005151
 80050b0:	08005181 	.word	0x08005181
 80050b4:	08005181 	.word	0x08005181
 80050b8:	08005181 	.word	0x08005181
 80050bc:	08005181 	.word	0x08005181
 80050c0:	08005181 	.word	0x08005181
 80050c4:	08005181 	.word	0x08005181
 80050c8:	08005181 	.word	0x08005181
 80050cc:	08005159 	.word	0x08005159
 80050d0:	08005181 	.word	0x08005181
 80050d4:	08005181 	.word	0x08005181
 80050d8:	08005181 	.word	0x08005181
 80050dc:	08005181 	.word	0x08005181
 80050e0:	08005181 	.word	0x08005181
 80050e4:	08005181 	.word	0x08005181
 80050e8:	08005181 	.word	0x08005181
 80050ec:	08005161 	.word	0x08005161
 80050f0:	08005181 	.word	0x08005181
 80050f4:	08005181 	.word	0x08005181
 80050f8:	08005181 	.word	0x08005181
 80050fc:	08005181 	.word	0x08005181
 8005100:	08005181 	.word	0x08005181
 8005104:	08005181 	.word	0x08005181
 8005108:	08005181 	.word	0x08005181
 800510c:	08005169 	.word	0x08005169
 8005110:	08005181 	.word	0x08005181
 8005114:	08005181 	.word	0x08005181
 8005118:	08005181 	.word	0x08005181
 800511c:	08005181 	.word	0x08005181
 8005120:	08005181 	.word	0x08005181
 8005124:	08005181 	.word	0x08005181
 8005128:	08005181 	.word	0x08005181
 800512c:	08005171 	.word	0x08005171
 8005130:	08005181 	.word	0x08005181
 8005134:	08005181 	.word	0x08005181
 8005138:	08005181 	.word	0x08005181
 800513c:	08005181 	.word	0x08005181
 8005140:	08005181 	.word	0x08005181
 8005144:	08005181 	.word	0x08005181
 8005148:	08005181 	.word	0x08005181
 800514c:	08005179 	.word	0x08005179
 8005150:	2301      	movs	r3, #1
 8005152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005156:	e222      	b.n	800559e <UART_SetConfig+0x5a6>
 8005158:	2304      	movs	r3, #4
 800515a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800515e:	e21e      	b.n	800559e <UART_SetConfig+0x5a6>
 8005160:	2308      	movs	r3, #8
 8005162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005166:	e21a      	b.n	800559e <UART_SetConfig+0x5a6>
 8005168:	2310      	movs	r3, #16
 800516a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800516e:	e216      	b.n	800559e <UART_SetConfig+0x5a6>
 8005170:	2320      	movs	r3, #32
 8005172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005176:	e212      	b.n	800559e <UART_SetConfig+0x5a6>
 8005178:	2340      	movs	r3, #64	; 0x40
 800517a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800517e:	e20e      	b.n	800559e <UART_SetConfig+0x5a6>
 8005180:	2380      	movs	r3, #128	; 0x80
 8005182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005186:	e20a      	b.n	800559e <UART_SetConfig+0x5a6>
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a69      	ldr	r2, [pc, #420]	; (8005334 <UART_SetConfig+0x33c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d130      	bne.n	80051f4 <UART_SetConfig+0x1fc>
 8005192:	4b67      	ldr	r3, [pc, #412]	; (8005330 <UART_SetConfig+0x338>)
 8005194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	2b05      	cmp	r3, #5
 800519c:	d826      	bhi.n	80051ec <UART_SetConfig+0x1f4>
 800519e:	a201      	add	r2, pc, #4	; (adr r2, 80051a4 <UART_SetConfig+0x1ac>)
 80051a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a4:	080051bd 	.word	0x080051bd
 80051a8:	080051c5 	.word	0x080051c5
 80051ac:	080051cd 	.word	0x080051cd
 80051b0:	080051d5 	.word	0x080051d5
 80051b4:	080051dd 	.word	0x080051dd
 80051b8:	080051e5 	.word	0x080051e5
 80051bc:	2300      	movs	r3, #0
 80051be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051c2:	e1ec      	b.n	800559e <UART_SetConfig+0x5a6>
 80051c4:	2304      	movs	r3, #4
 80051c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ca:	e1e8      	b.n	800559e <UART_SetConfig+0x5a6>
 80051cc:	2308      	movs	r3, #8
 80051ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051d2:	e1e4      	b.n	800559e <UART_SetConfig+0x5a6>
 80051d4:	2310      	movs	r3, #16
 80051d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051da:	e1e0      	b.n	800559e <UART_SetConfig+0x5a6>
 80051dc:	2320      	movs	r3, #32
 80051de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051e2:	e1dc      	b.n	800559e <UART_SetConfig+0x5a6>
 80051e4:	2340      	movs	r3, #64	; 0x40
 80051e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ea:	e1d8      	b.n	800559e <UART_SetConfig+0x5a6>
 80051ec:	2380      	movs	r3, #128	; 0x80
 80051ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051f2:	e1d4      	b.n	800559e <UART_SetConfig+0x5a6>
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a4f      	ldr	r2, [pc, #316]	; (8005338 <UART_SetConfig+0x340>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d130      	bne.n	8005260 <UART_SetConfig+0x268>
 80051fe:	4b4c      	ldr	r3, [pc, #304]	; (8005330 <UART_SetConfig+0x338>)
 8005200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	2b05      	cmp	r3, #5
 8005208:	d826      	bhi.n	8005258 <UART_SetConfig+0x260>
 800520a:	a201      	add	r2, pc, #4	; (adr r2, 8005210 <UART_SetConfig+0x218>)
 800520c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005210:	08005229 	.word	0x08005229
 8005214:	08005231 	.word	0x08005231
 8005218:	08005239 	.word	0x08005239
 800521c:	08005241 	.word	0x08005241
 8005220:	08005249 	.word	0x08005249
 8005224:	08005251 	.word	0x08005251
 8005228:	2300      	movs	r3, #0
 800522a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800522e:	e1b6      	b.n	800559e <UART_SetConfig+0x5a6>
 8005230:	2304      	movs	r3, #4
 8005232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005236:	e1b2      	b.n	800559e <UART_SetConfig+0x5a6>
 8005238:	2308      	movs	r3, #8
 800523a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800523e:	e1ae      	b.n	800559e <UART_SetConfig+0x5a6>
 8005240:	2310      	movs	r3, #16
 8005242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005246:	e1aa      	b.n	800559e <UART_SetConfig+0x5a6>
 8005248:	2320      	movs	r3, #32
 800524a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800524e:	e1a6      	b.n	800559e <UART_SetConfig+0x5a6>
 8005250:	2340      	movs	r3, #64	; 0x40
 8005252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005256:	e1a2      	b.n	800559e <UART_SetConfig+0x5a6>
 8005258:	2380      	movs	r3, #128	; 0x80
 800525a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800525e:	e19e      	b.n	800559e <UART_SetConfig+0x5a6>
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a35      	ldr	r2, [pc, #212]	; (800533c <UART_SetConfig+0x344>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d130      	bne.n	80052cc <UART_SetConfig+0x2d4>
 800526a:	4b31      	ldr	r3, [pc, #196]	; (8005330 <UART_SetConfig+0x338>)
 800526c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	2b05      	cmp	r3, #5
 8005274:	d826      	bhi.n	80052c4 <UART_SetConfig+0x2cc>
 8005276:	a201      	add	r2, pc, #4	; (adr r2, 800527c <UART_SetConfig+0x284>)
 8005278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527c:	08005295 	.word	0x08005295
 8005280:	0800529d 	.word	0x0800529d
 8005284:	080052a5 	.word	0x080052a5
 8005288:	080052ad 	.word	0x080052ad
 800528c:	080052b5 	.word	0x080052b5
 8005290:	080052bd 	.word	0x080052bd
 8005294:	2300      	movs	r3, #0
 8005296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800529a:	e180      	b.n	800559e <UART_SetConfig+0x5a6>
 800529c:	2304      	movs	r3, #4
 800529e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052a2:	e17c      	b.n	800559e <UART_SetConfig+0x5a6>
 80052a4:	2308      	movs	r3, #8
 80052a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052aa:	e178      	b.n	800559e <UART_SetConfig+0x5a6>
 80052ac:	2310      	movs	r3, #16
 80052ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052b2:	e174      	b.n	800559e <UART_SetConfig+0x5a6>
 80052b4:	2320      	movs	r3, #32
 80052b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ba:	e170      	b.n	800559e <UART_SetConfig+0x5a6>
 80052bc:	2340      	movs	r3, #64	; 0x40
 80052be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052c2:	e16c      	b.n	800559e <UART_SetConfig+0x5a6>
 80052c4:	2380      	movs	r3, #128	; 0x80
 80052c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ca:	e168      	b.n	800559e <UART_SetConfig+0x5a6>
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a1b      	ldr	r2, [pc, #108]	; (8005340 <UART_SetConfig+0x348>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d142      	bne.n	800535c <UART_SetConfig+0x364>
 80052d6:	4b16      	ldr	r3, [pc, #88]	; (8005330 <UART_SetConfig+0x338>)
 80052d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052da:	f003 0307 	and.w	r3, r3, #7
 80052de:	2b05      	cmp	r3, #5
 80052e0:	d838      	bhi.n	8005354 <UART_SetConfig+0x35c>
 80052e2:	a201      	add	r2, pc, #4	; (adr r2, 80052e8 <UART_SetConfig+0x2f0>)
 80052e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e8:	08005301 	.word	0x08005301
 80052ec:	08005309 	.word	0x08005309
 80052f0:	08005311 	.word	0x08005311
 80052f4:	08005319 	.word	0x08005319
 80052f8:	08005345 	.word	0x08005345
 80052fc:	0800534d 	.word	0x0800534d
 8005300:	2300      	movs	r3, #0
 8005302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005306:	e14a      	b.n	800559e <UART_SetConfig+0x5a6>
 8005308:	2304      	movs	r3, #4
 800530a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800530e:	e146      	b.n	800559e <UART_SetConfig+0x5a6>
 8005310:	2308      	movs	r3, #8
 8005312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005316:	e142      	b.n	800559e <UART_SetConfig+0x5a6>
 8005318:	2310      	movs	r3, #16
 800531a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800531e:	e13e      	b.n	800559e <UART_SetConfig+0x5a6>
 8005320:	cfff69f3 	.word	0xcfff69f3
 8005324:	58000c00 	.word	0x58000c00
 8005328:	11fff4ff 	.word	0x11fff4ff
 800532c:	40011000 	.word	0x40011000
 8005330:	58024400 	.word	0x58024400
 8005334:	40004400 	.word	0x40004400
 8005338:	40004800 	.word	0x40004800
 800533c:	40004c00 	.word	0x40004c00
 8005340:	40005000 	.word	0x40005000
 8005344:	2320      	movs	r3, #32
 8005346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800534a:	e128      	b.n	800559e <UART_SetConfig+0x5a6>
 800534c:	2340      	movs	r3, #64	; 0x40
 800534e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005352:	e124      	b.n	800559e <UART_SetConfig+0x5a6>
 8005354:	2380      	movs	r3, #128	; 0x80
 8005356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800535a:	e120      	b.n	800559e <UART_SetConfig+0x5a6>
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4acb      	ldr	r2, [pc, #812]	; (8005690 <UART_SetConfig+0x698>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d176      	bne.n	8005454 <UART_SetConfig+0x45c>
 8005366:	4bcb      	ldr	r3, [pc, #812]	; (8005694 <UART_SetConfig+0x69c>)
 8005368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800536e:	2b28      	cmp	r3, #40	; 0x28
 8005370:	d86c      	bhi.n	800544c <UART_SetConfig+0x454>
 8005372:	a201      	add	r2, pc, #4	; (adr r2, 8005378 <UART_SetConfig+0x380>)
 8005374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005378:	0800541d 	.word	0x0800541d
 800537c:	0800544d 	.word	0x0800544d
 8005380:	0800544d 	.word	0x0800544d
 8005384:	0800544d 	.word	0x0800544d
 8005388:	0800544d 	.word	0x0800544d
 800538c:	0800544d 	.word	0x0800544d
 8005390:	0800544d 	.word	0x0800544d
 8005394:	0800544d 	.word	0x0800544d
 8005398:	08005425 	.word	0x08005425
 800539c:	0800544d 	.word	0x0800544d
 80053a0:	0800544d 	.word	0x0800544d
 80053a4:	0800544d 	.word	0x0800544d
 80053a8:	0800544d 	.word	0x0800544d
 80053ac:	0800544d 	.word	0x0800544d
 80053b0:	0800544d 	.word	0x0800544d
 80053b4:	0800544d 	.word	0x0800544d
 80053b8:	0800542d 	.word	0x0800542d
 80053bc:	0800544d 	.word	0x0800544d
 80053c0:	0800544d 	.word	0x0800544d
 80053c4:	0800544d 	.word	0x0800544d
 80053c8:	0800544d 	.word	0x0800544d
 80053cc:	0800544d 	.word	0x0800544d
 80053d0:	0800544d 	.word	0x0800544d
 80053d4:	0800544d 	.word	0x0800544d
 80053d8:	08005435 	.word	0x08005435
 80053dc:	0800544d 	.word	0x0800544d
 80053e0:	0800544d 	.word	0x0800544d
 80053e4:	0800544d 	.word	0x0800544d
 80053e8:	0800544d 	.word	0x0800544d
 80053ec:	0800544d 	.word	0x0800544d
 80053f0:	0800544d 	.word	0x0800544d
 80053f4:	0800544d 	.word	0x0800544d
 80053f8:	0800543d 	.word	0x0800543d
 80053fc:	0800544d 	.word	0x0800544d
 8005400:	0800544d 	.word	0x0800544d
 8005404:	0800544d 	.word	0x0800544d
 8005408:	0800544d 	.word	0x0800544d
 800540c:	0800544d 	.word	0x0800544d
 8005410:	0800544d 	.word	0x0800544d
 8005414:	0800544d 	.word	0x0800544d
 8005418:	08005445 	.word	0x08005445
 800541c:	2301      	movs	r3, #1
 800541e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005422:	e0bc      	b.n	800559e <UART_SetConfig+0x5a6>
 8005424:	2304      	movs	r3, #4
 8005426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800542a:	e0b8      	b.n	800559e <UART_SetConfig+0x5a6>
 800542c:	2308      	movs	r3, #8
 800542e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005432:	e0b4      	b.n	800559e <UART_SetConfig+0x5a6>
 8005434:	2310      	movs	r3, #16
 8005436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800543a:	e0b0      	b.n	800559e <UART_SetConfig+0x5a6>
 800543c:	2320      	movs	r3, #32
 800543e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005442:	e0ac      	b.n	800559e <UART_SetConfig+0x5a6>
 8005444:	2340      	movs	r3, #64	; 0x40
 8005446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800544a:	e0a8      	b.n	800559e <UART_SetConfig+0x5a6>
 800544c:	2380      	movs	r3, #128	; 0x80
 800544e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005452:	e0a4      	b.n	800559e <UART_SetConfig+0x5a6>
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a8f      	ldr	r2, [pc, #572]	; (8005698 <UART_SetConfig+0x6a0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d130      	bne.n	80054c0 <UART_SetConfig+0x4c8>
 800545e:	4b8d      	ldr	r3, [pc, #564]	; (8005694 <UART_SetConfig+0x69c>)
 8005460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	2b05      	cmp	r3, #5
 8005468:	d826      	bhi.n	80054b8 <UART_SetConfig+0x4c0>
 800546a:	a201      	add	r2, pc, #4	; (adr r2, 8005470 <UART_SetConfig+0x478>)
 800546c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005470:	08005489 	.word	0x08005489
 8005474:	08005491 	.word	0x08005491
 8005478:	08005499 	.word	0x08005499
 800547c:	080054a1 	.word	0x080054a1
 8005480:	080054a9 	.word	0x080054a9
 8005484:	080054b1 	.word	0x080054b1
 8005488:	2300      	movs	r3, #0
 800548a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800548e:	e086      	b.n	800559e <UART_SetConfig+0x5a6>
 8005490:	2304      	movs	r3, #4
 8005492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005496:	e082      	b.n	800559e <UART_SetConfig+0x5a6>
 8005498:	2308      	movs	r3, #8
 800549a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800549e:	e07e      	b.n	800559e <UART_SetConfig+0x5a6>
 80054a0:	2310      	movs	r3, #16
 80054a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054a6:	e07a      	b.n	800559e <UART_SetConfig+0x5a6>
 80054a8:	2320      	movs	r3, #32
 80054aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ae:	e076      	b.n	800559e <UART_SetConfig+0x5a6>
 80054b0:	2340      	movs	r3, #64	; 0x40
 80054b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054b6:	e072      	b.n	800559e <UART_SetConfig+0x5a6>
 80054b8:	2380      	movs	r3, #128	; 0x80
 80054ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054be:	e06e      	b.n	800559e <UART_SetConfig+0x5a6>
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a75      	ldr	r2, [pc, #468]	; (800569c <UART_SetConfig+0x6a4>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d130      	bne.n	800552c <UART_SetConfig+0x534>
 80054ca:	4b72      	ldr	r3, [pc, #456]	; (8005694 <UART_SetConfig+0x69c>)
 80054cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	2b05      	cmp	r3, #5
 80054d4:	d826      	bhi.n	8005524 <UART_SetConfig+0x52c>
 80054d6:	a201      	add	r2, pc, #4	; (adr r2, 80054dc <UART_SetConfig+0x4e4>)
 80054d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054dc:	080054f5 	.word	0x080054f5
 80054e0:	080054fd 	.word	0x080054fd
 80054e4:	08005505 	.word	0x08005505
 80054e8:	0800550d 	.word	0x0800550d
 80054ec:	08005515 	.word	0x08005515
 80054f0:	0800551d 	.word	0x0800551d
 80054f4:	2300      	movs	r3, #0
 80054f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054fa:	e050      	b.n	800559e <UART_SetConfig+0x5a6>
 80054fc:	2304      	movs	r3, #4
 80054fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005502:	e04c      	b.n	800559e <UART_SetConfig+0x5a6>
 8005504:	2308      	movs	r3, #8
 8005506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800550a:	e048      	b.n	800559e <UART_SetConfig+0x5a6>
 800550c:	2310      	movs	r3, #16
 800550e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005512:	e044      	b.n	800559e <UART_SetConfig+0x5a6>
 8005514:	2320      	movs	r3, #32
 8005516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800551a:	e040      	b.n	800559e <UART_SetConfig+0x5a6>
 800551c:	2340      	movs	r3, #64	; 0x40
 800551e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005522:	e03c      	b.n	800559e <UART_SetConfig+0x5a6>
 8005524:	2380      	movs	r3, #128	; 0x80
 8005526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800552a:	e038      	b.n	800559e <UART_SetConfig+0x5a6>
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a5b      	ldr	r2, [pc, #364]	; (80056a0 <UART_SetConfig+0x6a8>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d130      	bne.n	8005598 <UART_SetConfig+0x5a0>
 8005536:	4b57      	ldr	r3, [pc, #348]	; (8005694 <UART_SetConfig+0x69c>)
 8005538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	2b05      	cmp	r3, #5
 8005540:	d826      	bhi.n	8005590 <UART_SetConfig+0x598>
 8005542:	a201      	add	r2, pc, #4	; (adr r2, 8005548 <UART_SetConfig+0x550>)
 8005544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005548:	08005561 	.word	0x08005561
 800554c:	08005569 	.word	0x08005569
 8005550:	08005571 	.word	0x08005571
 8005554:	08005579 	.word	0x08005579
 8005558:	08005581 	.word	0x08005581
 800555c:	08005589 	.word	0x08005589
 8005560:	2302      	movs	r3, #2
 8005562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005566:	e01a      	b.n	800559e <UART_SetConfig+0x5a6>
 8005568:	2304      	movs	r3, #4
 800556a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800556e:	e016      	b.n	800559e <UART_SetConfig+0x5a6>
 8005570:	2308      	movs	r3, #8
 8005572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005576:	e012      	b.n	800559e <UART_SetConfig+0x5a6>
 8005578:	2310      	movs	r3, #16
 800557a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800557e:	e00e      	b.n	800559e <UART_SetConfig+0x5a6>
 8005580:	2320      	movs	r3, #32
 8005582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005586:	e00a      	b.n	800559e <UART_SetConfig+0x5a6>
 8005588:	2340      	movs	r3, #64	; 0x40
 800558a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800558e:	e006      	b.n	800559e <UART_SetConfig+0x5a6>
 8005590:	2380      	movs	r3, #128	; 0x80
 8005592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005596:	e002      	b.n	800559e <UART_SetConfig+0x5a6>
 8005598:	2380      	movs	r3, #128	; 0x80
 800559a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a3f      	ldr	r2, [pc, #252]	; (80056a0 <UART_SetConfig+0x6a8>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	f040 80f8 	bne.w	800579a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80055ae:	2b20      	cmp	r3, #32
 80055b0:	dc46      	bgt.n	8005640 <UART_SetConfig+0x648>
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	f2c0 8082 	blt.w	80056bc <UART_SetConfig+0x6c4>
 80055b8:	3b02      	subs	r3, #2
 80055ba:	2b1e      	cmp	r3, #30
 80055bc:	d87e      	bhi.n	80056bc <UART_SetConfig+0x6c4>
 80055be:	a201      	add	r2, pc, #4	; (adr r2, 80055c4 <UART_SetConfig+0x5cc>)
 80055c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c4:	08005647 	.word	0x08005647
 80055c8:	080056bd 	.word	0x080056bd
 80055cc:	0800564f 	.word	0x0800564f
 80055d0:	080056bd 	.word	0x080056bd
 80055d4:	080056bd 	.word	0x080056bd
 80055d8:	080056bd 	.word	0x080056bd
 80055dc:	0800565f 	.word	0x0800565f
 80055e0:	080056bd 	.word	0x080056bd
 80055e4:	080056bd 	.word	0x080056bd
 80055e8:	080056bd 	.word	0x080056bd
 80055ec:	080056bd 	.word	0x080056bd
 80055f0:	080056bd 	.word	0x080056bd
 80055f4:	080056bd 	.word	0x080056bd
 80055f8:	080056bd 	.word	0x080056bd
 80055fc:	0800566f 	.word	0x0800566f
 8005600:	080056bd 	.word	0x080056bd
 8005604:	080056bd 	.word	0x080056bd
 8005608:	080056bd 	.word	0x080056bd
 800560c:	080056bd 	.word	0x080056bd
 8005610:	080056bd 	.word	0x080056bd
 8005614:	080056bd 	.word	0x080056bd
 8005618:	080056bd 	.word	0x080056bd
 800561c:	080056bd 	.word	0x080056bd
 8005620:	080056bd 	.word	0x080056bd
 8005624:	080056bd 	.word	0x080056bd
 8005628:	080056bd 	.word	0x080056bd
 800562c:	080056bd 	.word	0x080056bd
 8005630:	080056bd 	.word	0x080056bd
 8005634:	080056bd 	.word	0x080056bd
 8005638:	080056bd 	.word	0x080056bd
 800563c:	080056af 	.word	0x080056af
 8005640:	2b40      	cmp	r3, #64	; 0x40
 8005642:	d037      	beq.n	80056b4 <UART_SetConfig+0x6bc>
 8005644:	e03a      	b.n	80056bc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005646:	f7ff f865 	bl	8004714 <HAL_RCCEx_GetD3PCLK1Freq>
 800564a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800564c:	e03c      	b.n	80056c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800564e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005652:	4618      	mov	r0, r3
 8005654:	f7ff f874 	bl	8004740 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800565c:	e034      	b.n	80056c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800565e:	f107 0318 	add.w	r3, r7, #24
 8005662:	4618      	mov	r0, r3
 8005664:	f7ff f9c0 	bl	80049e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800566c:	e02c      	b.n	80056c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800566e:	4b09      	ldr	r3, [pc, #36]	; (8005694 <UART_SetConfig+0x69c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0320 	and.w	r3, r3, #32
 8005676:	2b00      	cmp	r3, #0
 8005678:	d016      	beq.n	80056a8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800567a:	4b06      	ldr	r3, [pc, #24]	; (8005694 <UART_SetConfig+0x69c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	08db      	lsrs	r3, r3, #3
 8005680:	f003 0303 	and.w	r3, r3, #3
 8005684:	4a07      	ldr	r2, [pc, #28]	; (80056a4 <UART_SetConfig+0x6ac>)
 8005686:	fa22 f303 	lsr.w	r3, r2, r3
 800568a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800568c:	e01c      	b.n	80056c8 <UART_SetConfig+0x6d0>
 800568e:	bf00      	nop
 8005690:	40011400 	.word	0x40011400
 8005694:	58024400 	.word	0x58024400
 8005698:	40007800 	.word	0x40007800
 800569c:	40007c00 	.word	0x40007c00
 80056a0:	58000c00 	.word	0x58000c00
 80056a4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80056a8:	4b9d      	ldr	r3, [pc, #628]	; (8005920 <UART_SetConfig+0x928>)
 80056aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056ac:	e00c      	b.n	80056c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80056ae:	4b9d      	ldr	r3, [pc, #628]	; (8005924 <UART_SetConfig+0x92c>)
 80056b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056b2:	e009      	b.n	80056c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056ba:	e005      	b.n	80056c8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80056bc:	2300      	movs	r3, #0
 80056be:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80056c6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 81de 	beq.w	8005a8c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	4a94      	ldr	r2, [pc, #592]	; (8005928 <UART_SetConfig+0x930>)
 80056d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056da:	461a      	mov	r2, r3
 80056dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056de:	fbb3 f3f2 	udiv	r3, r3, r2
 80056e2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	4613      	mov	r3, r2
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	4413      	add	r3, r2
 80056ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d305      	bcc.n	8005700 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d903      	bls.n	8005708 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005706:	e1c1      	b.n	8005a8c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800570a:	2200      	movs	r2, #0
 800570c:	60bb      	str	r3, [r7, #8]
 800570e:	60fa      	str	r2, [r7, #12]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005714:	4a84      	ldr	r2, [pc, #528]	; (8005928 <UART_SetConfig+0x930>)
 8005716:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800571a:	b29b      	uxth	r3, r3
 800571c:	2200      	movs	r2, #0
 800571e:	603b      	str	r3, [r7, #0]
 8005720:	607a      	str	r2, [r7, #4]
 8005722:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005726:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800572a:	f7fa fdd5 	bl	80002d8 <__aeabi_uldivmod>
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	4610      	mov	r0, r2
 8005734:	4619      	mov	r1, r3
 8005736:	f04f 0200 	mov.w	r2, #0
 800573a:	f04f 0300 	mov.w	r3, #0
 800573e:	020b      	lsls	r3, r1, #8
 8005740:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005744:	0202      	lsls	r2, r0, #8
 8005746:	6979      	ldr	r1, [r7, #20]
 8005748:	6849      	ldr	r1, [r1, #4]
 800574a:	0849      	lsrs	r1, r1, #1
 800574c:	2000      	movs	r0, #0
 800574e:	460c      	mov	r4, r1
 8005750:	4605      	mov	r5, r0
 8005752:	eb12 0804 	adds.w	r8, r2, r4
 8005756:	eb43 0905 	adc.w	r9, r3, r5
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	469a      	mov	sl, r3
 8005762:	4693      	mov	fp, r2
 8005764:	4652      	mov	r2, sl
 8005766:	465b      	mov	r3, fp
 8005768:	4640      	mov	r0, r8
 800576a:	4649      	mov	r1, r9
 800576c:	f7fa fdb4 	bl	80002d8 <__aeabi_uldivmod>
 8005770:	4602      	mov	r2, r0
 8005772:	460b      	mov	r3, r1
 8005774:	4613      	mov	r3, r2
 8005776:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800577e:	d308      	bcc.n	8005792 <UART_SetConfig+0x79a>
 8005780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005786:	d204      	bcs.n	8005792 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800578e:	60da      	str	r2, [r3, #12]
 8005790:	e17c      	b.n	8005a8c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005798:	e178      	b.n	8005a8c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057a2:	f040 80c5 	bne.w	8005930 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80057a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80057aa:	2b20      	cmp	r3, #32
 80057ac:	dc48      	bgt.n	8005840 <UART_SetConfig+0x848>
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	db7b      	blt.n	80058aa <UART_SetConfig+0x8b2>
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	d879      	bhi.n	80058aa <UART_SetConfig+0x8b2>
 80057b6:	a201      	add	r2, pc, #4	; (adr r2, 80057bc <UART_SetConfig+0x7c4>)
 80057b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057bc:	08005847 	.word	0x08005847
 80057c0:	0800584f 	.word	0x0800584f
 80057c4:	080058ab 	.word	0x080058ab
 80057c8:	080058ab 	.word	0x080058ab
 80057cc:	08005857 	.word	0x08005857
 80057d0:	080058ab 	.word	0x080058ab
 80057d4:	080058ab 	.word	0x080058ab
 80057d8:	080058ab 	.word	0x080058ab
 80057dc:	08005867 	.word	0x08005867
 80057e0:	080058ab 	.word	0x080058ab
 80057e4:	080058ab 	.word	0x080058ab
 80057e8:	080058ab 	.word	0x080058ab
 80057ec:	080058ab 	.word	0x080058ab
 80057f0:	080058ab 	.word	0x080058ab
 80057f4:	080058ab 	.word	0x080058ab
 80057f8:	080058ab 	.word	0x080058ab
 80057fc:	08005877 	.word	0x08005877
 8005800:	080058ab 	.word	0x080058ab
 8005804:	080058ab 	.word	0x080058ab
 8005808:	080058ab 	.word	0x080058ab
 800580c:	080058ab 	.word	0x080058ab
 8005810:	080058ab 	.word	0x080058ab
 8005814:	080058ab 	.word	0x080058ab
 8005818:	080058ab 	.word	0x080058ab
 800581c:	080058ab 	.word	0x080058ab
 8005820:	080058ab 	.word	0x080058ab
 8005824:	080058ab 	.word	0x080058ab
 8005828:	080058ab 	.word	0x080058ab
 800582c:	080058ab 	.word	0x080058ab
 8005830:	080058ab 	.word	0x080058ab
 8005834:	080058ab 	.word	0x080058ab
 8005838:	080058ab 	.word	0x080058ab
 800583c:	0800589d 	.word	0x0800589d
 8005840:	2b40      	cmp	r3, #64	; 0x40
 8005842:	d02e      	beq.n	80058a2 <UART_SetConfig+0x8aa>
 8005844:	e031      	b.n	80058aa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005846:	f7fd fd2f 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 800584a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800584c:	e033      	b.n	80058b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800584e:	f7fd fd41 	bl	80032d4 <HAL_RCC_GetPCLK2Freq>
 8005852:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005854:	e02f      	b.n	80058b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800585a:	4618      	mov	r0, r3
 800585c:	f7fe ff70 	bl	8004740 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005862:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005864:	e027      	b.n	80058b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005866:	f107 0318 	add.w	r3, r7, #24
 800586a:	4618      	mov	r0, r3
 800586c:	f7ff f8bc 	bl	80049e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005874:	e01f      	b.n	80058b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005876:	4b2d      	ldr	r3, [pc, #180]	; (800592c <UART_SetConfig+0x934>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b00      	cmp	r3, #0
 8005880:	d009      	beq.n	8005896 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005882:	4b2a      	ldr	r3, [pc, #168]	; (800592c <UART_SetConfig+0x934>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	08db      	lsrs	r3, r3, #3
 8005888:	f003 0303 	and.w	r3, r3, #3
 800588c:	4a24      	ldr	r2, [pc, #144]	; (8005920 <UART_SetConfig+0x928>)
 800588e:	fa22 f303 	lsr.w	r3, r2, r3
 8005892:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005894:	e00f      	b.n	80058b6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005896:	4b22      	ldr	r3, [pc, #136]	; (8005920 <UART_SetConfig+0x928>)
 8005898:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800589a:	e00c      	b.n	80058b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800589c:	4b21      	ldr	r3, [pc, #132]	; (8005924 <UART_SetConfig+0x92c>)
 800589e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058a0:	e009      	b.n	80058b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058a8:	e005      	b.n	80058b6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80058aa:	2300      	movs	r3, #0
 80058ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80058b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 80e7 	beq.w	8005a8c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	4a19      	ldr	r2, [pc, #100]	; (8005928 <UART_SetConfig+0x930>)
 80058c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058c8:	461a      	mov	r2, r3
 80058ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80058d0:	005a      	lsls	r2, r3, #1
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	085b      	lsrs	r3, r3, #1
 80058d8:	441a      	add	r2, r3
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e6:	2b0f      	cmp	r3, #15
 80058e8:	d916      	bls.n	8005918 <UART_SetConfig+0x920>
 80058ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f0:	d212      	bcs.n	8005918 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	f023 030f 	bic.w	r3, r3, #15
 80058fa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fe:	085b      	lsrs	r3, r3, #1
 8005900:	b29b      	uxth	r3, r3
 8005902:	f003 0307 	and.w	r3, r3, #7
 8005906:	b29a      	uxth	r2, r3
 8005908:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800590a:	4313      	orrs	r3, r2
 800590c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005914:	60da      	str	r2, [r3, #12]
 8005916:	e0b9      	b.n	8005a8c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800591e:	e0b5      	b.n	8005a8c <UART_SetConfig+0xa94>
 8005920:	03d09000 	.word	0x03d09000
 8005924:	003d0900 	.word	0x003d0900
 8005928:	08006798 	.word	0x08006798
 800592c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005930:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005934:	2b20      	cmp	r3, #32
 8005936:	dc49      	bgt.n	80059cc <UART_SetConfig+0x9d4>
 8005938:	2b00      	cmp	r3, #0
 800593a:	db7c      	blt.n	8005a36 <UART_SetConfig+0xa3e>
 800593c:	2b20      	cmp	r3, #32
 800593e:	d87a      	bhi.n	8005a36 <UART_SetConfig+0xa3e>
 8005940:	a201      	add	r2, pc, #4	; (adr r2, 8005948 <UART_SetConfig+0x950>)
 8005942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005946:	bf00      	nop
 8005948:	080059d3 	.word	0x080059d3
 800594c:	080059db 	.word	0x080059db
 8005950:	08005a37 	.word	0x08005a37
 8005954:	08005a37 	.word	0x08005a37
 8005958:	080059e3 	.word	0x080059e3
 800595c:	08005a37 	.word	0x08005a37
 8005960:	08005a37 	.word	0x08005a37
 8005964:	08005a37 	.word	0x08005a37
 8005968:	080059f3 	.word	0x080059f3
 800596c:	08005a37 	.word	0x08005a37
 8005970:	08005a37 	.word	0x08005a37
 8005974:	08005a37 	.word	0x08005a37
 8005978:	08005a37 	.word	0x08005a37
 800597c:	08005a37 	.word	0x08005a37
 8005980:	08005a37 	.word	0x08005a37
 8005984:	08005a37 	.word	0x08005a37
 8005988:	08005a03 	.word	0x08005a03
 800598c:	08005a37 	.word	0x08005a37
 8005990:	08005a37 	.word	0x08005a37
 8005994:	08005a37 	.word	0x08005a37
 8005998:	08005a37 	.word	0x08005a37
 800599c:	08005a37 	.word	0x08005a37
 80059a0:	08005a37 	.word	0x08005a37
 80059a4:	08005a37 	.word	0x08005a37
 80059a8:	08005a37 	.word	0x08005a37
 80059ac:	08005a37 	.word	0x08005a37
 80059b0:	08005a37 	.word	0x08005a37
 80059b4:	08005a37 	.word	0x08005a37
 80059b8:	08005a37 	.word	0x08005a37
 80059bc:	08005a37 	.word	0x08005a37
 80059c0:	08005a37 	.word	0x08005a37
 80059c4:	08005a37 	.word	0x08005a37
 80059c8:	08005a29 	.word	0x08005a29
 80059cc:	2b40      	cmp	r3, #64	; 0x40
 80059ce:	d02e      	beq.n	8005a2e <UART_SetConfig+0xa36>
 80059d0:	e031      	b.n	8005a36 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059d2:	f7fd fc69 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 80059d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80059d8:	e033      	b.n	8005a42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059da:	f7fd fc7b 	bl	80032d4 <HAL_RCC_GetPCLK2Freq>
 80059de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80059e0:	e02f      	b.n	8005a42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fe feaa 	bl	8004740 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059f0:	e027      	b.n	8005a42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059f2:	f107 0318 	add.w	r3, r7, #24
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fe fff6 	bl	80049e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a00:	e01f      	b.n	8005a42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a02:	4b2d      	ldr	r3, [pc, #180]	; (8005ab8 <UART_SetConfig+0xac0>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0320 	and.w	r3, r3, #32
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d009      	beq.n	8005a22 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a0e:	4b2a      	ldr	r3, [pc, #168]	; (8005ab8 <UART_SetConfig+0xac0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	08db      	lsrs	r3, r3, #3
 8005a14:	f003 0303 	and.w	r3, r3, #3
 8005a18:	4a28      	ldr	r2, [pc, #160]	; (8005abc <UART_SetConfig+0xac4>)
 8005a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a20:	e00f      	b.n	8005a42 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005a22:	4b26      	ldr	r3, [pc, #152]	; (8005abc <UART_SetConfig+0xac4>)
 8005a24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a26:	e00c      	b.n	8005a42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a28:	4b25      	ldr	r3, [pc, #148]	; (8005ac0 <UART_SetConfig+0xac8>)
 8005a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a2c:	e009      	b.n	8005a42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a34:	e005      	b.n	8005a42 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005a40:	bf00      	nop
    }

    if (pclk != 0U)
 8005a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d021      	beq.n	8005a8c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	4a1d      	ldr	r2, [pc, #116]	; (8005ac4 <UART_SetConfig+0xacc>)
 8005a4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a52:	461a      	mov	r2, r3
 8005a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a56:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	085b      	lsrs	r3, r3, #1
 8005a60:	441a      	add	r2, r3
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6e:	2b0f      	cmp	r3, #15
 8005a70:	d909      	bls.n	8005a86 <UART_SetConfig+0xa8e>
 8005a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a78:	d205      	bcs.n	8005a86 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	60da      	str	r2, [r3, #12]
 8005a84:	e002      	b.n	8005a8c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005aa8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3748      	adds	r7, #72	; 0x48
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ab6:	bf00      	nop
 8005ab8:	58024400 	.word	0x58024400
 8005abc:	03d09000 	.word	0x03d09000
 8005ac0:	003d0900 	.word	0x003d0900
 8005ac4:	08006798 	.word	0x08006798

08005ac8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00a      	beq.n	8005af2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00a      	beq.n	8005b14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	430a      	orrs	r2, r1
 8005b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b18:	f003 0304 	and.w	r3, r3, #4
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00a      	beq.n	8005b36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3a:	f003 0308 	and.w	r3, r3, #8
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00a      	beq.n	8005b58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5c:	f003 0310 	and.w	r3, r3, #16
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00a      	beq.n	8005b7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	f003 0320 	and.w	r3, r3, #32
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00a      	beq.n	8005b9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d01a      	beq.n	8005bde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bc6:	d10a      	bne.n	8005bde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00a      	beq.n	8005c00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	605a      	str	r2, [r3, #4]
  }
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b098      	sub	sp, #96	; 0x60
 8005c10:	af02      	add	r7, sp, #8
 8005c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c1c:	f7fb fa88 	bl	8001130 <HAL_GetTick>
 8005c20:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0308 	and.w	r3, r3, #8
 8005c2c:	2b08      	cmp	r3, #8
 8005c2e:	d12f      	bne.n	8005c90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f88e 	bl	8005d60 <UART_WaitOnFlagUntilTimeout>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d022      	beq.n	8005c90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c52:	e853 3f00 	ldrex	r3, [r3]
 8005c56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c5e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	461a      	mov	r2, r3
 8005c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c68:	647b      	str	r3, [r7, #68]	; 0x44
 8005c6a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c70:	e841 2300 	strex	r3, r2, [r1]
 8005c74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1e6      	bne.n	8005c4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e063      	b.n	8005d58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0304 	and.w	r3, r3, #4
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d149      	bne.n	8005d32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f857 	bl	8005d60 <UART_WaitOnFlagUntilTimeout>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d03c      	beq.n	8005d32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	e853 3f00 	ldrex	r3, [r3]
 8005cc4:	623b      	str	r3, [r7, #32]
   return(result);
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd6:	633b      	str	r3, [r7, #48]	; 0x30
 8005cd8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cde:	e841 2300 	strex	r3, r2, [r1]
 8005ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1e6      	bne.n	8005cb8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	3308      	adds	r3, #8
 8005cf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	e853 3f00 	ldrex	r3, [r3]
 8005cf8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f023 0301 	bic.w	r3, r3, #1
 8005d00:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3308      	adds	r3, #8
 8005d08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d0a:	61fa      	str	r2, [r7, #28]
 8005d0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0e:	69b9      	ldr	r1, [r7, #24]
 8005d10:	69fa      	ldr	r2, [r7, #28]
 8005d12:	e841 2300 	strex	r3, r2, [r1]
 8005d16:	617b      	str	r3, [r7, #20]
   return(result);
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1e5      	bne.n	8005cea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2220      	movs	r2, #32
 8005d22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e012      	b.n	8005d58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3758      	adds	r7, #88	; 0x58
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	603b      	str	r3, [r7, #0]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d70:	e049      	b.n	8005e06 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d78:	d045      	beq.n	8005e06 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d7a:	f7fb f9d9 	bl	8001130 <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d302      	bcc.n	8005d90 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e048      	b.n	8005e26 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0304 	and.w	r3, r3, #4
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d031      	beq.n	8005e06 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	69db      	ldr	r3, [r3, #28]
 8005da8:	f003 0308 	and.w	r3, r3, #8
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d110      	bne.n	8005dd2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2208      	movs	r2, #8
 8005db6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 f839 	bl	8005e30 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2208      	movs	r2, #8
 8005dc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e029      	b.n	8005e26 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	69db      	ldr	r3, [r3, #28]
 8005dd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005de0:	d111      	bne.n	8005e06 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 f81f 	bl	8005e30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2220      	movs	r2, #32
 8005df6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e00f      	b.n	8005e26 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	69da      	ldr	r2, [r3, #28]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	bf0c      	ite	eq
 8005e16:	2301      	moveq	r3, #1
 8005e18:	2300      	movne	r3, #0
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	79fb      	ldrb	r3, [r7, #7]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d0a6      	beq.n	8005d72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
	...

08005e30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b095      	sub	sp, #84	; 0x54
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e40:	e853 3f00 	ldrex	r3, [r3]
 8005e44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	461a      	mov	r2, r3
 8005e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e56:	643b      	str	r3, [r7, #64]	; 0x40
 8005e58:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e5e:	e841 2300 	strex	r3, r2, [r1]
 8005e62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1e6      	bne.n	8005e38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3308      	adds	r3, #8
 8005e70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e72:	6a3b      	ldr	r3, [r7, #32]
 8005e74:	e853 3f00 	ldrex	r3, [r3]
 8005e78:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e7a:	69fa      	ldr	r2, [r7, #28]
 8005e7c:	4b1e      	ldr	r3, [pc, #120]	; (8005ef8 <UART_EndRxTransfer+0xc8>)
 8005e7e:	4013      	ands	r3, r2
 8005e80:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	3308      	adds	r3, #8
 8005e88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e92:	e841 2300 	strex	r3, r2, [r1]
 8005e96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1e5      	bne.n	8005e6a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d118      	bne.n	8005ed8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	e853 3f00 	ldrex	r3, [r3]
 8005eb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f023 0310 	bic.w	r3, r3, #16
 8005eba:	647b      	str	r3, [r7, #68]	; 0x44
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ec4:	61bb      	str	r3, [r7, #24]
 8005ec6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec8:	6979      	ldr	r1, [r7, #20]
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	e841 2300 	strex	r3, r2, [r1]
 8005ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1e6      	bne.n	8005ea6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005eec:	bf00      	nop
 8005eee:	3754      	adds	r7, #84	; 0x54
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	effffffe 	.word	0xeffffffe

08005efc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d101      	bne.n	8005f12 <HAL_UARTEx_DisableFifoMode+0x16>
 8005f0e:	2302      	movs	r3, #2
 8005f10:	e027      	b.n	8005f62 <HAL_UARTEx_DisableFifoMode+0x66>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2224      	movs	r2, #36	; 0x24
 8005f1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0201 	bic.w	r2, r2, #1
 8005f38:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005f40:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2220      	movs	r2, #32
 8005f54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b084      	sub	sp, #16
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
 8005f76:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d101      	bne.n	8005f86 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f82:	2302      	movs	r3, #2
 8005f84:	e02d      	b.n	8005fe2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2224      	movs	r2, #36	; 0x24
 8005f92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 0201 	bic.w	r2, r2, #1
 8005fac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f850 	bl	8006068 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b084      	sub	sp, #16
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d101      	bne.n	8006002 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ffe:	2302      	movs	r3, #2
 8006000:	e02d      	b.n	800605e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2224      	movs	r2, #36	; 0x24
 800600e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f022 0201 	bic.w	r2, r2, #1
 8006028:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	683a      	ldr	r2, [r7, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f812 	bl	8006068 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2220      	movs	r2, #32
 8006050:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
	...

08006068 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006074:	2b00      	cmp	r3, #0
 8006076:	d108      	bne.n	800608a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006088:	e031      	b.n	80060ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800608a:	2310      	movs	r3, #16
 800608c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800608e:	2310      	movs	r3, #16
 8006090:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	0e5b      	lsrs	r3, r3, #25
 800609a:	b2db      	uxtb	r3, r3
 800609c:	f003 0307 	and.w	r3, r3, #7
 80060a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	0f5b      	lsrs	r3, r3, #29
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	f003 0307 	and.w	r3, r3, #7
 80060b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060b2:	7bbb      	ldrb	r3, [r7, #14]
 80060b4:	7b3a      	ldrb	r2, [r7, #12]
 80060b6:	4911      	ldr	r1, [pc, #68]	; (80060fc <UARTEx_SetNbDataToProcess+0x94>)
 80060b8:	5c8a      	ldrb	r2, [r1, r2]
 80060ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80060be:	7b3a      	ldrb	r2, [r7, #12]
 80060c0:	490f      	ldr	r1, [pc, #60]	; (8006100 <UARTEx_SetNbDataToProcess+0x98>)
 80060c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
 80060d2:	7b7a      	ldrb	r2, [r7, #13]
 80060d4:	4909      	ldr	r1, [pc, #36]	; (80060fc <UARTEx_SetNbDataToProcess+0x94>)
 80060d6:	5c8a      	ldrb	r2, [r1, r2]
 80060d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80060dc:	7b7a      	ldrb	r2, [r7, #13]
 80060de:	4908      	ldr	r1, [pc, #32]	; (8006100 <UARTEx_SetNbDataToProcess+0x98>)
 80060e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80060e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80060ee:	bf00      	nop
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	080067b0 	.word	0x080067b0
 8006100:	080067b8 	.word	0x080067b8

08006104 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006104:	b084      	sub	sp, #16
 8006106:	b580      	push	{r7, lr}
 8006108:	b084      	sub	sp, #16
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	f107 001c 	add.w	r0, r7, #28
 8006112:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006118:	2b01      	cmp	r3, #1
 800611a:	d120      	bne.n	800615e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006120:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68da      	ldr	r2, [r3, #12]
 800612c:	4b2a      	ldr	r3, [pc, #168]	; (80061d8 <USB_CoreInit+0xd4>)
 800612e:	4013      	ands	r3, r2
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006142:	2b01      	cmp	r3, #1
 8006144:	d105      	bne.n	8006152 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 faac 	bl	80066b0 <USB_CoreReset>
 8006158:	4603      	mov	r3, r0
 800615a:	73fb      	strb	r3, [r7, #15]
 800615c:	e01a      	b.n	8006194 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 faa0 	bl	80066b0 <USB_CoreReset>
 8006170:	4603      	mov	r3, r0
 8006172:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006176:	2b00      	cmp	r3, #0
 8006178:	d106      	bne.n	8006188 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	639a      	str	r2, [r3, #56]	; 0x38
 8006186:	e005      	b.n	8006194 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	2b01      	cmp	r3, #1
 8006198:	d116      	bne.n	80061c8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800619e:	b29a      	uxth	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80061a8:	4b0c      	ldr	r3, [pc, #48]	; (80061dc <USB_CoreInit+0xd8>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f043 0206 	orr.w	r2, r3, #6
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f043 0220 	orr.w	r2, r3, #32
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061d4:	b004      	add	sp, #16
 80061d6:	4770      	bx	lr
 80061d8:	ffbdffbf 	.word	0xffbdffbf
 80061dc:	03ee0000 	.word	0x03ee0000

080061e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f023 0201 	bic.w	r2, r3, #1
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b084      	sub	sp, #16
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	460b      	mov	r3, r1
 800620c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800621e:	78fb      	ldrb	r3, [r7, #3]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d115      	bne.n	8006250 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006230:	2001      	movs	r0, #1
 8006232:	f7fa ff89 	bl	8001148 <HAL_Delay>
      ms++;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	3301      	adds	r3, #1
 800623a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fa29 	bl	8006694 <USB_GetMode>
 8006242:	4603      	mov	r3, r0
 8006244:	2b01      	cmp	r3, #1
 8006246:	d01e      	beq.n	8006286 <USB_SetCurrentMode+0x84>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b31      	cmp	r3, #49	; 0x31
 800624c:	d9f0      	bls.n	8006230 <USB_SetCurrentMode+0x2e>
 800624e:	e01a      	b.n	8006286 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d115      	bne.n	8006282 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006262:	2001      	movs	r0, #1
 8006264:	f7fa ff70 	bl	8001148 <HAL_Delay>
      ms++;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	3301      	adds	r3, #1
 800626c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fa10 	bl	8006694 <USB_GetMode>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <USB_SetCurrentMode+0x84>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2b31      	cmp	r3, #49	; 0x31
 800627e:	d9f0      	bls.n	8006262 <USB_SetCurrentMode+0x60>
 8006280:	e001      	b.n	8006286 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e005      	b.n	8006292 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2b32      	cmp	r3, #50	; 0x32
 800628a:	d101      	bne.n	8006290 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e000      	b.n	8006292 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800629c:	b084      	sub	sp, #16
 800629e:	b580      	push	{r7, lr}
 80062a0:	b086      	sub	sp, #24
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
 80062a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80062aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80062b6:	2300      	movs	r3, #0
 80062b8:	613b      	str	r3, [r7, #16]
 80062ba:	e009      	b.n	80062d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	3340      	adds	r3, #64	; 0x40
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	2200      	movs	r2, #0
 80062c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	3301      	adds	r3, #1
 80062ce:	613b      	str	r3, [r7, #16]
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	2b0e      	cmp	r3, #14
 80062d4:	d9f2      	bls.n	80062bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80062d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d11c      	bne.n	8006316 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062ea:	f043 0302 	orr.w	r3, r3, #2
 80062ee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	e005      	b.n	8006322 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006328:	461a      	mov	r2, r3
 800632a:	2300      	movs	r3, #0
 800632c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006334:	4619      	mov	r1, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633c:	461a      	mov	r2, r3
 800633e:	680b      	ldr	r3, [r1, #0]
 8006340:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006344:	2b01      	cmp	r3, #1
 8006346:	d10c      	bne.n	8006362 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634a:	2b00      	cmp	r3, #0
 800634c:	d104      	bne.n	8006358 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800634e:	2100      	movs	r1, #0
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f965 	bl	8006620 <USB_SetDevSpeed>
 8006356:	e008      	b.n	800636a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006358:	2101      	movs	r1, #1
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f960 	bl	8006620 <USB_SetDevSpeed>
 8006360:	e003      	b.n	800636a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006362:	2103      	movs	r1, #3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f95b 	bl	8006620 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800636a:	2110      	movs	r1, #16
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 f8f3 	bl	8006558 <USB_FlushTxFifo>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d001      	beq.n	800637c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f91f 	bl	80065c0 <USB_FlushRxFifo>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006392:	461a      	mov	r2, r3
 8006394:	2300      	movs	r3, #0
 8006396:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639e:	461a      	mov	r2, r3
 80063a0:	2300      	movs	r3, #0
 80063a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063aa:	461a      	mov	r2, r3
 80063ac:	2300      	movs	r3, #0
 80063ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063b0:	2300      	movs	r3, #0
 80063b2:	613b      	str	r3, [r7, #16]
 80063b4:	e043      	b.n	800643e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063cc:	d118      	bne.n	8006400 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10a      	bne.n	80063ea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e0:	461a      	mov	r2, r3
 80063e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80063e6:	6013      	str	r3, [r2, #0]
 80063e8:	e013      	b.n	8006412 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f6:	461a      	mov	r2, r3
 80063f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063fc:	6013      	str	r3, [r2, #0]
 80063fe:	e008      	b.n	8006412 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4413      	add	r3, r2
 8006408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800640c:	461a      	mov	r2, r3
 800640e:	2300      	movs	r3, #0
 8006410:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	4413      	add	r3, r2
 800641a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641e:	461a      	mov	r2, r3
 8006420:	2300      	movs	r3, #0
 8006422:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	4413      	add	r3, r2
 800642c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006430:	461a      	mov	r2, r3
 8006432:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006436:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	3301      	adds	r3, #1
 800643c:	613b      	str	r3, [r7, #16]
 800643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	429a      	cmp	r2, r3
 8006444:	d3b7      	bcc.n	80063b6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006446:	2300      	movs	r3, #0
 8006448:	613b      	str	r3, [r7, #16]
 800644a:	e043      	b.n	80064d4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800645e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006462:	d118      	bne.n	8006496 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10a      	bne.n	8006480 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	4413      	add	r3, r2
 8006472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006476:	461a      	mov	r2, r3
 8006478:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800647c:	6013      	str	r3, [r2, #0]
 800647e:	e013      	b.n	80064a8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	4413      	add	r3, r2
 8006488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800648c:	461a      	mov	r2, r3
 800648e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006492:	6013      	str	r3, [r2, #0]
 8006494:	e008      	b.n	80064a8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	015a      	lsls	r2, r3, #5
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	4413      	add	r3, r2
 800649e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a2:	461a      	mov	r2, r3
 80064a4:	2300      	movs	r3, #0
 80064a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b4:	461a      	mov	r2, r3
 80064b6:	2300      	movs	r3, #0
 80064b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c6:	461a      	mov	r2, r3
 80064c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	3301      	adds	r3, #1
 80064d2:	613b      	str	r3, [r7, #16]
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d3b7      	bcc.n	800644c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80064fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80064fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006500:	2b00      	cmp	r3, #0
 8006502:	d105      	bne.n	8006510 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	f043 0210 	orr.w	r2, r3, #16
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	699a      	ldr	r2, [r3, #24]
 8006514:	4b0e      	ldr	r3, [pc, #56]	; (8006550 <USB_DevInit+0x2b4>)
 8006516:	4313      	orrs	r3, r2
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800651c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800651e:	2b00      	cmp	r3, #0
 8006520:	d005      	beq.n	800652e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	f043 0208 	orr.w	r2, r3, #8
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800652e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006530:	2b01      	cmp	r3, #1
 8006532:	d105      	bne.n	8006540 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	699a      	ldr	r2, [r3, #24]
 8006538:	4b06      	ldr	r3, [pc, #24]	; (8006554 <USB_DevInit+0x2b8>)
 800653a:	4313      	orrs	r3, r2
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006540:	7dfb      	ldrb	r3, [r7, #23]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800654c:	b004      	add	sp, #16
 800654e:	4770      	bx	lr
 8006550:	803c3800 	.word	0x803c3800
 8006554:	40000004 	.word	0x40000004

08006558 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006562:	2300      	movs	r3, #0
 8006564:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	3301      	adds	r3, #1
 800656a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	4a13      	ldr	r2, [pc, #76]	; (80065bc <USB_FlushTxFifo+0x64>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d901      	bls.n	8006578 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e01b      	b.n	80065b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	2b00      	cmp	r3, #0
 800657e:	daf2      	bge.n	8006566 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006580:	2300      	movs	r3, #0
 8006582:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	019b      	lsls	r3, r3, #6
 8006588:	f043 0220 	orr.w	r2, r3, #32
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3301      	adds	r3, #1
 8006594:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4a08      	ldr	r2, [pc, #32]	; (80065bc <USB_FlushTxFifo+0x64>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d901      	bls.n	80065a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e006      	b.n	80065b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	f003 0320 	and.w	r3, r3, #32
 80065aa:	2b20      	cmp	r3, #32
 80065ac:	d0f0      	beq.n	8006590 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3714      	adds	r7, #20
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	00030d40 	.word	0x00030d40

080065c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	3301      	adds	r3, #1
 80065d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	4a11      	ldr	r2, [pc, #68]	; (800661c <USB_FlushRxFifo+0x5c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d901      	bls.n	80065de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e018      	b.n	8006610 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	daf2      	bge.n	80065cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80065e6:	2300      	movs	r3, #0
 80065e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2210      	movs	r2, #16
 80065ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	3301      	adds	r3, #1
 80065f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	4a08      	ldr	r2, [pc, #32]	; (800661c <USB_FlushRxFifo+0x5c>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d901      	bls.n	8006602 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e006      	b.n	8006610 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	f003 0310 	and.w	r3, r3, #16
 800660a:	2b10      	cmp	r3, #16
 800660c:	d0f0      	beq.n	80065f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	00030d40 	.word	0x00030d40

08006620 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	460b      	mov	r3, r1
 800662a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	78fb      	ldrb	r3, [r7, #3]
 800663a:	68f9      	ldr	r1, [r7, #12]
 800663c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006640:	4313      	orrs	r3, r2
 8006642:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006652:	b480      	push	{r7}
 8006654:	b085      	sub	sp, #20
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800666c:	f023 0303 	bic.w	r3, r3, #3
 8006670:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006680:	f043 0302 	orr.w	r3, r3, #2
 8006684:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	f003 0301 	and.w	r3, r3, #1
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066b8:	2300      	movs	r3, #0
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	3301      	adds	r3, #1
 80066c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	4a13      	ldr	r2, [pc, #76]	; (8006714 <USB_CoreReset+0x64>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d901      	bls.n	80066ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e01b      	b.n	8006706 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	daf2      	bge.n	80066bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	f043 0201 	orr.w	r2, r3, #1
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	3301      	adds	r3, #1
 80066ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4a09      	ldr	r2, [pc, #36]	; (8006714 <USB_CoreReset+0x64>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d901      	bls.n	80066f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e006      	b.n	8006706 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b01      	cmp	r3, #1
 8006702:	d0f0      	beq.n	80066e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	00030d40 	.word	0x00030d40

08006718 <__libc_init_array>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	4d0d      	ldr	r5, [pc, #52]	; (8006750 <__libc_init_array+0x38>)
 800671c:	4c0d      	ldr	r4, [pc, #52]	; (8006754 <__libc_init_array+0x3c>)
 800671e:	1b64      	subs	r4, r4, r5
 8006720:	10a4      	asrs	r4, r4, #2
 8006722:	2600      	movs	r6, #0
 8006724:	42a6      	cmp	r6, r4
 8006726:	d109      	bne.n	800673c <__libc_init_array+0x24>
 8006728:	4d0b      	ldr	r5, [pc, #44]	; (8006758 <__libc_init_array+0x40>)
 800672a:	4c0c      	ldr	r4, [pc, #48]	; (800675c <__libc_init_array+0x44>)
 800672c:	f000 f820 	bl	8006770 <_init>
 8006730:	1b64      	subs	r4, r4, r5
 8006732:	10a4      	asrs	r4, r4, #2
 8006734:	2600      	movs	r6, #0
 8006736:	42a6      	cmp	r6, r4
 8006738:	d105      	bne.n	8006746 <__libc_init_array+0x2e>
 800673a:	bd70      	pop	{r4, r5, r6, pc}
 800673c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006740:	4798      	blx	r3
 8006742:	3601      	adds	r6, #1
 8006744:	e7ee      	b.n	8006724 <__libc_init_array+0xc>
 8006746:	f855 3b04 	ldr.w	r3, [r5], #4
 800674a:	4798      	blx	r3
 800674c:	3601      	adds	r6, #1
 800674e:	e7f2      	b.n	8006736 <__libc_init_array+0x1e>
 8006750:	080067c8 	.word	0x080067c8
 8006754:	080067c8 	.word	0x080067c8
 8006758:	080067c8 	.word	0x080067c8
 800675c:	080067cc 	.word	0x080067cc

08006760 <memset>:
 8006760:	4402      	add	r2, r0
 8006762:	4603      	mov	r3, r0
 8006764:	4293      	cmp	r3, r2
 8006766:	d100      	bne.n	800676a <memset+0xa>
 8006768:	4770      	bx	lr
 800676a:	f803 1b01 	strb.w	r1, [r3], #1
 800676e:	e7f9      	b.n	8006764 <memset+0x4>

08006770 <_init>:
 8006770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006772:	bf00      	nop
 8006774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006776:	bc08      	pop	{r3}
 8006778:	469e      	mov	lr, r3
 800677a:	4770      	bx	lr

0800677c <_fini>:
 800677c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677e:	bf00      	nop
 8006780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006782:	bc08      	pop	{r3}
 8006784:	469e      	mov	lr, r3
 8006786:	4770      	bx	lr
