
LAB4 Watchdog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002914  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080029d4  080029d4  000129d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a40  08002a40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a40  08002a40  00012a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a48  08002a48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a48  08002a48  00012a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a4c  08002a4c  00012a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08002a5c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002a5c  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008922  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001778  00000000  00000000  00028956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000720  00000000  00000000  0002a0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000678  00000000  00000000  0002a7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000103ff  00000000  00000000  0002ae68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b99  00000000  00000000  0003b267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00061fbd  00000000  00000000  00044e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a6dbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017d8  00000000  00000000  000a6e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080029bc 	.word	0x080029bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080029bc 	.word	0x080029bc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004ac:	f000 faaa 	bl	8000a04 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004b0:	f000 f87a 	bl	80005a8 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */

	MX_GPIO_Init();
 80004b4:	f000 f95e 	bl	8000774 <MX_GPIO_Init>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80004b8:	23a0      	movs	r3, #160	; 0xa0
 80004ba:	05db      	lsls	r3, r3, #23
 80004bc:	2201      	movs	r2, #1
 80004be:	2120      	movs	r1, #32
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 fd90 	bl	8000fe6 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80004c6:	23fa      	movs	r3, #250	; 0xfa
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 fb0a 	bl	8000ae4 <HAL_Delay>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80004d0:	23a0      	movs	r3, #160	; 0xa0
 80004d2:	05db      	lsls	r3, r3, #23
 80004d4:	2200      	movs	r2, #0
 80004d6:	2120      	movs	r1, #32
 80004d8:	0018      	movs	r0, r3
 80004da:	f000 fd84 	bl	8000fe6 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80004de:	23fa      	movs	r3, #250	; 0xfa
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 fafe 	bl	8000ae4 <HAL_Delay>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004e8:	f000 f944 	bl	8000774 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004ec:	f000 f8f0 	bl	80006d0 <MX_USART2_UART_Init>
	MX_IWDG_Init();
 80004f0:	f000 f8ce 	bl	8000690 <MX_IWDG_Init>
	MX_WWDG_Init();
 80004f4:	f000 f91c 	bl	8000730 <MX_WWDG_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		static uint32_t nextrun = 0;
		if (HAL_GetTick() > nextrun) {
 80004f8:	f000 faea 	bl	8000ad0 <HAL_GetTick>
 80004fc:	0002      	movs	r2, r0
 80004fe:	4b27      	ldr	r3, [pc, #156]	; (800059c <main+0xf4>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	429a      	cmp	r2, r3
 8000504:	d90c      	bls.n	8000520 <main+0x78>
			nextrun = HAL_GetTick() + 200;
 8000506:	f000 fae3 	bl	8000ad0 <HAL_GetTick>
 800050a:	0003      	movs	r3, r0
 800050c:	33c8      	adds	r3, #200	; 0xc8
 800050e:	001a      	movs	r2, r3
 8000510:	4b22      	ldr	r3, [pc, #136]	; (800059c <main+0xf4>)
 8000512:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000514:	23a0      	movs	r3, #160	; 0xa0
 8000516:	05db      	lsls	r3, r3, #23
 8000518:	2120      	movs	r1, #32
 800051a:	0018      	movs	r0, r3
 800051c:	f000 fd80 	bl	8001020 <HAL_GPIO_TogglePin>
//		if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) {
//			// if button not pressed, reset watchdog.
//			HAL_IWDG_Refresh(&hiwdg);
//		}

		if (HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin) == GPIO_PIN_RESET) //s1 press
 8000520:	23a0      	movs	r3, #160	; 0xa0
 8000522:	05db      	lsls	r3, r3, #23
 8000524:	2101      	movs	r1, #1
 8000526:	0018      	movs	r0, r3
 8000528:	f000 fd40 	bl	8000fac <HAL_GPIO_ReadPin>
 800052c:	1e03      	subs	r3, r0, #0
 800052e:	d107      	bne.n	8000540 <main+0x98>
				{
			//refresh at 70ms - MCU should reset
			HAL_Delay(70);
 8000530:	2046      	movs	r0, #70	; 0x46
 8000532:	f000 fad7 	bl	8000ae4 <HAL_Delay>
			HAL_WWDG_Refresh(&hwwdg);
 8000536:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <main+0xf8>)
 8000538:	0018      	movs	r0, r3
 800053a:	f002 fa04 	bl	8002946 <HAL_WWDG_Refresh>
 800053e:	e027      	b.n	8000590 <main+0xe8>
		} else if (HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin) == GPIO_PIN_RESET) //s2 press
 8000540:	23a0      	movs	r3, #160	; 0xa0
 8000542:	05db      	lsls	r3, r3, #23
 8000544:	2102      	movs	r1, #2
 8000546:	0018      	movs	r0, r3
 8000548:	f000 fd30 	bl	8000fac <HAL_GPIO_ReadPin>
 800054c:	1e03      	subs	r3, r0, #0
 800054e:	d107      	bne.n	8000560 <main+0xb8>
				{
			//refresh at 20ms - MCU should reset
			HAL_Delay(20);
 8000550:	2014      	movs	r0, #20
 8000552:	f000 fac7 	bl	8000ae4 <HAL_Delay>
			HAL_WWDG_Refresh(&hwwdg);
 8000556:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <main+0xf8>)
 8000558:	0018      	movs	r0, r3
 800055a:	f002 f9f4 	bl	8002946 <HAL_WWDG_Refresh>
 800055e:	e017      	b.n	8000590 <main+0xe8>
		} else if (HAL_GPIO_ReadPin(S3_GPIO_Port, S3_Pin) == GPIO_PIN_RESET) //s3 press
 8000560:	23a0      	movs	r3, #160	; 0xa0
 8000562:	05db      	lsls	r3, r3, #23
 8000564:	2110      	movs	r1, #16
 8000566:	0018      	movs	r0, r3
 8000568:	f000 fd20 	bl	8000fac <HAL_GPIO_ReadPin>
 800056c:	1e03      	subs	r3, r0, #0
 800056e:	d108      	bne.n	8000582 <main+0xda>
				{
			// stop main clock
			HAL_SuspendTick();
 8000570:	f000 fadc 	bl	8000b2c <HAL_SuspendTick>
			HAL_PWR_EnterSTOPMode(PWR_REGULATOR_VOLTAGE_SCALE1, PWR_STOPENTRY_WFE);
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	011b      	lsls	r3, r3, #4
 8000578:	2102      	movs	r1, #2
 800057a:	0018      	movs	r0, r3
 800057c:	f000 fdce 	bl	800111c <HAL_PWR_EnterSTOPMode>
 8000580:	e006      	b.n	8000590 <main+0xe8>

		} else {
			//refresh at 50ms - MCU should continuous running
			HAL_Delay(50);
 8000582:	2032      	movs	r0, #50	; 0x32
 8000584:	f000 faae 	bl	8000ae4 <HAL_Delay>
			HAL_WWDG_Refresh(&hwwdg);
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <main+0xf8>)
 800058a:	0018      	movs	r0, r3
 800058c:	f002 f9db 	bl	8002946 <HAL_WWDG_Refresh>
		}

		//refresh I Watchdog
		HAL_IWDG_Refresh(&hiwdg);
 8000590:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <main+0xfc>)
 8000592:	0018      	movs	r0, r3
 8000594:	f000 fdb2 	bl	80010fc <HAL_IWDG_Refresh>
	while (1) {
 8000598:	e7ae      	b.n	80004f8 <main+0x50>
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	200000d4 	.word	0x200000d4
 80005a0:	200000c0 	.word	0x200000c0
 80005a4:	20000028 	.word	0x20000028

080005a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b099      	sub	sp, #100	; 0x64
 80005ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005ae:	242c      	movs	r4, #44	; 0x2c
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	0018      	movs	r0, r3
 80005b4:	2334      	movs	r3, #52	; 0x34
 80005b6:	001a      	movs	r2, r3
 80005b8:	2100      	movs	r1, #0
 80005ba:	f002 f9f7 	bl	80029ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005be:	2318      	movs	r3, #24
 80005c0:	18fb      	adds	r3, r7, r3
 80005c2:	0018      	movs	r0, r3
 80005c4:	2314      	movs	r3, #20
 80005c6:	001a      	movs	r2, r3
 80005c8:	2100      	movs	r1, #0
 80005ca:	f002 f9ef 	bl	80029ac <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80005ce:	003b      	movs	r3, r7
 80005d0:	0018      	movs	r0, r3
 80005d2:	2318      	movs	r3, #24
 80005d4:	001a      	movs	r2, r3
 80005d6:	2100      	movs	r1, #0
 80005d8:	f002 f9e8 	bl	80029ac <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005dc:	4b2a      	ldr	r3, [pc, #168]	; (8000688 <SystemClock_Config+0xe0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a2a      	ldr	r2, [pc, #168]	; (800068c <SystemClock_Config+0xe4>)
 80005e2:	401a      	ands	r2, r3
 80005e4:	4b28      	ldr	r3, [pc, #160]	; (8000688 <SystemClock_Config+0xe0>)
 80005e6:	2180      	movs	r1, #128	; 0x80
 80005e8:	0109      	lsls	r1, r1, #4
 80005ea:	430a      	orrs	r2, r1
 80005ec:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 80005ee:	193b      	adds	r3, r7, r4
 80005f0:	2209      	movs	r2, #9
 80005f2:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	22a0      	movs	r2, #160	; 0xa0
 80005f8:	02d2      	lsls	r2, r2, #11
 80005fa:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005fc:	0021      	movs	r1, r4
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2201      	movs	r2, #1
 8000602:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2202      	movs	r2, #2
 8000608:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2280      	movs	r2, #128	; 0x80
 800060e:	0252      	lsls	r2, r2, #9
 8000610:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	22c0      	movs	r2, #192	; 0xc0
 8000616:	0312      	lsls	r2, r2, #12
 8000618:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2280      	movs	r2, #128	; 0x80
 800061e:	03d2      	lsls	r2, r2, #15
 8000620:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000622:	187b      	adds	r3, r7, r1
 8000624:	0018      	movs	r0, r3
 8000626:	f000 fdd5 	bl	80011d4 <HAL_RCC_OscConfig>
 800062a:	1e03      	subs	r3, r0, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x8a>
		Error_Handler();
 800062e:	f000 f915 	bl	800085c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000632:	2118      	movs	r1, #24
 8000634:	187b      	adds	r3, r7, r1
 8000636:	220f      	movs	r2, #15
 8000638:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2203      	movs	r2, #3
 800063e:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2101      	movs	r1, #1
 8000656:	0018      	movs	r0, r3
 8000658:	f001 f938 	bl	80018cc <HAL_RCC_ClockConfig>
 800065c:	1e03      	subs	r3, r0, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xbc>
		Error_Handler();
 8000660:	f000 f8fc 	bl	800085c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000664:	003b      	movs	r3, r7
 8000666:	2202      	movs	r2, #2
 8000668:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800066a:	003b      	movs	r3, r7
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000670:	003b      	movs	r3, r7
 8000672:	0018      	movs	r0, r3
 8000674:	f001 fb4e 	bl	8001d14 <HAL_RCCEx_PeriphCLKConfig>
 8000678:	1e03      	subs	r3, r0, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xd8>
		Error_Handler();
 800067c:	f000 f8ee 	bl	800085c <Error_Handler>
	}
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	b019      	add	sp, #100	; 0x64
 8000686:	bd90      	pop	{r4, r7, pc}
 8000688:	40007000 	.word	0x40007000
 800068c:	ffffe7ff 	.word	0xffffe7ff

08000690 <MX_IWDG_Init>:
/**
 * @brief IWDG Initialization Function
 * @param None
 * @retval None
 */
static void MX_IWDG_Init(void) {
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	/* USER CODE END IWDG_Init 0 */

	/* USER CODE BEGIN IWDG_Init 1 */

	/* USER CODE END IWDG_Init 1 */
	hiwdg.Instance = IWDG;
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_IWDG_Init+0x34>)
 8000696:	4a0c      	ldr	r2, [pc, #48]	; (80006c8 <MX_IWDG_Init+0x38>)
 8000698:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <MX_IWDG_Init+0x34>)
 800069c:	2204      	movs	r2, #4
 800069e:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Window = 4095;
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_IWDG_Init+0x34>)
 80006a2:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <MX_IWDG_Init+0x3c>)
 80006a4:	60da      	str	r2, [r3, #12]
	hiwdg.Init.Reload = 4095;
 80006a6:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <MX_IWDG_Init+0x34>)
 80006a8:	4a08      	ldr	r2, [pc, #32]	; (80006cc <MX_IWDG_Init+0x3c>)
 80006aa:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK) {
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <MX_IWDG_Init+0x34>)
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 fcd2 	bl	8001058 <HAL_IWDG_Init>
 80006b4:	1e03      	subs	r3, r0, #0
 80006b6:	d001      	beq.n	80006bc <MX_IWDG_Init+0x2c>
		Error_Handler();
 80006b8:	f000 f8d0 	bl	800085c <Error_Handler>
	}
	/* USER CODE BEGIN IWDG_Init 2 */

	/* USER CODE END IWDG_Init 2 */

}
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	20000028 	.word	0x20000028
 80006c8:	40003000 	.word	0x40003000
 80006cc:	00000fff 	.word	0x00000fff

080006d0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_USART2_UART_Init+0x58>)
 80006d6:	4a15      	ldr	r2, [pc, #84]	; (800072c <MX_USART2_UART_Init+0x5c>)
 80006d8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_USART2_UART_Init+0x58>)
 80006dc:	22e1      	movs	r2, #225	; 0xe1
 80006de:	0252      	lsls	r2, r2, #9
 80006e0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_USART2_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_USART2_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_USART2_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_USART2_UART_Init+0x58>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_USART2_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_USART2_UART_Init+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_USART2_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_USART2_UART_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000712:	4b05      	ldr	r3, [pc, #20]	; (8000728 <MX_USART2_UART_Init+0x58>)
 8000714:	0018      	movs	r0, r3
 8000716:	f001 fc29 	bl	8001f6c <HAL_UART_Init>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800071e:	f000 f89d 	bl	800085c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000038 	.word	0x20000038
 800072c:	40004400 	.word	0x40004400

08000730 <MX_WWDG_Init>:
/**
 * @brief WWDG Initialization Function
 * @param None
 * @retval None
 */
static void MX_WWDG_Init(void) {
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	/* USER CODE END WWDG_Init 0 */

	/* USER CODE BEGIN WWDG_Init 1 */

	/* USER CODE END WWDG_Init 1 */
	hwwdg.Instance = WWDG;
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <MX_WWDG_Init+0x3c>)
 8000736:	4a0e      	ldr	r2, [pc, #56]	; (8000770 <MX_WWDG_Init+0x40>)
 8000738:	601a      	str	r2, [r3, #0]
	hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_WWDG_Init+0x3c>)
 800073c:	22c0      	movs	r2, #192	; 0xc0
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	605a      	str	r2, [r3, #4]
	hwwdg.Init.Window = 100;
 8000742:	4b0a      	ldr	r3, [pc, #40]	; (800076c <MX_WWDG_Init+0x3c>)
 8000744:	2264      	movs	r2, #100	; 0x64
 8000746:	609a      	str	r2, [r3, #8]
	hwwdg.Init.Counter = 127;
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_WWDG_Init+0x3c>)
 800074a:	227f      	movs	r2, #127	; 0x7f
 800074c:	60da      	str	r2, [r3, #12]
	hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 800074e:	4b07      	ldr	r3, [pc, #28]	; (800076c <MX_WWDG_Init+0x3c>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
	if (HAL_WWDG_Init(&hwwdg) != HAL_OK) {
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <MX_WWDG_Init+0x3c>)
 8000756:	0018      	movs	r0, r3
 8000758:	f002 f8d0 	bl	80028fc <HAL_WWDG_Init>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d001      	beq.n	8000764 <MX_WWDG_Init+0x34>
		Error_Handler();
 8000760:	f000 f87c 	bl	800085c <Error_Handler>
	}
	/* USER CODE BEGIN WWDG_Init 2 */

	/* USER CODE END WWDG_Init 2 */

}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	200000c0 	.word	0x200000c0
 8000770:	40002c00 	.word	0x40002c00

08000774 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b089      	sub	sp, #36	; 0x24
 8000778:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800077a:	240c      	movs	r4, #12
 800077c:	193b      	adds	r3, r7, r4
 800077e:	0018      	movs	r0, r3
 8000780:	2314      	movs	r3, #20
 8000782:	001a      	movs	r2, r3
 8000784:	2100      	movs	r1, #0
 8000786:	f002 f911 	bl	80029ac <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	4b32      	ldr	r3, [pc, #200]	; (8000854 <MX_GPIO_Init+0xe0>)
 800078c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800078e:	4b31      	ldr	r3, [pc, #196]	; (8000854 <MX_GPIO_Init+0xe0>)
 8000790:	2104      	movs	r1, #4
 8000792:	430a      	orrs	r2, r1
 8000794:	62da      	str	r2, [r3, #44]	; 0x2c
 8000796:	4b2f      	ldr	r3, [pc, #188]	; (8000854 <MX_GPIO_Init+0xe0>)
 8000798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800079a:	2204      	movs	r2, #4
 800079c:	4013      	ands	r3, r2
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	4b2c      	ldr	r3, [pc, #176]	; (8000854 <MX_GPIO_Init+0xe0>)
 80007a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007a6:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <MX_GPIO_Init+0xe0>)
 80007a8:	2180      	movs	r1, #128	; 0x80
 80007aa:	430a      	orrs	r2, r1
 80007ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80007ae:	4b29      	ldr	r3, [pc, #164]	; (8000854 <MX_GPIO_Init+0xe0>)
 80007b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b2:	2280      	movs	r2, #128	; 0x80
 80007b4:	4013      	ands	r3, r2
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b26      	ldr	r3, [pc, #152]	; (8000854 <MX_GPIO_Init+0xe0>)
 80007bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007be:	4b25      	ldr	r3, [pc, #148]	; (8000854 <MX_GPIO_Init+0xe0>)
 80007c0:	2101      	movs	r1, #1
 80007c2:	430a      	orrs	r2, r1
 80007c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80007c6:	4b23      	ldr	r3, [pc, #140]	; (8000854 <MX_GPIO_Init+0xe0>)
 80007c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ca:	2201      	movs	r2, #1
 80007cc:	4013      	ands	r3, r2
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007d2:	23a0      	movs	r3, #160	; 0xa0
 80007d4:	05db      	lsls	r3, r3, #23
 80007d6:	2200      	movs	r2, #0
 80007d8:	2120      	movs	r1, #32
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 fc03 	bl	8000fe6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	2280      	movs	r2, #128	; 0x80
 80007e4:	0192      	lsls	r2, r2, #6
 80007e6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007e8:	193b      	adds	r3, r7, r4
 80007ea:	2284      	movs	r2, #132	; 0x84
 80007ec:	0392      	lsls	r2, r2, #14
 80007ee:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	2201      	movs	r2, #1
 80007f4:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	4a17      	ldr	r2, [pc, #92]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007fa:	0019      	movs	r1, r3
 80007fc:	0010      	movs	r0, r2
 80007fe:	f000 fa57 	bl	8000cb0 <HAL_GPIO_Init>

	/*Configure GPIO pins : S1_Pin S2_Pin S3_Pin */
	GPIO_InitStruct.Pin = S1_Pin | S2_Pin | S3_Pin;
 8000802:	193b      	adds	r3, r7, r4
 8000804:	2213      	movs	r2, #19
 8000806:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000808:	193b      	adds	r3, r7, r4
 800080a:	2200      	movs	r2, #0
 800080c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	193b      	adds	r3, r7, r4
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000814:	193a      	adds	r2, r7, r4
 8000816:	23a0      	movs	r3, #160	; 0xa0
 8000818:	05db      	lsls	r3, r3, #23
 800081a:	0011      	movs	r1, r2
 800081c:	0018      	movs	r0, r3
 800081e:	f000 fa47 	bl	8000cb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000822:	0021      	movs	r1, r4
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2220      	movs	r2, #32
 8000828:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2201      	movs	r2, #1
 800082e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800083c:	187a      	adds	r2, r7, r1
 800083e:	23a0      	movs	r3, #160	; 0xa0
 8000840:	05db      	lsls	r3, r3, #23
 8000842:	0011      	movs	r1, r2
 8000844:	0018      	movs	r0, r3
 8000846:	f000 fa33 	bl	8000cb0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b009      	add	sp, #36	; 0x24
 8000850:	bd90      	pop	{r4, r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	40021000 	.word	0x40021000
 8000858:	50000800 	.word	0x50000800

0800085c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000864:	e7fe      	b.n	8000864 <Error_Handler+0x8>
	...

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <HAL_MspInit+0x24>)
 800086e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_MspInit+0x24>)
 8000872:	2101      	movs	r1, #1
 8000874:	430a      	orrs	r2, r1
 8000876:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000878:	4b04      	ldr	r3, [pc, #16]	; (800088c <HAL_MspInit+0x24>)
 800087a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <HAL_MspInit+0x24>)
 800087e:	2180      	movs	r1, #128	; 0x80
 8000880:	0549      	lsls	r1, r1, #21
 8000882:	430a      	orrs	r2, r1
 8000884:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40021000 	.word	0x40021000

08000890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b089      	sub	sp, #36	; 0x24
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	240c      	movs	r4, #12
 800089a:	193b      	adds	r3, r7, r4
 800089c:	0018      	movs	r0, r3
 800089e:	2314      	movs	r3, #20
 80008a0:	001a      	movs	r2, r3
 80008a2:	2100      	movs	r1, #0
 80008a4:	f002 f882 	bl	80029ac <memset>
  if(huart->Instance==USART2)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a18      	ldr	r2, [pc, #96]	; (8000910 <HAL_UART_MspInit+0x80>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d129      	bne.n	8000906 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <HAL_UART_MspInit+0x84>)
 80008b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <HAL_UART_MspInit+0x84>)
 80008b8:	2180      	movs	r1, #128	; 0x80
 80008ba:	0289      	lsls	r1, r1, #10
 80008bc:	430a      	orrs	r2, r1
 80008be:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <HAL_UART_MspInit+0x84>)
 80008c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008c4:	4b13      	ldr	r3, [pc, #76]	; (8000914 <HAL_UART_MspInit+0x84>)
 80008c6:	2101      	movs	r1, #1
 80008c8:	430a      	orrs	r2, r1
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <HAL_UART_MspInit+0x84>)
 80008ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d0:	2201      	movs	r2, #1
 80008d2:	4013      	ands	r3, r2
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008d8:	0021      	movs	r1, r4
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	220c      	movs	r2, #12
 80008de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	2202      	movs	r2, #2
 80008e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2203      	movs	r2, #3
 80008f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2204      	movs	r2, #4
 80008f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	187a      	adds	r2, r7, r1
 80008fa:	23a0      	movs	r3, #160	; 0xa0
 80008fc:	05db      	lsls	r3, r3, #23
 80008fe:	0011      	movs	r1, r2
 8000900:	0018      	movs	r0, r3
 8000902:	f000 f9d5 	bl	8000cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b009      	add	sp, #36	; 0x24
 800090c:	bd90      	pop	{r4, r7, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	40004400 	.word	0x40004400
 8000914:	40021000 	.word	0x40021000

08000918 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a06      	ldr	r2, [pc, #24]	; (8000940 <HAL_WWDG_MspInit+0x28>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d106      	bne.n	8000938 <HAL_WWDG_MspInit+0x20>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_WWDG_MspInit+0x2c>)
 800092c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800092e:	4b05      	ldr	r3, [pc, #20]	; (8000944 <HAL_WWDG_MspInit+0x2c>)
 8000930:	2180      	movs	r1, #128	; 0x80
 8000932:	0109      	lsls	r1, r1, #4
 8000934:	430a      	orrs	r2, r1
 8000936:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b002      	add	sp, #8
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40002c00 	.word	0x40002c00
 8000944:	40021000 	.word	0x40021000

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800094c:	e7fe      	b.n	800094c <NMI_Handler+0x4>

0800094e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <HardFault_Handler+0x4>

08000954 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800096c:	f000 f89e 	bl	8000aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000980:	4813      	ldr	r0, [pc, #76]	; (80009d0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000982:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000984:	f7ff fff7 	bl	8000976 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000988:	4812      	ldr	r0, [pc, #72]	; (80009d4 <LoopForever+0x6>)
    LDR R1, [R0]
 800098a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800098c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800098e:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <LoopForever+0xa>)
    CMP R1, R2
 8000990:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000992:	d105      	bne.n	80009a0 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000994:	4811      	ldr	r0, [pc, #68]	; (80009dc <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000996:	4912      	ldr	r1, [pc, #72]	; (80009e0 <LoopForever+0x12>)
    STR R1, [R0]
 8000998:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800099a:	4812      	ldr	r0, [pc, #72]	; (80009e4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800099c:	4912      	ldr	r1, [pc, #72]	; (80009e8 <LoopForever+0x1a>)
    STR R1, [R0]
 800099e:	6001      	str	r1, [r0, #0]

080009a0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a0:	4812      	ldr	r0, [pc, #72]	; (80009ec <LoopForever+0x1e>)
  ldr r1, =_edata
 80009a2:	4913      	ldr	r1, [pc, #76]	; (80009f0 <LoopForever+0x22>)
  ldr r2, =_sidata
 80009a4:	4a13      	ldr	r2, [pc, #76]	; (80009f4 <LoopForever+0x26>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a10      	ldr	r2, [pc, #64]	; (80009f8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80009b8:	4c10      	ldr	r4, [pc, #64]	; (80009fc <LoopForever+0x2e>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009c6:	f001 ffcd 	bl	8002964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ca:	f7ff fd6d 	bl	80004a8 <main>

080009ce <LoopForever>:

LoopForever:
    b LoopForever
 80009ce:	e7fe      	b.n	80009ce <LoopForever>
   ldr   r0, =_estack
 80009d0:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 80009d4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80009d8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80009dc:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80009e0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80009e4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80009e8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80009ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009f4:	08002a50 	.word	0x08002a50
  ldr r2, =_sbss
 80009f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009fc:	200000dc 	.word	0x200000dc

08000a00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a00:	e7fe      	b.n	8000a00 <ADC1_IRQHandler>
	...

08000a04 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <HAL_Init+0x3c>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <HAL_Init+0x3c>)
 8000a16:	2140      	movs	r1, #64	; 0x40
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f000 f811 	bl	8000a44 <HAL_InitTick>
 8000a22:	1e03      	subs	r3, r0, #0
 8000a24:	d003      	beq.n	8000a2e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	2201      	movs	r2, #1
 8000a2a:	701a      	strb	r2, [r3, #0]
 8000a2c:	e001      	b.n	8000a32 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a2e:	f7ff ff1b 	bl	8000868 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a32:	1dfb      	adds	r3, r7, #7
 8000a34:	781b      	ldrb	r3, [r3, #0]
}
 8000a36:	0018      	movs	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b002      	add	sp, #8
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	40022000 	.word	0x40022000

08000a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <HAL_InitTick+0x5c>)
 8000a4e:	681c      	ldr	r4, [r3, #0]
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <HAL_InitTick+0x60>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	0019      	movs	r1, r3
 8000a56:	23fa      	movs	r3, #250	; 0xfa
 8000a58:	0098      	lsls	r0, r3, #2
 8000a5a:	f7ff fb55 	bl	8000108 <__udivsi3>
 8000a5e:	0003      	movs	r3, r0
 8000a60:	0019      	movs	r1, r3
 8000a62:	0020      	movs	r0, r4
 8000a64:	f7ff fb50 	bl	8000108 <__udivsi3>
 8000a68:	0003      	movs	r3, r0
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f000 f913 	bl	8000c96 <HAL_SYSTICK_Config>
 8000a70:	1e03      	subs	r3, r0, #0
 8000a72:	d001      	beq.n	8000a78 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
 8000a76:	e00f      	b.n	8000a98 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b03      	cmp	r3, #3
 8000a7c:	d80b      	bhi.n	8000a96 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	2301      	movs	r3, #1
 8000a82:	425b      	negs	r3, r3
 8000a84:	2200      	movs	r2, #0
 8000a86:	0018      	movs	r0, r3
 8000a88:	f000 f8f0 	bl	8000c6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_InitTick+0x64>)
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a92:	2300      	movs	r3, #0
 8000a94:	e000      	b.n	8000a98 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
}
 8000a98:	0018      	movs	r0, r3
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b003      	add	sp, #12
 8000a9e:	bd90      	pop	{r4, r7, pc}
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	20000004 	.word	0x20000004

08000aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_IncTick+0x1c>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	001a      	movs	r2, r3
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_IncTick+0x20>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	18d2      	adds	r2, r2, r3
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <HAL_IncTick+0x20>)
 8000abe:	601a      	str	r2, [r3, #0]
}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	200000d8 	.word	0x200000d8

08000ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad4:	4b02      	ldr	r3, [pc, #8]	; (8000ae0 <HAL_GetTick+0x10>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
}
 8000ad8:	0018      	movs	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	200000d8 	.word	0x200000d8

08000ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aec:	f7ff fff0 	bl	8000ad0 <HAL_GetTick>
 8000af0:	0003      	movs	r3, r0
 8000af2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	3301      	adds	r3, #1
 8000afc:	d005      	beq.n	8000b0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <HAL_Delay+0x44>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	001a      	movs	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	189b      	adds	r3, r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	f7ff ffe0 	bl	8000ad0 <HAL_GetTick>
 8000b10:	0002      	movs	r2, r0
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d8f7      	bhi.n	8000b0c <HAL_Delay+0x28>
  {
  }
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b004      	add	sp, #16
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	20000008 	.word	0x20000008

08000b2c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <HAL_SuspendTick+0x18>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <HAL_SuspendTick+0x18>)
 8000b36:	2102      	movs	r1, #2
 8000b38:	438a      	bics	r2, r1
 8000b3a:	601a      	str	r2, [r3, #0]
}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	e000e010 	.word	0xe000e010

08000b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	0002      	movs	r2, r0
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b56:	1dfb      	adds	r3, r7, #7
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b7f      	cmp	r3, #127	; 0x7f
 8000b5c:	d828      	bhi.n	8000bb0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b5e:	4a2f      	ldr	r2, [pc, #188]	; (8000c1c <__NVIC_SetPriority+0xd4>)
 8000b60:	1dfb      	adds	r3, r7, #7
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	b25b      	sxtb	r3, r3
 8000b66:	089b      	lsrs	r3, r3, #2
 8000b68:	33c0      	adds	r3, #192	; 0xc0
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	589b      	ldr	r3, [r3, r2]
 8000b6e:	1dfa      	adds	r2, r7, #7
 8000b70:	7812      	ldrb	r2, [r2, #0]
 8000b72:	0011      	movs	r1, r2
 8000b74:	2203      	movs	r2, #3
 8000b76:	400a      	ands	r2, r1
 8000b78:	00d2      	lsls	r2, r2, #3
 8000b7a:	21ff      	movs	r1, #255	; 0xff
 8000b7c:	4091      	lsls	r1, r2
 8000b7e:	000a      	movs	r2, r1
 8000b80:	43d2      	mvns	r2, r2
 8000b82:	401a      	ands	r2, r3
 8000b84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	019b      	lsls	r3, r3, #6
 8000b8a:	22ff      	movs	r2, #255	; 0xff
 8000b8c:	401a      	ands	r2, r3
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	0018      	movs	r0, r3
 8000b94:	2303      	movs	r3, #3
 8000b96:	4003      	ands	r3, r0
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b9c:	481f      	ldr	r0, [pc, #124]	; (8000c1c <__NVIC_SetPriority+0xd4>)
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	b25b      	sxtb	r3, r3
 8000ba4:	089b      	lsrs	r3, r3, #2
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	33c0      	adds	r3, #192	; 0xc0
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bae:	e031      	b.n	8000c14 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb0:	4a1b      	ldr	r2, [pc, #108]	; (8000c20 <__NVIC_SetPriority+0xd8>)
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	0019      	movs	r1, r3
 8000bb8:	230f      	movs	r3, #15
 8000bba:	400b      	ands	r3, r1
 8000bbc:	3b08      	subs	r3, #8
 8000bbe:	089b      	lsrs	r3, r3, #2
 8000bc0:	3306      	adds	r3, #6
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	18d3      	adds	r3, r2, r3
 8000bc6:	3304      	adds	r3, #4
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	1dfa      	adds	r2, r7, #7
 8000bcc:	7812      	ldrb	r2, [r2, #0]
 8000bce:	0011      	movs	r1, r2
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	400a      	ands	r2, r1
 8000bd4:	00d2      	lsls	r2, r2, #3
 8000bd6:	21ff      	movs	r1, #255	; 0xff
 8000bd8:	4091      	lsls	r1, r2
 8000bda:	000a      	movs	r2, r1
 8000bdc:	43d2      	mvns	r2, r2
 8000bde:	401a      	ands	r2, r3
 8000be0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	019b      	lsls	r3, r3, #6
 8000be6:	22ff      	movs	r2, #255	; 0xff
 8000be8:	401a      	ands	r2, r3
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	0018      	movs	r0, r3
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	4003      	ands	r3, r0
 8000bf4:	00db      	lsls	r3, r3, #3
 8000bf6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf8:	4809      	ldr	r0, [pc, #36]	; (8000c20 <__NVIC_SetPriority+0xd8>)
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	001c      	movs	r4, r3
 8000c00:	230f      	movs	r3, #15
 8000c02:	4023      	ands	r3, r4
 8000c04:	3b08      	subs	r3, #8
 8000c06:	089b      	lsrs	r3, r3, #2
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	3306      	adds	r3, #6
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	18c3      	adds	r3, r0, r3
 8000c10:	3304      	adds	r3, #4
 8000c12:	601a      	str	r2, [r3, #0]
}
 8000c14:	46c0      	nop			; (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	b003      	add	sp, #12
 8000c1a:	bd90      	pop	{r4, r7, pc}
 8000c1c:	e000e100 	.word	0xe000e100
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	1e5a      	subs	r2, r3, #1
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	045b      	lsls	r3, r3, #17
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d301      	bcc.n	8000c3c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e010      	b.n	8000c5e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <SysTick_Config+0x44>)
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	3a01      	subs	r2, #1
 8000c42:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c44:	2301      	movs	r3, #1
 8000c46:	425b      	negs	r3, r3
 8000c48:	2103      	movs	r1, #3
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f7ff ff7c 	bl	8000b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <SysTick_Config+0x44>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <SysTick_Config+0x44>)
 8000c58:	2207      	movs	r2, #7
 8000c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	0018      	movs	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b002      	add	sp, #8
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	e000e010 	.word	0xe000e010

08000c6c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	607a      	str	r2, [r7, #4]
 8000c76:	210f      	movs	r1, #15
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	1c02      	adds	r2, r0, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	b25b      	sxtb	r3, r3
 8000c86:	0011      	movs	r1, r2
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f7ff ff5d 	bl	8000b48 <__NVIC_SetPriority>
}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b004      	add	sp, #16
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f7ff ffbf 	bl	8000c24 <SysTick_Config>
 8000ca6:	0003      	movs	r3, r0
}
 8000ca8:	0018      	movs	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b002      	add	sp, #8
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cc6:	e155      	b.n	8000f74 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2101      	movs	r1, #1
 8000cce:	697a      	ldr	r2, [r7, #20]
 8000cd0:	4091      	lsls	r1, r2
 8000cd2:	000a      	movs	r2, r1
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d100      	bne.n	8000ce0 <HAL_GPIO_Init+0x30>
 8000cde:	e146      	b.n	8000f6e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d005      	beq.n	8000cf8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d130      	bne.n	8000d5a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	2203      	movs	r2, #3
 8000d04:	409a      	lsls	r2, r3
 8000d06:	0013      	movs	r3, r2
 8000d08:	43da      	mvns	r2, r3
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	68da      	ldr	r2, [r3, #12]
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	409a      	lsls	r2, r3
 8000d1a:	0013      	movs	r3, r2
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d2e:	2201      	movs	r2, #1
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	409a      	lsls	r2, r3
 8000d34:	0013      	movs	r3, r2
 8000d36:	43da      	mvns	r2, r3
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	091b      	lsrs	r3, r3, #4
 8000d44:	2201      	movs	r2, #1
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
 8000d4c:	0013      	movs	r3, r2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2203      	movs	r2, #3
 8000d60:	4013      	ands	r3, r2
 8000d62:	2b03      	cmp	r3, #3
 8000d64:	d017      	beq.n	8000d96 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	2203      	movs	r2, #3
 8000d72:	409a      	lsls	r2, r3
 8000d74:	0013      	movs	r3, r2
 8000d76:	43da      	mvns	r2, r3
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	409a      	lsls	r2, r3
 8000d88:	0013      	movs	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d123      	bne.n	8000dea <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	08da      	lsrs	r2, r3, #3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	3208      	adds	r2, #8
 8000daa:	0092      	lsls	r2, r2, #2
 8000dac:	58d3      	ldr	r3, [r2, r3]
 8000dae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	2207      	movs	r2, #7
 8000db4:	4013      	ands	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	220f      	movs	r2, #15
 8000dba:	409a      	lsls	r2, r3
 8000dbc:	0013      	movs	r3, r2
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	691a      	ldr	r2, [r3, #16]
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	2107      	movs	r1, #7
 8000dce:	400b      	ands	r3, r1
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	409a      	lsls	r2, r3
 8000dd4:	0013      	movs	r3, r2
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	08da      	lsrs	r2, r3, #3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3208      	adds	r2, #8
 8000de4:	0092      	lsls	r2, r2, #2
 8000de6:	6939      	ldr	r1, [r7, #16]
 8000de8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	2203      	movs	r2, #3
 8000df6:	409a      	lsls	r2, r3
 8000df8:	0013      	movs	r3, r2
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2203      	movs	r2, #3
 8000e08:	401a      	ands	r2, r3
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	0013      	movs	r3, r2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685a      	ldr	r2, [r3, #4]
 8000e22:	23c0      	movs	r3, #192	; 0xc0
 8000e24:	029b      	lsls	r3, r3, #10
 8000e26:	4013      	ands	r3, r2
 8000e28:	d100      	bne.n	8000e2c <HAL_GPIO_Init+0x17c>
 8000e2a:	e0a0      	b.n	8000f6e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2c:	4b57      	ldr	r3, [pc, #348]	; (8000f8c <HAL_GPIO_Init+0x2dc>)
 8000e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e30:	4b56      	ldr	r3, [pc, #344]	; (8000f8c <HAL_GPIO_Init+0x2dc>)
 8000e32:	2101      	movs	r1, #1
 8000e34:	430a      	orrs	r2, r1
 8000e36:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e38:	4a55      	ldr	r2, [pc, #340]	; (8000f90 <HAL_GPIO_Init+0x2e0>)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	089b      	lsrs	r3, r3, #2
 8000e3e:	3302      	adds	r3, #2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	589b      	ldr	r3, [r3, r2]
 8000e44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	2203      	movs	r2, #3
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	220f      	movs	r2, #15
 8000e50:	409a      	lsls	r2, r3
 8000e52:	0013      	movs	r3, r2
 8000e54:	43da      	mvns	r2, r3
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	23a0      	movs	r3, #160	; 0xa0
 8000e60:	05db      	lsls	r3, r3, #23
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d01f      	beq.n	8000ea6 <HAL_GPIO_Init+0x1f6>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4a      	ldr	r2, [pc, #296]	; (8000f94 <HAL_GPIO_Init+0x2e4>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d019      	beq.n	8000ea2 <HAL_GPIO_Init+0x1f2>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a49      	ldr	r2, [pc, #292]	; (8000f98 <HAL_GPIO_Init+0x2e8>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d013      	beq.n	8000e9e <HAL_GPIO_Init+0x1ee>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a48      	ldr	r2, [pc, #288]	; (8000f9c <HAL_GPIO_Init+0x2ec>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d00d      	beq.n	8000e9a <HAL_GPIO_Init+0x1ea>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a47      	ldr	r2, [pc, #284]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d007      	beq.n	8000e96 <HAL_GPIO_Init+0x1e6>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a46      	ldr	r2, [pc, #280]	; (8000fa4 <HAL_GPIO_Init+0x2f4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d101      	bne.n	8000e92 <HAL_GPIO_Init+0x1e2>
 8000e8e:	2305      	movs	r3, #5
 8000e90:	e00a      	b.n	8000ea8 <HAL_GPIO_Init+0x1f8>
 8000e92:	2306      	movs	r3, #6
 8000e94:	e008      	b.n	8000ea8 <HAL_GPIO_Init+0x1f8>
 8000e96:	2304      	movs	r3, #4
 8000e98:	e006      	b.n	8000ea8 <HAL_GPIO_Init+0x1f8>
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e004      	b.n	8000ea8 <HAL_GPIO_Init+0x1f8>
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	e002      	b.n	8000ea8 <HAL_GPIO_Init+0x1f8>
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e000      	b.n	8000ea8 <HAL_GPIO_Init+0x1f8>
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	2103      	movs	r1, #3
 8000eac:	400a      	ands	r2, r1
 8000eae:	0092      	lsls	r2, r2, #2
 8000eb0:	4093      	lsls	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eb8:	4935      	ldr	r1, [pc, #212]	; (8000f90 <HAL_GPIO_Init+0x2e0>)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	089b      	lsrs	r3, r3, #2
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ec6:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <HAL_GPIO_Init+0x2f8>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	2380      	movs	r3, #128	; 0x80
 8000edc:	035b      	lsls	r3, r3, #13
 8000ede:	4013      	ands	r3, r2
 8000ee0:	d003      	beq.n	8000eea <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000eea:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <HAL_GPIO_Init+0x2f8>)
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ef0:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <HAL_GPIO_Init+0x2f8>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	43da      	mvns	r2, r3
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685a      	ldr	r2, [r3, #4]
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	039b      	lsls	r3, r3, #14
 8000f08:	4013      	ands	r3, r2
 8000f0a:	d003      	beq.n	8000f14 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f14:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <HAL_GPIO_Init+0x2f8>)
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000f1a:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <HAL_GPIO_Init+0x2f8>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	43da      	mvns	r2, r3
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	2380      	movs	r3, #128	; 0x80
 8000f30:	029b      	lsls	r3, r3, #10
 8000f32:	4013      	ands	r3, r2
 8000f34:	d003      	beq.n	8000f3e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <HAL_GPIO_Init+0x2f8>)
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f44:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <HAL_GPIO_Init+0x2f8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	43da      	mvns	r2, r3
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	2380      	movs	r3, #128	; 0x80
 8000f5a:	025b      	lsls	r3, r3, #9
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	d003      	beq.n	8000f68 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_GPIO_Init+0x2f8>)
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3301      	adds	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	40da      	lsrs	r2, r3
 8000f7c:	1e13      	subs	r3, r2, #0
 8000f7e:	d000      	beq.n	8000f82 <HAL_GPIO_Init+0x2d2>
 8000f80:	e6a2      	b.n	8000cc8 <HAL_GPIO_Init+0x18>
  }
}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b006      	add	sp, #24
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40010000 	.word	0x40010000
 8000f94:	50000400 	.word	0x50000400
 8000f98:	50000800 	.word	0x50000800
 8000f9c:	50000c00 	.word	0x50000c00
 8000fa0:	50001000 	.word	0x50001000
 8000fa4:	50001c00 	.word	0x50001c00
 8000fa8:	40010400 	.word	0x40010400

08000fac <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	000a      	movs	r2, r1
 8000fb6:	1cbb      	adds	r3, r7, #2
 8000fb8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	1cba      	adds	r2, r7, #2
 8000fc0:	8812      	ldrh	r2, [r2, #0]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d004      	beq.n	8000fd0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	18fb      	adds	r3, r7, r3
 8000fca:	2201      	movs	r2, #1
 8000fcc:	701a      	strb	r2, [r3, #0]
 8000fce:	e003      	b.n	8000fd8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	18fb      	adds	r3, r7, r3
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000fd8:	230f      	movs	r3, #15
 8000fda:	18fb      	adds	r3, r7, r3
 8000fdc:	781b      	ldrb	r3, [r3, #0]
}
 8000fde:	0018      	movs	r0, r3
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b004      	add	sp, #16
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	0008      	movs	r0, r1
 8000ff0:	0011      	movs	r1, r2
 8000ff2:	1cbb      	adds	r3, r7, #2
 8000ff4:	1c02      	adds	r2, r0, #0
 8000ff6:	801a      	strh	r2, [r3, #0]
 8000ff8:	1c7b      	adds	r3, r7, #1
 8000ffa:	1c0a      	adds	r2, r1, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ffe:	1c7b      	adds	r3, r7, #1
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d004      	beq.n	8001010 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001006:	1cbb      	adds	r3, r7, #2
 8001008:	881a      	ldrh	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800100e:	e003      	b.n	8001018 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001010:	1cbb      	adds	r3, r7, #2
 8001012:	881a      	ldrh	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001018:	46c0      	nop			; (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	b002      	add	sp, #8
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	000a      	movs	r2, r1
 800102a:	1cbb      	adds	r3, r7, #2
 800102c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001034:	1cbb      	adds	r3, r7, #2
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	68fa      	ldr	r2, [r7, #12]
 800103a:	4013      	ands	r3, r2
 800103c:	041a      	lsls	r2, r3, #16
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	43db      	mvns	r3, r3
 8001042:	1cb9      	adds	r1, r7, #2
 8001044:	8809      	ldrh	r1, [r1, #0]
 8001046:	400b      	ands	r3, r1
 8001048:	431a      	orrs	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	619a      	str	r2, [r3, #24]
}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	46bd      	mov	sp, r7
 8001052:	b004      	add	sp, #16
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e03d      	b.n	80010e6 <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a20      	ldr	r2, [pc, #128]	; (80010f0 <HAL_IWDG_Init+0x98>)
 8001070:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a1f      	ldr	r2, [pc, #124]	; (80010f4 <HAL_IWDG_Init+0x9c>)
 8001078:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	6852      	ldr	r2, [r2, #4]
 8001082:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	6892      	ldr	r2, [r2, #8]
 800108c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800108e:	f7ff fd1f 	bl	8000ad0 <HAL_GetTick>
 8001092:	0003      	movs	r3, r0
 8001094:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001096:	e00e      	b.n	80010b6 <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001098:	f7ff fd1a 	bl	8000ad0 <HAL_GetTick>
 800109c:	0002      	movs	r2, r0
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b2a      	cmp	r3, #42	; 0x2a
 80010a4:	d907      	bls.n	80010b6 <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	2207      	movs	r2, #7
 80010ae:	4013      	ands	r3, r2
 80010b0:	d001      	beq.n	80010b6 <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e017      	b.n	80010e6 <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	2207      	movs	r2, #7
 80010be:	4013      	ands	r3, r2
 80010c0:	d1ea      	bne.n	8001098 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	691a      	ldr	r2, [r3, #16]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d005      	beq.n	80010dc <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	68d2      	ldr	r2, [r2, #12]
 80010d8:	611a      	str	r2, [r3, #16]
 80010da:	e003      	b.n	80010e4 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <HAL_IWDG_Init+0xa0>)
 80010e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	0018      	movs	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b004      	add	sp, #16
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	0000cccc 	.word	0x0000cccc
 80010f4:	00005555 	.word	0x00005555
 80010f8:	0000aaaa 	.word	0x0000aaaa

080010fc <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a03      	ldr	r2, [pc, #12]	; (8001118 <HAL_IWDG_Refresh+0x1c>)
 800110a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	0018      	movs	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	b002      	add	sp, #8
 8001114:	bd80      	pop	{r7, pc}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	0000aaaa 	.word	0x0000aaaa

0800111c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	000a      	movs	r2, r1
 8001126:	1cfb      	adds	r3, r7, #3
 8001128:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800112e:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 800113a:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <HAL_PWR_EnterSTOPMode+0xac>)
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	2201      	movs	r2, #1
 8001140:	4013      	ands	r3, r2
 8001142:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d008      	beq.n	800115c <HAL_PWR_EnterSTOPMode+0x40>
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d005      	beq.n	800115c <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8001150:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001156:	491d      	ldr	r1, [pc, #116]	; (80011cc <HAL_PWR_EnterSTOPMode+0xb0>)
 8001158:	400a      	ands	r2, r1
 800115a:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <HAL_PWR_EnterSTOPMode+0xa8>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	2203      	movs	r2, #3
 8001166:	4393      	bics	r3, r2
 8001168:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4313      	orrs	r3, r2
 8001170:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001178:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_PWR_EnterSTOPMode+0xb4>)
 800117a:	691a      	ldr	r2, [r3, #16]
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <HAL_PWR_EnterSTOPMode+0xb4>)
 800117e:	2104      	movs	r1, #4
 8001180:	430a      	orrs	r2, r1
 8001182:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001184:	1cfb      	adds	r3, r7, #3
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d101      	bne.n	8001190 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800118c:	bf30      	wfi
 800118e:	e002      	b.n	8001196 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001190:	bf40      	sev
    __WFE();
 8001192:	bf20      	wfe
    __WFE();
 8001194:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001198:	691a      	ldr	r2, [r3, #16]
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_PWR_EnterSTOPMode+0xb4>)
 800119c:	2104      	movs	r1, #4
 800119e:	438a      	bics	r2, r1
 80011a0:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d009      	beq.n	80011bc <HAL_PWR_EnterSTOPMode+0xa0>
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d006      	beq.n	80011bc <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_PWR_EnterSTOPMode+0xa8>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <HAL_PWR_EnterSTOPMode+0xa8>)
 80011b4:	2180      	movs	r1, #128	; 0x80
 80011b6:	0089      	lsls	r1, r1, #2
 80011b8:	430a      	orrs	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]
  }
}
 80011bc:	46c0      	nop			; (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	b006      	add	sp, #24
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40007000 	.word	0x40007000
 80011c8:	40010000 	.word	0x40010000
 80011cc:	fffffdff 	.word	0xfffffdff
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d4:	b5b0      	push	{r4, r5, r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d102      	bne.n	80011e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	f000 fb6c 	bl	80018c0 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011e8:	4bc8      	ldr	r3, [pc, #800]	; (800150c <HAL_RCC_OscConfig+0x338>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	220c      	movs	r2, #12
 80011ee:	4013      	ands	r3, r2
 80011f0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011f2:	4bc6      	ldr	r3, [pc, #792]	; (800150c <HAL_RCC_OscConfig+0x338>)
 80011f4:	68da      	ldr	r2, [r3, #12]
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	025b      	lsls	r3, r3, #9
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2201      	movs	r2, #1
 8001204:	4013      	ands	r3, r2
 8001206:	d100      	bne.n	800120a <HAL_RCC_OscConfig+0x36>
 8001208:	e07d      	b.n	8001306 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	2b08      	cmp	r3, #8
 800120e:	d007      	beq.n	8001220 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	2b0c      	cmp	r3, #12
 8001214:	d112      	bne.n	800123c <HAL_RCC_OscConfig+0x68>
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	025b      	lsls	r3, r3, #9
 800121c:	429a      	cmp	r2, r3
 800121e:	d10d      	bne.n	800123c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001220:	4bba      	ldr	r3, [pc, #744]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	029b      	lsls	r3, r3, #10
 8001228:	4013      	ands	r3, r2
 800122a:	d100      	bne.n	800122e <HAL_RCC_OscConfig+0x5a>
 800122c:	e06a      	b.n	8001304 <HAL_RCC_OscConfig+0x130>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d166      	bne.n	8001304 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	f000 fb42 	bl	80018c0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	025b      	lsls	r3, r3, #9
 8001244:	429a      	cmp	r2, r3
 8001246:	d107      	bne.n	8001258 <HAL_RCC_OscConfig+0x84>
 8001248:	4bb0      	ldr	r3, [pc, #704]	; (800150c <HAL_RCC_OscConfig+0x338>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4baf      	ldr	r3, [pc, #700]	; (800150c <HAL_RCC_OscConfig+0x338>)
 800124e:	2180      	movs	r1, #128	; 0x80
 8001250:	0249      	lsls	r1, r1, #9
 8001252:	430a      	orrs	r2, r1
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	e027      	b.n	80012a8 <HAL_RCC_OscConfig+0xd4>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	23a0      	movs	r3, #160	; 0xa0
 800125e:	02db      	lsls	r3, r3, #11
 8001260:	429a      	cmp	r2, r3
 8001262:	d10e      	bne.n	8001282 <HAL_RCC_OscConfig+0xae>
 8001264:	4ba9      	ldr	r3, [pc, #676]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4ba8      	ldr	r3, [pc, #672]	; (800150c <HAL_RCC_OscConfig+0x338>)
 800126a:	2180      	movs	r1, #128	; 0x80
 800126c:	02c9      	lsls	r1, r1, #11
 800126e:	430a      	orrs	r2, r1
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	4ba6      	ldr	r3, [pc, #664]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4ba5      	ldr	r3, [pc, #660]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001278:	2180      	movs	r1, #128	; 0x80
 800127a:	0249      	lsls	r1, r1, #9
 800127c:	430a      	orrs	r2, r1
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	e012      	b.n	80012a8 <HAL_RCC_OscConfig+0xd4>
 8001282:	4ba2      	ldr	r3, [pc, #648]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	4ba1      	ldr	r3, [pc, #644]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001288:	49a1      	ldr	r1, [pc, #644]	; (8001510 <HAL_RCC_OscConfig+0x33c>)
 800128a:	400a      	ands	r2, r1
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	4b9f      	ldr	r3, [pc, #636]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	2380      	movs	r3, #128	; 0x80
 8001294:	025b      	lsls	r3, r3, #9
 8001296:	4013      	ands	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4b9b      	ldr	r3, [pc, #620]	; (800150c <HAL_RCC_OscConfig+0x338>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b9a      	ldr	r3, [pc, #616]	; (800150c <HAL_RCC_OscConfig+0x338>)
 80012a2:	499c      	ldr	r1, [pc, #624]	; (8001514 <HAL_RCC_OscConfig+0x340>)
 80012a4:	400a      	ands	r2, r1
 80012a6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d014      	beq.n	80012da <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b0:	f7ff fc0e 	bl	8000ad0 <HAL_GetTick>
 80012b4:	0003      	movs	r3, r0
 80012b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ba:	f7ff fc09 	bl	8000ad0 <HAL_GetTick>
 80012be:	0002      	movs	r2, r0
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b64      	cmp	r3, #100	; 0x64
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e2f9      	b.n	80018c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012cc:	4b8f      	ldr	r3, [pc, #572]	; (800150c <HAL_RCC_OscConfig+0x338>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	029b      	lsls	r3, r3, #10
 80012d4:	4013      	ands	r3, r2
 80012d6:	d0f0      	beq.n	80012ba <HAL_RCC_OscConfig+0xe6>
 80012d8:	e015      	b.n	8001306 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012da:	f7ff fbf9 	bl	8000ad0 <HAL_GetTick>
 80012de:	0003      	movs	r3, r0
 80012e0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e4:	f7ff fbf4 	bl	8000ad0 <HAL_GetTick>
 80012e8:	0002      	movs	r2, r0
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b64      	cmp	r3, #100	; 0x64
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e2e4      	b.n	80018c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012f6:	4b85      	ldr	r3, [pc, #532]	; (800150c <HAL_RCC_OscConfig+0x338>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	029b      	lsls	r3, r3, #10
 80012fe:	4013      	ands	r3, r2
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0x110>
 8001302:	e000      	b.n	8001306 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001304:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2202      	movs	r2, #2
 800130c:	4013      	ands	r3, r2
 800130e:	d100      	bne.n	8001312 <HAL_RCC_OscConfig+0x13e>
 8001310:	e099      	b.n	8001446 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	2220      	movs	r2, #32
 800131c:	4013      	ands	r3, r2
 800131e:	d009      	beq.n	8001334 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001320:	4b7a      	ldr	r3, [pc, #488]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b79      	ldr	r3, [pc, #484]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001326:	2120      	movs	r1, #32
 8001328:	430a      	orrs	r2, r1
 800132a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	2220      	movs	r2, #32
 8001330:	4393      	bics	r3, r2
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	2b04      	cmp	r3, #4
 8001338:	d005      	beq.n	8001346 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	2b0c      	cmp	r3, #12
 800133e:	d13e      	bne.n	80013be <HAL_RCC_OscConfig+0x1ea>
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d13b      	bne.n	80013be <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001346:	4b71      	ldr	r3, [pc, #452]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2204      	movs	r2, #4
 800134c:	4013      	ands	r3, r2
 800134e:	d004      	beq.n	800135a <HAL_RCC_OscConfig+0x186>
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e2b2      	b.n	80018c0 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135a:	4b6c      	ldr	r3, [pc, #432]	; (800150c <HAL_RCC_OscConfig+0x338>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	4a6e      	ldr	r2, [pc, #440]	; (8001518 <HAL_RCC_OscConfig+0x344>)
 8001360:	4013      	ands	r3, r2
 8001362:	0019      	movs	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	021a      	lsls	r2, r3, #8
 800136a:	4b68      	ldr	r3, [pc, #416]	; (800150c <HAL_RCC_OscConfig+0x338>)
 800136c:	430a      	orrs	r2, r1
 800136e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001370:	4b66      	ldr	r3, [pc, #408]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2209      	movs	r2, #9
 8001376:	4393      	bics	r3, r2
 8001378:	0019      	movs	r1, r3
 800137a:	4b64      	ldr	r3, [pc, #400]	; (800150c <HAL_RCC_OscConfig+0x338>)
 800137c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800137e:	430a      	orrs	r2, r1
 8001380:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001382:	f000 fbeb 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8001386:	0001      	movs	r1, r0
 8001388:	4b60      	ldr	r3, [pc, #384]	; (800150c <HAL_RCC_OscConfig+0x338>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	091b      	lsrs	r3, r3, #4
 800138e:	220f      	movs	r2, #15
 8001390:	4013      	ands	r3, r2
 8001392:	4a62      	ldr	r2, [pc, #392]	; (800151c <HAL_RCC_OscConfig+0x348>)
 8001394:	5cd3      	ldrb	r3, [r2, r3]
 8001396:	000a      	movs	r2, r1
 8001398:	40da      	lsrs	r2, r3
 800139a:	4b61      	ldr	r3, [pc, #388]	; (8001520 <HAL_RCC_OscConfig+0x34c>)
 800139c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800139e:	4b61      	ldr	r3, [pc, #388]	; (8001524 <HAL_RCC_OscConfig+0x350>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2513      	movs	r5, #19
 80013a4:	197c      	adds	r4, r7, r5
 80013a6:	0018      	movs	r0, r3
 80013a8:	f7ff fb4c 	bl	8000a44 <HAL_InitTick>
 80013ac:	0003      	movs	r3, r0
 80013ae:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80013b0:	197b      	adds	r3, r7, r5
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d046      	beq.n	8001446 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80013b8:	197b      	adds	r3, r7, r5
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	e280      	b.n	80018c0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d027      	beq.n	8001414 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013c4:	4b51      	ldr	r3, [pc, #324]	; (800150c <HAL_RCC_OscConfig+0x338>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2209      	movs	r2, #9
 80013ca:	4393      	bics	r3, r2
 80013cc:	0019      	movs	r1, r3
 80013ce:	4b4f      	ldr	r3, [pc, #316]	; (800150c <HAL_RCC_OscConfig+0x338>)
 80013d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d2:	430a      	orrs	r2, r1
 80013d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d6:	f7ff fb7b 	bl	8000ad0 <HAL_GetTick>
 80013da:	0003      	movs	r3, r0
 80013dc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e0:	f7ff fb76 	bl	8000ad0 <HAL_GetTick>
 80013e4:	0002      	movs	r2, r0
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e266      	b.n	80018c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013f2:	4b46      	ldr	r3, [pc, #280]	; (800150c <HAL_RCC_OscConfig+0x338>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2204      	movs	r2, #4
 80013f8:	4013      	ands	r3, r2
 80013fa:	d0f1      	beq.n	80013e0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fc:	4b43      	ldr	r3, [pc, #268]	; (800150c <HAL_RCC_OscConfig+0x338>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	4a45      	ldr	r2, [pc, #276]	; (8001518 <HAL_RCC_OscConfig+0x344>)
 8001402:	4013      	ands	r3, r2
 8001404:	0019      	movs	r1, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	021a      	lsls	r2, r3, #8
 800140c:	4b3f      	ldr	r3, [pc, #252]	; (800150c <HAL_RCC_OscConfig+0x338>)
 800140e:	430a      	orrs	r2, r1
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	e018      	b.n	8001446 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001414:	4b3d      	ldr	r3, [pc, #244]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b3c      	ldr	r3, [pc, #240]	; (800150c <HAL_RCC_OscConfig+0x338>)
 800141a:	2101      	movs	r1, #1
 800141c:	438a      	bics	r2, r1
 800141e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff fb56 	bl	8000ad0 <HAL_GetTick>
 8001424:	0003      	movs	r3, r0
 8001426:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800142a:	f7ff fb51 	bl	8000ad0 <HAL_GetTick>
 800142e:	0002      	movs	r2, r0
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e241      	b.n	80018c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800143c:	4b33      	ldr	r3, [pc, #204]	; (800150c <HAL_RCC_OscConfig+0x338>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2204      	movs	r2, #4
 8001442:	4013      	ands	r3, r2
 8001444:	d1f1      	bne.n	800142a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2210      	movs	r2, #16
 800144c:	4013      	ands	r3, r2
 800144e:	d100      	bne.n	8001452 <HAL_RCC_OscConfig+0x27e>
 8001450:	e0a1      	b.n	8001596 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d140      	bne.n	80014da <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001458:	4b2c      	ldr	r3, [pc, #176]	; (800150c <HAL_RCC_OscConfig+0x338>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4013      	ands	r3, r2
 8001462:	d005      	beq.n	8001470 <HAL_RCC_OscConfig+0x29c>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e227      	b.n	80018c0 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001470:	4b26      	ldr	r3, [pc, #152]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	4a2c      	ldr	r2, [pc, #176]	; (8001528 <HAL_RCC_OscConfig+0x354>)
 8001476:	4013      	ands	r3, r2
 8001478:	0019      	movs	r1, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a1a      	ldr	r2, [r3, #32]
 800147e:	4b23      	ldr	r3, [pc, #140]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001480:	430a      	orrs	r2, r1
 8001482:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001484:	4b21      	ldr	r3, [pc, #132]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	0a19      	lsrs	r1, r3, #8
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	061a      	lsls	r2, r3, #24
 8001492:	4b1e      	ldr	r3, [pc, #120]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001494:	430a      	orrs	r2, r1
 8001496:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	0b5b      	lsrs	r3, r3, #13
 800149e:	3301      	adds	r3, #1
 80014a0:	2280      	movs	r2, #128	; 0x80
 80014a2:	0212      	lsls	r2, r2, #8
 80014a4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80014a6:	4b19      	ldr	r3, [pc, #100]	; (800150c <HAL_RCC_OscConfig+0x338>)
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	091b      	lsrs	r3, r3, #4
 80014ac:	210f      	movs	r1, #15
 80014ae:	400b      	ands	r3, r1
 80014b0:	491a      	ldr	r1, [pc, #104]	; (800151c <HAL_RCC_OscConfig+0x348>)
 80014b2:	5ccb      	ldrb	r3, [r1, r3]
 80014b4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <HAL_RCC_OscConfig+0x34c>)
 80014b8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80014ba:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <HAL_RCC_OscConfig+0x350>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2513      	movs	r5, #19
 80014c0:	197c      	adds	r4, r7, r5
 80014c2:	0018      	movs	r0, r3
 80014c4:	f7ff fabe 	bl	8000a44 <HAL_InitTick>
 80014c8:	0003      	movs	r3, r0
 80014ca:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80014cc:	197b      	adds	r3, r7, r5
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d060      	beq.n	8001596 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80014d4:	197b      	adds	r3, r7, r5
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	e1f2      	b.n	80018c0 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d03f      	beq.n	8001562 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <HAL_RCC_OscConfig+0x338>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <HAL_RCC_OscConfig+0x338>)
 80014e8:	2180      	movs	r1, #128	; 0x80
 80014ea:	0049      	lsls	r1, r1, #1
 80014ec:	430a      	orrs	r2, r1
 80014ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f0:	f7ff faee 	bl	8000ad0 <HAL_GetTick>
 80014f4:	0003      	movs	r3, r0
 80014f6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80014f8:	e018      	b.n	800152c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014fa:	f7ff fae9 	bl	8000ad0 <HAL_GetTick>
 80014fe:	0002      	movs	r2, r0
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d911      	bls.n	800152c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e1d9      	b.n	80018c0 <HAL_RCC_OscConfig+0x6ec>
 800150c:	40021000 	.word	0x40021000
 8001510:	fffeffff 	.word	0xfffeffff
 8001514:	fffbffff 	.word	0xfffbffff
 8001518:	ffffe0ff 	.word	0xffffe0ff
 800151c:	080029d4 	.word	0x080029d4
 8001520:	20000000 	.word	0x20000000
 8001524:	20000004 	.word	0x20000004
 8001528:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800152c:	4bc9      	ldr	r3, [pc, #804]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4013      	ands	r3, r2
 8001536:	d0e0      	beq.n	80014fa <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001538:	4bc6      	ldr	r3, [pc, #792]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	4ac6      	ldr	r2, [pc, #792]	; (8001858 <HAL_RCC_OscConfig+0x684>)
 800153e:	4013      	ands	r3, r2
 8001540:	0019      	movs	r1, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a1a      	ldr	r2, [r3, #32]
 8001546:	4bc3      	ldr	r3, [pc, #780]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 8001548:	430a      	orrs	r2, r1
 800154a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800154c:	4bc1      	ldr	r3, [pc, #772]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	0a19      	lsrs	r1, r3, #8
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	061a      	lsls	r2, r3, #24
 800155a:	4bbe      	ldr	r3, [pc, #760]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 800155c:	430a      	orrs	r2, r1
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	e019      	b.n	8001596 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001562:	4bbc      	ldr	r3, [pc, #752]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4bbb      	ldr	r3, [pc, #748]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 8001568:	49bc      	ldr	r1, [pc, #752]	; (800185c <HAL_RCC_OscConfig+0x688>)
 800156a:	400a      	ands	r2, r1
 800156c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156e:	f7ff faaf 	bl	8000ad0 <HAL_GetTick>
 8001572:	0003      	movs	r3, r0
 8001574:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001578:	f7ff faaa 	bl	8000ad0 <HAL_GetTick>
 800157c:	0002      	movs	r2, r0
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e19a      	b.n	80018c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800158a:	4bb2      	ldr	r3, [pc, #712]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	2380      	movs	r3, #128	; 0x80
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4013      	ands	r3, r2
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2208      	movs	r2, #8
 800159c:	4013      	ands	r3, r2
 800159e:	d036      	beq.n	800160e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d019      	beq.n	80015dc <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a8:	4baa      	ldr	r3, [pc, #680]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 80015aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015ac:	4ba9      	ldr	r3, [pc, #676]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 80015ae:	2101      	movs	r1, #1
 80015b0:	430a      	orrs	r2, r1
 80015b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b4:	f7ff fa8c 	bl	8000ad0 <HAL_GetTick>
 80015b8:	0003      	movs	r3, r0
 80015ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015be:	f7ff fa87 	bl	8000ad0 <HAL_GetTick>
 80015c2:	0002      	movs	r2, r0
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e177      	b.n	80018c0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015d0:	4ba0      	ldr	r3, [pc, #640]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 80015d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015d4:	2202      	movs	r2, #2
 80015d6:	4013      	ands	r3, r2
 80015d8:	d0f1      	beq.n	80015be <HAL_RCC_OscConfig+0x3ea>
 80015da:	e018      	b.n	800160e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015dc:	4b9d      	ldr	r3, [pc, #628]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 80015de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015e0:	4b9c      	ldr	r3, [pc, #624]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 80015e2:	2101      	movs	r1, #1
 80015e4:	438a      	bics	r2, r1
 80015e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e8:	f7ff fa72 	bl	8000ad0 <HAL_GetTick>
 80015ec:	0003      	movs	r3, r0
 80015ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f2:	f7ff fa6d 	bl	8000ad0 <HAL_GetTick>
 80015f6:	0002      	movs	r2, r0
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e15d      	b.n	80018c0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001604:	4b93      	ldr	r3, [pc, #588]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 8001606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001608:	2202      	movs	r2, #2
 800160a:	4013      	ands	r3, r2
 800160c:	d1f1      	bne.n	80015f2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2204      	movs	r2, #4
 8001614:	4013      	ands	r3, r2
 8001616:	d100      	bne.n	800161a <HAL_RCC_OscConfig+0x446>
 8001618:	e0ae      	b.n	8001778 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161a:	2023      	movs	r0, #35	; 0x23
 800161c:	183b      	adds	r3, r7, r0
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001622:	4b8c      	ldr	r3, [pc, #560]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 8001624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	055b      	lsls	r3, r3, #21
 800162a:	4013      	ands	r3, r2
 800162c:	d109      	bne.n	8001642 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	4b89      	ldr	r3, [pc, #548]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 8001630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001632:	4b88      	ldr	r3, [pc, #544]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 8001634:	2180      	movs	r1, #128	; 0x80
 8001636:	0549      	lsls	r1, r1, #21
 8001638:	430a      	orrs	r2, r1
 800163a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800163c:	183b      	adds	r3, r7, r0
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001642:	4b87      	ldr	r3, [pc, #540]	; (8001860 <HAL_RCC_OscConfig+0x68c>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4013      	ands	r3, r2
 800164c:	d11a      	bne.n	8001684 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800164e:	4b84      	ldr	r3, [pc, #528]	; (8001860 <HAL_RCC_OscConfig+0x68c>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b83      	ldr	r3, [pc, #524]	; (8001860 <HAL_RCC_OscConfig+0x68c>)
 8001654:	2180      	movs	r1, #128	; 0x80
 8001656:	0049      	lsls	r1, r1, #1
 8001658:	430a      	orrs	r2, r1
 800165a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800165c:	f7ff fa38 	bl	8000ad0 <HAL_GetTick>
 8001660:	0003      	movs	r3, r0
 8001662:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001666:	f7ff fa33 	bl	8000ad0 <HAL_GetTick>
 800166a:	0002      	movs	r2, r0
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b64      	cmp	r3, #100	; 0x64
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e123      	b.n	80018c0 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001678:	4b79      	ldr	r3, [pc, #484]	; (8001860 <HAL_RCC_OscConfig+0x68c>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4013      	ands	r3, r2
 8001682:	d0f0      	beq.n	8001666 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	429a      	cmp	r2, r3
 800168e:	d107      	bne.n	80016a0 <HAL_RCC_OscConfig+0x4cc>
 8001690:	4b70      	ldr	r3, [pc, #448]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 8001692:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001694:	4b6f      	ldr	r3, [pc, #444]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 8001696:	2180      	movs	r1, #128	; 0x80
 8001698:	0049      	lsls	r1, r1, #1
 800169a:	430a      	orrs	r2, r1
 800169c:	651a      	str	r2, [r3, #80]	; 0x50
 800169e:	e031      	b.n	8001704 <HAL_RCC_OscConfig+0x530>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10c      	bne.n	80016c2 <HAL_RCC_OscConfig+0x4ee>
 80016a8:	4b6a      	ldr	r3, [pc, #424]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 80016aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016ac:	4b69      	ldr	r3, [pc, #420]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 80016ae:	496b      	ldr	r1, [pc, #428]	; (800185c <HAL_RCC_OscConfig+0x688>)
 80016b0:	400a      	ands	r2, r1
 80016b2:	651a      	str	r2, [r3, #80]	; 0x50
 80016b4:	4b67      	ldr	r3, [pc, #412]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 80016b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016b8:	4b66      	ldr	r3, [pc, #408]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 80016ba:	496a      	ldr	r1, [pc, #424]	; (8001864 <HAL_RCC_OscConfig+0x690>)
 80016bc:	400a      	ands	r2, r1
 80016be:	651a      	str	r2, [r3, #80]	; 0x50
 80016c0:	e020      	b.n	8001704 <HAL_RCC_OscConfig+0x530>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	23a0      	movs	r3, #160	; 0xa0
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d10e      	bne.n	80016ec <HAL_RCC_OscConfig+0x518>
 80016ce:	4b61      	ldr	r3, [pc, #388]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 80016d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016d2:	4b60      	ldr	r3, [pc, #384]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 80016d4:	2180      	movs	r1, #128	; 0x80
 80016d6:	00c9      	lsls	r1, r1, #3
 80016d8:	430a      	orrs	r2, r1
 80016da:	651a      	str	r2, [r3, #80]	; 0x50
 80016dc:	4b5d      	ldr	r3, [pc, #372]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 80016de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016e0:	4b5c      	ldr	r3, [pc, #368]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 80016e2:	2180      	movs	r1, #128	; 0x80
 80016e4:	0049      	lsls	r1, r1, #1
 80016e6:	430a      	orrs	r2, r1
 80016e8:	651a      	str	r2, [r3, #80]	; 0x50
 80016ea:	e00b      	b.n	8001704 <HAL_RCC_OscConfig+0x530>
 80016ec:	4b59      	ldr	r3, [pc, #356]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 80016ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016f0:	4b58      	ldr	r3, [pc, #352]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 80016f2:	495a      	ldr	r1, [pc, #360]	; (800185c <HAL_RCC_OscConfig+0x688>)
 80016f4:	400a      	ands	r2, r1
 80016f6:	651a      	str	r2, [r3, #80]	; 0x50
 80016f8:	4b56      	ldr	r3, [pc, #344]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 80016fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016fc:	4b55      	ldr	r3, [pc, #340]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 80016fe:	4959      	ldr	r1, [pc, #356]	; (8001864 <HAL_RCC_OscConfig+0x690>)
 8001700:	400a      	ands	r2, r1
 8001702:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d015      	beq.n	8001738 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170c:	f7ff f9e0 	bl	8000ad0 <HAL_GetTick>
 8001710:	0003      	movs	r3, r0
 8001712:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001714:	e009      	b.n	800172a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001716:	f7ff f9db 	bl	8000ad0 <HAL_GetTick>
 800171a:	0002      	movs	r2, r0
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	4a51      	ldr	r2, [pc, #324]	; (8001868 <HAL_RCC_OscConfig+0x694>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e0ca      	b.n	80018c0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800172a:	4b4a      	ldr	r3, [pc, #296]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 800172c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4013      	ands	r3, r2
 8001734:	d0ef      	beq.n	8001716 <HAL_RCC_OscConfig+0x542>
 8001736:	e014      	b.n	8001762 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001738:	f7ff f9ca 	bl	8000ad0 <HAL_GetTick>
 800173c:	0003      	movs	r3, r0
 800173e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001740:	e009      	b.n	8001756 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001742:	f7ff f9c5 	bl	8000ad0 <HAL_GetTick>
 8001746:	0002      	movs	r2, r0
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	4a46      	ldr	r2, [pc, #280]	; (8001868 <HAL_RCC_OscConfig+0x694>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e0b4      	b.n	80018c0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001756:	4b3f      	ldr	r3, [pc, #252]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 8001758:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4013      	ands	r3, r2
 8001760:	d1ef      	bne.n	8001742 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001762:	2323      	movs	r3, #35	; 0x23
 8001764:	18fb      	adds	r3, r7, r3
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d105      	bne.n	8001778 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800176c:	4b39      	ldr	r3, [pc, #228]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 800176e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001770:	4b38      	ldr	r3, [pc, #224]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 8001772:	493e      	ldr	r1, [pc, #248]	; (800186c <HAL_RCC_OscConfig+0x698>)
 8001774:	400a      	ands	r2, r1
 8001776:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177c:	2b00      	cmp	r3, #0
 800177e:	d100      	bne.n	8001782 <HAL_RCC_OscConfig+0x5ae>
 8001780:	e09d      	b.n	80018be <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	2b0c      	cmp	r3, #12
 8001786:	d100      	bne.n	800178a <HAL_RCC_OscConfig+0x5b6>
 8001788:	e076      	b.n	8001878 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	2b02      	cmp	r3, #2
 8001790:	d145      	bne.n	800181e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001792:	4b30      	ldr	r3, [pc, #192]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	4b2f      	ldr	r3, [pc, #188]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 8001798:	4935      	ldr	r1, [pc, #212]	; (8001870 <HAL_RCC_OscConfig+0x69c>)
 800179a:	400a      	ands	r2, r1
 800179c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179e:	f7ff f997 	bl	8000ad0 <HAL_GetTick>
 80017a2:	0003      	movs	r3, r0
 80017a4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a8:	f7ff f992 	bl	8000ad0 <HAL_GetTick>
 80017ac:	0002      	movs	r2, r0
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e082      	b.n	80018c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017ba:	4b26      	ldr	r3, [pc, #152]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	049b      	lsls	r3, r3, #18
 80017c2:	4013      	ands	r3, r2
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017c6:	4b23      	ldr	r3, [pc, #140]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	4a2a      	ldr	r2, [pc, #168]	; (8001874 <HAL_RCC_OscConfig+0x6a0>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	0019      	movs	r1, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d8:	431a      	orrs	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	431a      	orrs	r2, r3
 80017e0:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 80017e2:	430a      	orrs	r2, r1
 80017e4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017e6:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 80017ec:	2180      	movs	r1, #128	; 0x80
 80017ee:	0449      	lsls	r1, r1, #17
 80017f0:	430a      	orrs	r2, r1
 80017f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7ff f96c 	bl	8000ad0 <HAL_GetTick>
 80017f8:	0003      	movs	r3, r0
 80017fa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fe:	f7ff f967 	bl	8000ad0 <HAL_GetTick>
 8001802:	0002      	movs	r2, r0
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e057      	b.n	80018c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001810:	4b10      	ldr	r3, [pc, #64]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	049b      	lsls	r3, r3, #18
 8001818:	4013      	ands	r3, r2
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0x62a>
 800181c:	e04f      	b.n	80018be <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800181e:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 8001824:	4912      	ldr	r1, [pc, #72]	; (8001870 <HAL_RCC_OscConfig+0x69c>)
 8001826:	400a      	ands	r2, r1
 8001828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff f951 	bl	8000ad0 <HAL_GetTick>
 800182e:	0003      	movs	r3, r0
 8001830:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001834:	f7ff f94c 	bl	8000ad0 <HAL_GetTick>
 8001838:	0002      	movs	r2, r0
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e03c      	b.n	80018c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001846:	4b03      	ldr	r3, [pc, #12]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	049b      	lsls	r3, r3, #18
 800184e:	4013      	ands	r3, r2
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x660>
 8001852:	e034      	b.n	80018be <HAL_RCC_OscConfig+0x6ea>
 8001854:	40021000 	.word	0x40021000
 8001858:	ffff1fff 	.word	0xffff1fff
 800185c:	fffffeff 	.word	0xfffffeff
 8001860:	40007000 	.word	0x40007000
 8001864:	fffffbff 	.word	0xfffffbff
 8001868:	00001388 	.word	0x00001388
 800186c:	efffffff 	.word	0xefffffff
 8001870:	feffffff 	.word	0xfeffffff
 8001874:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	2b01      	cmp	r3, #1
 800187e:	d101      	bne.n	8001884 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e01d      	b.n	80018c0 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001884:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <HAL_RCC_OscConfig+0x6f4>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	025b      	lsls	r3, r3, #9
 8001890:	401a      	ands	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001896:	429a      	cmp	r2, r3
 8001898:	d10f      	bne.n	80018ba <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	23f0      	movs	r3, #240	; 0xf0
 800189e:	039b      	lsls	r3, r3, #14
 80018a0:	401a      	ands	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d107      	bne.n	80018ba <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	23c0      	movs	r3, #192	; 0xc0
 80018ae:	041b      	lsls	r3, r3, #16
 80018b0:	401a      	ands	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d001      	beq.n	80018be <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	0018      	movs	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	b00a      	add	sp, #40	; 0x28
 80018c6:	bdb0      	pop	{r4, r5, r7, pc}
 80018c8:	40021000 	.word	0x40021000

080018cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018cc:	b5b0      	push	{r4, r5, r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e128      	b.n	8001b32 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018e0:	4b96      	ldr	r3, [pc, #600]	; (8001b3c <HAL_RCC_ClockConfig+0x270>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2201      	movs	r2, #1
 80018e6:	4013      	ands	r3, r2
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d91e      	bls.n	800192c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ee:	4b93      	ldr	r3, [pc, #588]	; (8001b3c <HAL_RCC_ClockConfig+0x270>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2201      	movs	r2, #1
 80018f4:	4393      	bics	r3, r2
 80018f6:	0019      	movs	r1, r3
 80018f8:	4b90      	ldr	r3, [pc, #576]	; (8001b3c <HAL_RCC_ClockConfig+0x270>)
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	430a      	orrs	r2, r1
 80018fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001900:	f7ff f8e6 	bl	8000ad0 <HAL_GetTick>
 8001904:	0003      	movs	r3, r0
 8001906:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001908:	e009      	b.n	800191e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190a:	f7ff f8e1 	bl	8000ad0 <HAL_GetTick>
 800190e:	0002      	movs	r2, r0
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	4a8a      	ldr	r2, [pc, #552]	; (8001b40 <HAL_RCC_ClockConfig+0x274>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d901      	bls.n	800191e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e109      	b.n	8001b32 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800191e:	4b87      	ldr	r3, [pc, #540]	; (8001b3c <HAL_RCC_ClockConfig+0x270>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2201      	movs	r2, #1
 8001924:	4013      	ands	r3, r2
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d1ee      	bne.n	800190a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2202      	movs	r2, #2
 8001932:	4013      	ands	r3, r2
 8001934:	d009      	beq.n	800194a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001936:	4b83      	ldr	r3, [pc, #524]	; (8001b44 <HAL_RCC_ClockConfig+0x278>)
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	22f0      	movs	r2, #240	; 0xf0
 800193c:	4393      	bics	r3, r2
 800193e:	0019      	movs	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	4b7f      	ldr	r3, [pc, #508]	; (8001b44 <HAL_RCC_ClockConfig+0x278>)
 8001946:	430a      	orrs	r2, r1
 8001948:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2201      	movs	r2, #1
 8001950:	4013      	ands	r3, r2
 8001952:	d100      	bne.n	8001956 <HAL_RCC_ClockConfig+0x8a>
 8001954:	e089      	b.n	8001a6a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d107      	bne.n	800196e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800195e:	4b79      	ldr	r3, [pc, #484]	; (8001b44 <HAL_RCC_ClockConfig+0x278>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	029b      	lsls	r3, r3, #10
 8001966:	4013      	ands	r3, r2
 8001968:	d120      	bne.n	80019ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e0e1      	b.n	8001b32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b03      	cmp	r3, #3
 8001974:	d107      	bne.n	8001986 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001976:	4b73      	ldr	r3, [pc, #460]	; (8001b44 <HAL_RCC_ClockConfig+0x278>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	049b      	lsls	r3, r3, #18
 800197e:	4013      	ands	r3, r2
 8001980:	d114      	bne.n	80019ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e0d5      	b.n	8001b32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d106      	bne.n	800199c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800198e:	4b6d      	ldr	r3, [pc, #436]	; (8001b44 <HAL_RCC_ClockConfig+0x278>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2204      	movs	r2, #4
 8001994:	4013      	ands	r3, r2
 8001996:	d109      	bne.n	80019ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0ca      	b.n	8001b32 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800199c:	4b69      	ldr	r3, [pc, #420]	; (8001b44 <HAL_RCC_ClockConfig+0x278>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4013      	ands	r3, r2
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0c2      	b.n	8001b32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ac:	4b65      	ldr	r3, [pc, #404]	; (8001b44 <HAL_RCC_ClockConfig+0x278>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	2203      	movs	r2, #3
 80019b2:	4393      	bics	r3, r2
 80019b4:	0019      	movs	r1, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	4b62      	ldr	r3, [pc, #392]	; (8001b44 <HAL_RCC_ClockConfig+0x278>)
 80019bc:	430a      	orrs	r2, r1
 80019be:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019c0:	f7ff f886 	bl	8000ad0 <HAL_GetTick>
 80019c4:	0003      	movs	r3, r0
 80019c6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d111      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019d0:	e009      	b.n	80019e6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d2:	f7ff f87d 	bl	8000ad0 <HAL_GetTick>
 80019d6:	0002      	movs	r2, r0
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	4a58      	ldr	r2, [pc, #352]	; (8001b40 <HAL_RCC_ClockConfig+0x274>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e0a5      	b.n	8001b32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019e6:	4b57      	ldr	r3, [pc, #348]	; (8001b44 <HAL_RCC_ClockConfig+0x278>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	220c      	movs	r2, #12
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d1ef      	bne.n	80019d2 <HAL_RCC_ClockConfig+0x106>
 80019f2:	e03a      	b.n	8001a6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d111      	bne.n	8001a20 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019fc:	e009      	b.n	8001a12 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fe:	f7ff f867 	bl	8000ad0 <HAL_GetTick>
 8001a02:	0002      	movs	r2, r0
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	4a4d      	ldr	r2, [pc, #308]	; (8001b40 <HAL_RCC_ClockConfig+0x274>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e08f      	b.n	8001b32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a12:	4b4c      	ldr	r3, [pc, #304]	; (8001b44 <HAL_RCC_ClockConfig+0x278>)
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	220c      	movs	r2, #12
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2b0c      	cmp	r3, #12
 8001a1c:	d1ef      	bne.n	80019fe <HAL_RCC_ClockConfig+0x132>
 8001a1e:	e024      	b.n	8001a6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d11b      	bne.n	8001a60 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a28:	e009      	b.n	8001a3e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2a:	f7ff f851 	bl	8000ad0 <HAL_GetTick>
 8001a2e:	0002      	movs	r2, r0
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	4a42      	ldr	r2, [pc, #264]	; (8001b40 <HAL_RCC_ClockConfig+0x274>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e079      	b.n	8001b32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a3e:	4b41      	ldr	r3, [pc, #260]	; (8001b44 <HAL_RCC_ClockConfig+0x278>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	220c      	movs	r2, #12
 8001a44:	4013      	ands	r3, r2
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d1ef      	bne.n	8001a2a <HAL_RCC_ClockConfig+0x15e>
 8001a4a:	e00e      	b.n	8001a6a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4c:	f7ff f840 	bl	8000ad0 <HAL_GetTick>
 8001a50:	0002      	movs	r2, r0
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	4a3a      	ldr	r2, [pc, #232]	; (8001b40 <HAL_RCC_ClockConfig+0x274>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e068      	b.n	8001b32 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a60:	4b38      	ldr	r3, [pc, #224]	; (8001b44 <HAL_RCC_ClockConfig+0x278>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	220c      	movs	r2, #12
 8001a66:	4013      	ands	r3, r2
 8001a68:	d1f0      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a6a:	4b34      	ldr	r3, [pc, #208]	; (8001b3c <HAL_RCC_ClockConfig+0x270>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	4013      	ands	r3, r2
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d21e      	bcs.n	8001ab6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a78:	4b30      	ldr	r3, [pc, #192]	; (8001b3c <HAL_RCC_ClockConfig+0x270>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	4393      	bics	r3, r2
 8001a80:	0019      	movs	r1, r3
 8001a82:	4b2e      	ldr	r3, [pc, #184]	; (8001b3c <HAL_RCC_ClockConfig+0x270>)
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a8a:	f7ff f821 	bl	8000ad0 <HAL_GetTick>
 8001a8e:	0003      	movs	r3, r0
 8001a90:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a92:	e009      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a94:	f7ff f81c 	bl	8000ad0 <HAL_GetTick>
 8001a98:	0002      	movs	r2, r0
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	4a28      	ldr	r2, [pc, #160]	; (8001b40 <HAL_RCC_ClockConfig+0x274>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e044      	b.n	8001b32 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa8:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <HAL_RCC_ClockConfig+0x270>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2201      	movs	r2, #1
 8001aae:	4013      	ands	r3, r2
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d1ee      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2204      	movs	r2, #4
 8001abc:	4013      	ands	r3, r2
 8001abe:	d009      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac0:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <HAL_RCC_ClockConfig+0x278>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	4a20      	ldr	r2, [pc, #128]	; (8001b48 <HAL_RCC_ClockConfig+0x27c>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	0019      	movs	r1, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <HAL_RCC_ClockConfig+0x278>)
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2208      	movs	r2, #8
 8001ada:	4013      	ands	r3, r2
 8001adc:	d00a      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ade:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <HAL_RCC_ClockConfig+0x278>)
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	4a1a      	ldr	r2, [pc, #104]	; (8001b4c <HAL_RCC_ClockConfig+0x280>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	0019      	movs	r1, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	00da      	lsls	r2, r3, #3
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <HAL_RCC_ClockConfig+0x278>)
 8001af0:	430a      	orrs	r2, r1
 8001af2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001af4:	f000 f832 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8001af8:	0001      	movs	r1, r0
 8001afa:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_RCC_ClockConfig+0x278>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	091b      	lsrs	r3, r3, #4
 8001b00:	220f      	movs	r2, #15
 8001b02:	4013      	ands	r3, r2
 8001b04:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <HAL_RCC_ClockConfig+0x284>)
 8001b06:	5cd3      	ldrb	r3, [r2, r3]
 8001b08:	000a      	movs	r2, r1
 8001b0a:	40da      	lsrs	r2, r3
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_RCC_ClockConfig+0x288>)
 8001b0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_RCC_ClockConfig+0x28c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	250b      	movs	r5, #11
 8001b16:	197c      	adds	r4, r7, r5
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f7fe ff93 	bl	8000a44 <HAL_InitTick>
 8001b1e:	0003      	movs	r3, r0
 8001b20:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001b22:	197b      	adds	r3, r7, r5
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001b2a:	197b      	adds	r3, r7, r5
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	e000      	b.n	8001b32 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	0018      	movs	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	b004      	add	sp, #16
 8001b38:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	40022000 	.word	0x40022000
 8001b40:	00001388 	.word	0x00001388
 8001b44:	40021000 	.word	0x40021000
 8001b48:	fffff8ff 	.word	0xfffff8ff
 8001b4c:	ffffc7ff 	.word	0xffffc7ff
 8001b50:	080029d4 	.word	0x080029d4
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20000004 	.word	0x20000004

08001b5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b5c:	b5b0      	push	{r4, r5, r7, lr}
 8001b5e:	b08e      	sub	sp, #56	; 0x38
 8001b60:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001b62:	4b4c      	ldr	r3, [pc, #304]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b6a:	230c      	movs	r3, #12
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	2b0c      	cmp	r3, #12
 8001b70:	d014      	beq.n	8001b9c <HAL_RCC_GetSysClockFreq+0x40>
 8001b72:	d900      	bls.n	8001b76 <HAL_RCC_GetSysClockFreq+0x1a>
 8001b74:	e07b      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0x112>
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d002      	beq.n	8001b80 <HAL_RCC_GetSysClockFreq+0x24>
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d00b      	beq.n	8001b96 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b7e:	e076      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b80:	4b44      	ldr	r3, [pc, #272]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2210      	movs	r2, #16
 8001b86:	4013      	ands	r3, r2
 8001b88:	d002      	beq.n	8001b90 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001b8a:	4b43      	ldr	r3, [pc, #268]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b8c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001b8e:	e07c      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001b90:	4b42      	ldr	r3, [pc, #264]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x140>)
 8001b92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b94:	e079      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b96:	4b42      	ldr	r3, [pc, #264]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001b98:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b9a:	e076      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9e:	0c9a      	lsrs	r2, r3, #18
 8001ba0:	230f      	movs	r3, #15
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	4b3f      	ldr	r3, [pc, #252]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x148>)
 8001ba6:	5c9b      	ldrb	r3, [r3, r2]
 8001ba8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bac:	0d9a      	lsrs	r2, r3, #22
 8001bae:	2303      	movs	r3, #3
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bb6:	4b37      	ldr	r3, [pc, #220]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	025b      	lsls	r3, r3, #9
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d01a      	beq.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc4:	61bb      	str	r3, [r7, #24]
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	4a35      	ldr	r2, [pc, #212]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001bcc:	2300      	movs	r3, #0
 8001bce:	69b8      	ldr	r0, [r7, #24]
 8001bd0:	69f9      	ldr	r1, [r7, #28]
 8001bd2:	f7fe fb45 	bl	8000260 <__aeabi_lmul>
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	000b      	movs	r3, r1
 8001bda:	0010      	movs	r0, r2
 8001bdc:	0019      	movs	r1, r3
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f7fe fb19 	bl	8000220 <__aeabi_uldivmod>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	000b      	movs	r3, r1
 8001bf2:	0013      	movs	r3, r2
 8001bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8001bf6:	e037      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001bf8:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2210      	movs	r2, #16
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d01a      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	4a23      	ldr	r2, [pc, #140]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	68b8      	ldr	r0, [r7, #8]
 8001c10:	68f9      	ldr	r1, [r7, #12]
 8001c12:	f7fe fb25 	bl	8000260 <__aeabi_lmul>
 8001c16:	0002      	movs	r2, r0
 8001c18:	000b      	movs	r3, r1
 8001c1a:	0010      	movs	r0, r2
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	603b      	str	r3, [r7, #0]
 8001c22:	2300      	movs	r3, #0
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f7fe faf9 	bl	8000220 <__aeabi_uldivmod>
 8001c2e:	0002      	movs	r2, r0
 8001c30:	000b      	movs	r3, r1
 8001c32:	0013      	movs	r3, r2
 8001c34:	637b      	str	r3, [r7, #52]	; 0x34
 8001c36:	e017      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	0019      	movs	r1, r3
 8001c40:	4a16      	ldr	r2, [pc, #88]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x140>)
 8001c42:	2300      	movs	r3, #0
 8001c44:	f7fe fb0c 	bl	8000260 <__aeabi_lmul>
 8001c48:	0002      	movs	r2, r0
 8001c4a:	000b      	movs	r3, r1
 8001c4c:	0010      	movs	r0, r2
 8001c4e:	0019      	movs	r1, r3
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	001c      	movs	r4, r3
 8001c54:	2300      	movs	r3, #0
 8001c56:	001d      	movs	r5, r3
 8001c58:	0022      	movs	r2, r4
 8001c5a:	002b      	movs	r3, r5
 8001c5c:	f7fe fae0 	bl	8000220 <__aeabi_uldivmod>
 8001c60:	0002      	movs	r2, r0
 8001c62:	000b      	movs	r3, r1
 8001c64:	0013      	movs	r3, r2
 8001c66:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c6c:	e00d      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	0b5b      	lsrs	r3, r3, #13
 8001c74:	2207      	movs	r2, #7
 8001c76:	4013      	ands	r3, r2
 8001c78:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	2280      	movs	r2, #128	; 0x80
 8001c80:	0212      	lsls	r2, r2, #8
 8001c82:	409a      	lsls	r2, r3
 8001c84:	0013      	movs	r3, r2
 8001c86:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c88:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	b00e      	add	sp, #56	; 0x38
 8001c92:	bdb0      	pop	{r4, r5, r7, pc}
 8001c94:	40021000 	.word	0x40021000
 8001c98:	003d0900 	.word	0x003d0900
 8001c9c:	00f42400 	.word	0x00f42400
 8001ca0:	007a1200 	.word	0x007a1200
 8001ca4:	080029ec 	.word	0x080029ec

08001ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cac:	4b02      	ldr	r3, [pc, #8]	; (8001cb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	20000000 	.word	0x20000000

08001cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cc0:	f7ff fff2 	bl	8001ca8 <HAL_RCC_GetHCLKFreq>
 8001cc4:	0001      	movs	r1, r0
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	0a1b      	lsrs	r3, r3, #8
 8001ccc:	2207      	movs	r2, #7
 8001cce:	4013      	ands	r3, r2
 8001cd0:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cd2:	5cd3      	ldrb	r3, [r2, r3]
 8001cd4:	40d9      	lsrs	r1, r3
 8001cd6:	000b      	movs	r3, r1
}
 8001cd8:	0018      	movs	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	080029e4 	.word	0x080029e4

08001ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cec:	f7ff ffdc 	bl	8001ca8 <HAL_RCC_GetHCLKFreq>
 8001cf0:	0001      	movs	r1, r0
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	0adb      	lsrs	r3, r3, #11
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cfe:	5cd3      	ldrb	r3, [r2, r3]
 8001d00:	40d9      	lsrs	r1, r3
 8001d02:	000b      	movs	r3, r1
}
 8001d04:	0018      	movs	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	080029e4 	.word	0x080029e4

08001d14 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001d1c:	2017      	movs	r0, #23
 8001d1e:	183b      	adds	r3, r7, r0
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2220      	movs	r2, #32
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d100      	bne.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001d2e:	e0c7      	b.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d30:	4b84      	ldr	r3, [pc, #528]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	055b      	lsls	r3, r3, #21
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d109      	bne.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d3c:	4b81      	ldr	r3, [pc, #516]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d40:	4b80      	ldr	r3, [pc, #512]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d42:	2180      	movs	r1, #128	; 0x80
 8001d44:	0549      	lsls	r1, r1, #21
 8001d46:	430a      	orrs	r2, r1
 8001d48:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001d4a:	183b      	adds	r3, r7, r0
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d50:	4b7d      	ldr	r3, [pc, #500]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d11a      	bne.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d5c:	4b7a      	ldr	r3, [pc, #488]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b79      	ldr	r3, [pc, #484]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001d62:	2180      	movs	r1, #128	; 0x80
 8001d64:	0049      	lsls	r1, r1, #1
 8001d66:	430a      	orrs	r2, r1
 8001d68:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6a:	f7fe feb1 	bl	8000ad0 <HAL_GetTick>
 8001d6e:	0003      	movs	r3, r0
 8001d70:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d72:	e008      	b.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d74:	f7fe feac 	bl	8000ad0 <HAL_GetTick>
 8001d78:	0002      	movs	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b64      	cmp	r3, #100	; 0x64
 8001d80:	d901      	bls.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e0d9      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d86:	4b70      	ldr	r3, [pc, #448]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001d92:	4b6c      	ldr	r3, [pc, #432]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	23c0      	movs	r3, #192	; 0xc0
 8001d98:	039b      	lsls	r3, r3, #14
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	23c0      	movs	r3, #192	; 0xc0
 8001da4:	039b      	lsls	r3, r3, #14
 8001da6:	4013      	ands	r3, r2
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d013      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	23c0      	movs	r3, #192	; 0xc0
 8001db4:	029b      	lsls	r3, r3, #10
 8001db6:	401a      	ands	r2, r3
 8001db8:	23c0      	movs	r3, #192	; 0xc0
 8001dba:	029b      	lsls	r3, r3, #10
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d10a      	bne.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001dc0:	4b60      	ldr	r3, [pc, #384]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	029b      	lsls	r3, r3, #10
 8001dc8:	401a      	ands	r2, r3
 8001dca:	2380      	movs	r3, #128	; 0x80
 8001dcc:	029b      	lsls	r3, r3, #10
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e0b1      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001dd6:	4b5b      	ldr	r3, [pc, #364]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001dd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dda:	23c0      	movs	r3, #192	; 0xc0
 8001ddc:	029b      	lsls	r3, r3, #10
 8001dde:	4013      	ands	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d03b      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	23c0      	movs	r3, #192	; 0xc0
 8001dee:	029b      	lsls	r3, r3, #10
 8001df0:	4013      	ands	r3, r2
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d033      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d02e      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001e02:	4b50      	ldr	r3, [pc, #320]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e06:	4a51      	ldr	r2, [pc, #324]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e0c:	4b4d      	ldr	r3, [pc, #308]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e10:	4b4c      	ldr	r3, [pc, #304]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e12:	2180      	movs	r1, #128	; 0x80
 8001e14:	0309      	lsls	r1, r1, #12
 8001e16:	430a      	orrs	r2, r1
 8001e18:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e1a:	4b4a      	ldr	r3, [pc, #296]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e1e:	4b49      	ldr	r3, [pc, #292]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e20:	494b      	ldr	r1, [pc, #300]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001e22:	400a      	ands	r2, r1
 8001e24:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001e26:	4b47      	ldr	r3, [pc, #284]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4013      	ands	r3, r2
 8001e34:	d014      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e36:	f7fe fe4b 	bl	8000ad0 <HAL_GetTick>
 8001e3a:	0003      	movs	r3, r0
 8001e3c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e3e:	e009      	b.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e40:	f7fe fe46 	bl	8000ad0 <HAL_GetTick>
 8001e44:	0002      	movs	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	4a42      	ldr	r2, [pc, #264]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e072      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e54:	4b3b      	ldr	r3, [pc, #236]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d0ef      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2220      	movs	r2, #32
 8001e66:	4013      	ands	r3, r2
 8001e68:	d01f      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	23c0      	movs	r3, #192	; 0xc0
 8001e70:	029b      	lsls	r3, r3, #10
 8001e72:	401a      	ands	r2, r3
 8001e74:	23c0      	movs	r3, #192	; 0xc0
 8001e76:	029b      	lsls	r3, r3, #10
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d10c      	bne.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8001e7c:	4b31      	ldr	r3, [pc, #196]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a35      	ldr	r2, [pc, #212]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	0019      	movs	r1, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	23c0      	movs	r3, #192	; 0xc0
 8001e8c:	039b      	lsls	r3, r3, #14
 8001e8e:	401a      	ands	r2, r3
 8001e90:	4b2c      	ldr	r3, [pc, #176]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e92:	430a      	orrs	r2, r1
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	4b2b      	ldr	r3, [pc, #172]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e98:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	23c0      	movs	r3, #192	; 0xc0
 8001ea0:	029b      	lsls	r3, r3, #10
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001eaa:	2317      	movs	r3, #23
 8001eac:	18fb      	adds	r3, r7, r3
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d105      	bne.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb4:	4b23      	ldr	r3, [pc, #140]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001eb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eb8:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001eba:	4928      	ldr	r1, [pc, #160]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ebc:	400a      	ands	r2, r1
 8001ebe:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d009      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001eca:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ece:	220c      	movs	r2, #12
 8001ed0:	4393      	bics	r3, r2
 8001ed2:	0019      	movs	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001eda:	430a      	orrs	r2, r1
 8001edc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2204      	movs	r2, #4
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d009      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ee8:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eec:	4a1c      	ldr	r2, [pc, #112]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	0019      	movs	r1, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2208      	movs	r2, #8
 8001f02:	4013      	ands	r3, r2
 8001f04:	d009      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f06:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0a:	4a16      	ldr	r2, [pc, #88]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	0019      	movs	r1, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f16:	430a      	orrs	r2, r1
 8001f18:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2280      	movs	r2, #128	; 0x80
 8001f20:	4013      	ands	r3, r2
 8001f22:	d009      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001f24:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f28:	4a0f      	ldr	r2, [pc, #60]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	0019      	movs	r1, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695a      	ldr	r2, [r3, #20]
 8001f32:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f34:	430a      	orrs	r2, r1
 8001f36:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	b006      	add	sp, #24
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40007000 	.word	0x40007000
 8001f4c:	fffcffff 	.word	0xfffcffff
 8001f50:	fff7ffff 	.word	0xfff7ffff
 8001f54:	00001388 	.word	0x00001388
 8001f58:	ffcfffff 	.word	0xffcfffff
 8001f5c:	efffffff 	.word	0xefffffff
 8001f60:	fffff3ff 	.word	0xfffff3ff
 8001f64:	ffffcfff 	.word	0xffffcfff
 8001f68:	fff3ffff 	.word	0xfff3ffff

08001f6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e044      	b.n	8002008 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d107      	bne.n	8001f96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2278      	movs	r2, #120	; 0x78
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	0018      	movs	r0, r3
 8001f92:	f7fe fc7d 	bl	8000890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2224      	movs	r2, #36	; 0x24
 8001f9a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	438a      	bics	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f000 f830 	bl	8002014 <UART_SetConfig>
 8001fb4:	0003      	movs	r3, r0
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d101      	bne.n	8001fbe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e024      	b.n	8002008 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f000 fa6d 	bl	80024a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	490d      	ldr	r1, [pc, #52]	; (8002010 <HAL_UART_Init+0xa4>)
 8001fda:	400a      	ands	r2, r1
 8001fdc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	212a      	movs	r1, #42	; 0x2a
 8001fea:	438a      	bics	r2, r1
 8001fec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	0018      	movs	r0, r3
 8002002:	f000 fb05 	bl	8002610 <UART_CheckIdleState>
 8002006:	0003      	movs	r3, r0
}
 8002008:	0018      	movs	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	b002      	add	sp, #8
 800200e:	bd80      	pop	{r7, pc}
 8002010:	ffffb7ff 	.word	0xffffb7ff

08002014 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002014:	b5b0      	push	{r4, r5, r7, lr}
 8002016:	b08e      	sub	sp, #56	; 0x38
 8002018:	af00      	add	r7, sp, #0
 800201a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800201c:	231a      	movs	r3, #26
 800201e:	2218      	movs	r2, #24
 8002020:	189b      	adds	r3, r3, r2
 8002022:	19db      	adds	r3, r3, r7
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	431a      	orrs	r2, r3
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	431a      	orrs	r2, r3
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	4313      	orrs	r3, r2
 800203e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4ab4      	ldr	r2, [pc, #720]	; (8002318 <UART_SetConfig+0x304>)
 8002048:	4013      	ands	r3, r2
 800204a:	0019      	movs	r1, r3
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002052:	430a      	orrs	r2, r1
 8002054:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	4aaf      	ldr	r2, [pc, #700]	; (800231c <UART_SetConfig+0x308>)
 800205e:	4013      	ands	r3, r2
 8002060:	0019      	movs	r1, r3
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4aa9      	ldr	r2, [pc, #676]	; (8002320 <UART_SetConfig+0x30c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d004      	beq.n	8002088 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002084:	4313      	orrs	r3, r2
 8002086:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	4aa5      	ldr	r2, [pc, #660]	; (8002324 <UART_SetConfig+0x310>)
 8002090:	4013      	ands	r3, r2
 8002092:	0019      	movs	r1, r3
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800209a:	430a      	orrs	r2, r1
 800209c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4aa1      	ldr	r2, [pc, #644]	; (8002328 <UART_SetConfig+0x314>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d131      	bne.n	800210c <UART_SetConfig+0xf8>
 80020a8:	4ba0      	ldr	r3, [pc, #640]	; (800232c <UART_SetConfig+0x318>)
 80020aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ac:	220c      	movs	r2, #12
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b0c      	cmp	r3, #12
 80020b2:	d01d      	beq.n	80020f0 <UART_SetConfig+0xdc>
 80020b4:	d823      	bhi.n	80020fe <UART_SetConfig+0xea>
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d00c      	beq.n	80020d4 <UART_SetConfig+0xc0>
 80020ba:	d820      	bhi.n	80020fe <UART_SetConfig+0xea>
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d002      	beq.n	80020c6 <UART_SetConfig+0xb2>
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d00e      	beq.n	80020e2 <UART_SetConfig+0xce>
 80020c4:	e01b      	b.n	80020fe <UART_SetConfig+0xea>
 80020c6:	231b      	movs	r3, #27
 80020c8:	2218      	movs	r2, #24
 80020ca:	189b      	adds	r3, r3, r2
 80020cc:	19db      	adds	r3, r3, r7
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]
 80020d2:	e065      	b.n	80021a0 <UART_SetConfig+0x18c>
 80020d4:	231b      	movs	r3, #27
 80020d6:	2218      	movs	r2, #24
 80020d8:	189b      	adds	r3, r3, r2
 80020da:	19db      	adds	r3, r3, r7
 80020dc:	2202      	movs	r2, #2
 80020de:	701a      	strb	r2, [r3, #0]
 80020e0:	e05e      	b.n	80021a0 <UART_SetConfig+0x18c>
 80020e2:	231b      	movs	r3, #27
 80020e4:	2218      	movs	r2, #24
 80020e6:	189b      	adds	r3, r3, r2
 80020e8:	19db      	adds	r3, r3, r7
 80020ea:	2204      	movs	r2, #4
 80020ec:	701a      	strb	r2, [r3, #0]
 80020ee:	e057      	b.n	80021a0 <UART_SetConfig+0x18c>
 80020f0:	231b      	movs	r3, #27
 80020f2:	2218      	movs	r2, #24
 80020f4:	189b      	adds	r3, r3, r2
 80020f6:	19db      	adds	r3, r3, r7
 80020f8:	2208      	movs	r2, #8
 80020fa:	701a      	strb	r2, [r3, #0]
 80020fc:	e050      	b.n	80021a0 <UART_SetConfig+0x18c>
 80020fe:	231b      	movs	r3, #27
 8002100:	2218      	movs	r2, #24
 8002102:	189b      	adds	r3, r3, r2
 8002104:	19db      	adds	r3, r3, r7
 8002106:	2210      	movs	r2, #16
 8002108:	701a      	strb	r2, [r3, #0]
 800210a:	e049      	b.n	80021a0 <UART_SetConfig+0x18c>
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a83      	ldr	r2, [pc, #524]	; (8002320 <UART_SetConfig+0x30c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d13e      	bne.n	8002194 <UART_SetConfig+0x180>
 8002116:	4b85      	ldr	r3, [pc, #532]	; (800232c <UART_SetConfig+0x318>)
 8002118:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800211a:	23c0      	movs	r3, #192	; 0xc0
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	4013      	ands	r3, r2
 8002120:	22c0      	movs	r2, #192	; 0xc0
 8002122:	0112      	lsls	r2, r2, #4
 8002124:	4293      	cmp	r3, r2
 8002126:	d027      	beq.n	8002178 <UART_SetConfig+0x164>
 8002128:	22c0      	movs	r2, #192	; 0xc0
 800212a:	0112      	lsls	r2, r2, #4
 800212c:	4293      	cmp	r3, r2
 800212e:	d82a      	bhi.n	8002186 <UART_SetConfig+0x172>
 8002130:	2280      	movs	r2, #128	; 0x80
 8002132:	0112      	lsls	r2, r2, #4
 8002134:	4293      	cmp	r3, r2
 8002136:	d011      	beq.n	800215c <UART_SetConfig+0x148>
 8002138:	2280      	movs	r2, #128	; 0x80
 800213a:	0112      	lsls	r2, r2, #4
 800213c:	4293      	cmp	r3, r2
 800213e:	d822      	bhi.n	8002186 <UART_SetConfig+0x172>
 8002140:	2b00      	cmp	r3, #0
 8002142:	d004      	beq.n	800214e <UART_SetConfig+0x13a>
 8002144:	2280      	movs	r2, #128	; 0x80
 8002146:	00d2      	lsls	r2, r2, #3
 8002148:	4293      	cmp	r3, r2
 800214a:	d00e      	beq.n	800216a <UART_SetConfig+0x156>
 800214c:	e01b      	b.n	8002186 <UART_SetConfig+0x172>
 800214e:	231b      	movs	r3, #27
 8002150:	2218      	movs	r2, #24
 8002152:	189b      	adds	r3, r3, r2
 8002154:	19db      	adds	r3, r3, r7
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
 800215a:	e021      	b.n	80021a0 <UART_SetConfig+0x18c>
 800215c:	231b      	movs	r3, #27
 800215e:	2218      	movs	r2, #24
 8002160:	189b      	adds	r3, r3, r2
 8002162:	19db      	adds	r3, r3, r7
 8002164:	2202      	movs	r2, #2
 8002166:	701a      	strb	r2, [r3, #0]
 8002168:	e01a      	b.n	80021a0 <UART_SetConfig+0x18c>
 800216a:	231b      	movs	r3, #27
 800216c:	2218      	movs	r2, #24
 800216e:	189b      	adds	r3, r3, r2
 8002170:	19db      	adds	r3, r3, r7
 8002172:	2204      	movs	r2, #4
 8002174:	701a      	strb	r2, [r3, #0]
 8002176:	e013      	b.n	80021a0 <UART_SetConfig+0x18c>
 8002178:	231b      	movs	r3, #27
 800217a:	2218      	movs	r2, #24
 800217c:	189b      	adds	r3, r3, r2
 800217e:	19db      	adds	r3, r3, r7
 8002180:	2208      	movs	r2, #8
 8002182:	701a      	strb	r2, [r3, #0]
 8002184:	e00c      	b.n	80021a0 <UART_SetConfig+0x18c>
 8002186:	231b      	movs	r3, #27
 8002188:	2218      	movs	r2, #24
 800218a:	189b      	adds	r3, r3, r2
 800218c:	19db      	adds	r3, r3, r7
 800218e:	2210      	movs	r2, #16
 8002190:	701a      	strb	r2, [r3, #0]
 8002192:	e005      	b.n	80021a0 <UART_SetConfig+0x18c>
 8002194:	231b      	movs	r3, #27
 8002196:	2218      	movs	r2, #24
 8002198:	189b      	adds	r3, r3, r2
 800219a:	19db      	adds	r3, r3, r7
 800219c:	2210      	movs	r2, #16
 800219e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a5e      	ldr	r2, [pc, #376]	; (8002320 <UART_SetConfig+0x30c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d000      	beq.n	80021ac <UART_SetConfig+0x198>
 80021aa:	e084      	b.n	80022b6 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80021ac:	231b      	movs	r3, #27
 80021ae:	2218      	movs	r2, #24
 80021b0:	189b      	adds	r3, r3, r2
 80021b2:	19db      	adds	r3, r3, r7
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d01d      	beq.n	80021f6 <UART_SetConfig+0x1e2>
 80021ba:	dc20      	bgt.n	80021fe <UART_SetConfig+0x1ea>
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d015      	beq.n	80021ec <UART_SetConfig+0x1d8>
 80021c0:	dc1d      	bgt.n	80021fe <UART_SetConfig+0x1ea>
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <UART_SetConfig+0x1b8>
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d005      	beq.n	80021d6 <UART_SetConfig+0x1c2>
 80021ca:	e018      	b.n	80021fe <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80021cc:	f7ff fd76 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 80021d0:	0003      	movs	r3, r0
 80021d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80021d4:	e01c      	b.n	8002210 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021d6:	4b55      	ldr	r3, [pc, #340]	; (800232c <UART_SetConfig+0x318>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2210      	movs	r2, #16
 80021dc:	4013      	ands	r3, r2
 80021de:	d002      	beq.n	80021e6 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80021e0:	4b53      	ldr	r3, [pc, #332]	; (8002330 <UART_SetConfig+0x31c>)
 80021e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80021e4:	e014      	b.n	8002210 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 80021e6:	4b53      	ldr	r3, [pc, #332]	; (8002334 <UART_SetConfig+0x320>)
 80021e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80021ea:	e011      	b.n	8002210 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021ec:	f7ff fcb6 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 80021f0:	0003      	movs	r3, r0
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80021f4:	e00c      	b.n	8002210 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80021f6:	2380      	movs	r3, #128	; 0x80
 80021f8:	021b      	lsls	r3, r3, #8
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80021fc:	e008      	b.n	8002210 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002202:	231a      	movs	r3, #26
 8002204:	2218      	movs	r2, #24
 8002206:	189b      	adds	r3, r3, r2
 8002208:	19db      	adds	r3, r3, r7
 800220a:	2201      	movs	r2, #1
 800220c:	701a      	strb	r2, [r3, #0]
        break;
 800220e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002212:	2b00      	cmp	r3, #0
 8002214:	d100      	bne.n	8002218 <UART_SetConfig+0x204>
 8002216:	e12f      	b.n	8002478 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	0013      	movs	r3, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	189b      	adds	r3, r3, r2
 8002222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002224:	429a      	cmp	r2, r3
 8002226:	d305      	bcc.n	8002234 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800222e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002230:	429a      	cmp	r2, r3
 8002232:	d906      	bls.n	8002242 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8002234:	231a      	movs	r3, #26
 8002236:	2218      	movs	r2, #24
 8002238:	189b      	adds	r3, r3, r2
 800223a:	19db      	adds	r3, r3, r7
 800223c:	2201      	movs	r2, #1
 800223e:	701a      	strb	r2, [r3, #0]
 8002240:	e11a      	b.n	8002478 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	6939      	ldr	r1, [r7, #16]
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	000b      	movs	r3, r1
 8002250:	0e1b      	lsrs	r3, r3, #24
 8002252:	0010      	movs	r0, r2
 8002254:	0205      	lsls	r5, r0, #8
 8002256:	431d      	orrs	r5, r3
 8002258:	000b      	movs	r3, r1
 800225a:	021c      	lsls	r4, r3, #8
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	085b      	lsrs	r3, r3, #1
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	2300      	movs	r3, #0
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68b8      	ldr	r0, [r7, #8]
 800226a:	68f9      	ldr	r1, [r7, #12]
 800226c:	1900      	adds	r0, r0, r4
 800226e:	4169      	adcs	r1, r5
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	603b      	str	r3, [r7, #0]
 8002276:	2300      	movs	r3, #0
 8002278:	607b      	str	r3, [r7, #4]
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f7fd ffcf 	bl	8000220 <__aeabi_uldivmod>
 8002282:	0002      	movs	r2, r0
 8002284:	000b      	movs	r3, r1
 8002286:	0013      	movs	r3, r2
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800228a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800228c:	23c0      	movs	r3, #192	; 0xc0
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	429a      	cmp	r2, r3
 8002292:	d309      	bcc.n	80022a8 <UART_SetConfig+0x294>
 8002294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002296:	2380      	movs	r3, #128	; 0x80
 8002298:	035b      	lsls	r3, r3, #13
 800229a:	429a      	cmp	r2, r3
 800229c:	d204      	bcs.n	80022a8 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	e0e7      	b.n	8002478 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 80022a8:	231a      	movs	r3, #26
 80022aa:	2218      	movs	r2, #24
 80022ac:	189b      	adds	r3, r3, r2
 80022ae:	19db      	adds	r3, r3, r7
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
 80022b4:	e0e0      	b.n	8002478 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	69da      	ldr	r2, [r3, #28]
 80022ba:	2380      	movs	r3, #128	; 0x80
 80022bc:	021b      	lsls	r3, r3, #8
 80022be:	429a      	cmp	r2, r3
 80022c0:	d000      	beq.n	80022c4 <UART_SetConfig+0x2b0>
 80022c2:	e082      	b.n	80023ca <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 80022c4:	231b      	movs	r3, #27
 80022c6:	2218      	movs	r2, #24
 80022c8:	189b      	adds	r3, r3, r2
 80022ca:	19db      	adds	r3, r3, r7
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d834      	bhi.n	800233c <UART_SetConfig+0x328>
 80022d2:	009a      	lsls	r2, r3, #2
 80022d4:	4b18      	ldr	r3, [pc, #96]	; (8002338 <UART_SetConfig+0x324>)
 80022d6:	18d3      	adds	r3, r2, r3
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022dc:	f7ff fcee 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 80022e0:	0003      	movs	r3, r0
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022e4:	e033      	b.n	800234e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80022e6:	f7ff fcff 	bl	8001ce8 <HAL_RCC_GetPCLK2Freq>
 80022ea:	0003      	movs	r3, r0
 80022ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022ee:	e02e      	b.n	800234e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022f0:	4b0e      	ldr	r3, [pc, #56]	; (800232c <UART_SetConfig+0x318>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2210      	movs	r2, #16
 80022f6:	4013      	ands	r3, r2
 80022f8:	d002      	beq.n	8002300 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80022fa:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <UART_SetConfig+0x31c>)
 80022fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80022fe:	e026      	b.n	800234e <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <UART_SetConfig+0x320>)
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002304:	e023      	b.n	800234e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002306:	f7ff fc29 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 800230a:	0003      	movs	r3, r0
 800230c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800230e:	e01e      	b.n	800234e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002310:	2380      	movs	r3, #128	; 0x80
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002316:	e01a      	b.n	800234e <UART_SetConfig+0x33a>
 8002318:	efff69f3 	.word	0xefff69f3
 800231c:	ffffcfff 	.word	0xffffcfff
 8002320:	40004800 	.word	0x40004800
 8002324:	fffff4ff 	.word	0xfffff4ff
 8002328:	40004400 	.word	0x40004400
 800232c:	40021000 	.word	0x40021000
 8002330:	003d0900 	.word	0x003d0900
 8002334:	00f42400 	.word	0x00f42400
 8002338:	080029f8 	.word	0x080029f8
      default:
        pclk = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002340:	231a      	movs	r3, #26
 8002342:	2218      	movs	r2, #24
 8002344:	189b      	adds	r3, r3, r2
 8002346:	19db      	adds	r3, r3, r7
 8002348:	2201      	movs	r2, #1
 800234a:	701a      	strb	r2, [r3, #0]
        break;
 800234c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800234e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002350:	2b00      	cmp	r3, #0
 8002352:	d100      	bne.n	8002356 <UART_SetConfig+0x342>
 8002354:	e090      	b.n	8002478 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002358:	005a      	lsls	r2, r3, #1
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	085b      	lsrs	r3, r3, #1
 8002360:	18d2      	adds	r2, r2, r3
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	0019      	movs	r1, r3
 8002368:	0010      	movs	r0, r2
 800236a:	f7fd fecd 	bl	8000108 <__udivsi3>
 800236e:	0003      	movs	r3, r0
 8002370:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002374:	2b0f      	cmp	r3, #15
 8002376:	d921      	bls.n	80023bc <UART_SetConfig+0x3a8>
 8002378:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	025b      	lsls	r3, r3, #9
 800237e:	429a      	cmp	r2, r3
 8002380:	d21c      	bcs.n	80023bc <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002384:	b29a      	uxth	r2, r3
 8002386:	200e      	movs	r0, #14
 8002388:	2418      	movs	r4, #24
 800238a:	1903      	adds	r3, r0, r4
 800238c:	19db      	adds	r3, r3, r7
 800238e:	210f      	movs	r1, #15
 8002390:	438a      	bics	r2, r1
 8002392:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002396:	085b      	lsrs	r3, r3, #1
 8002398:	b29b      	uxth	r3, r3
 800239a:	2207      	movs	r2, #7
 800239c:	4013      	ands	r3, r2
 800239e:	b299      	uxth	r1, r3
 80023a0:	1903      	adds	r3, r0, r4
 80023a2:	19db      	adds	r3, r3, r7
 80023a4:	1902      	adds	r2, r0, r4
 80023a6:	19d2      	adds	r2, r2, r7
 80023a8:	8812      	ldrh	r2, [r2, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	1902      	adds	r2, r0, r4
 80023b4:	19d2      	adds	r2, r2, r7
 80023b6:	8812      	ldrh	r2, [r2, #0]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	e05d      	b.n	8002478 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80023bc:	231a      	movs	r3, #26
 80023be:	2218      	movs	r2, #24
 80023c0:	189b      	adds	r3, r3, r2
 80023c2:	19db      	adds	r3, r3, r7
 80023c4:	2201      	movs	r2, #1
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	e056      	b.n	8002478 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 80023ca:	231b      	movs	r3, #27
 80023cc:	2218      	movs	r2, #24
 80023ce:	189b      	adds	r3, r3, r2
 80023d0:	19db      	adds	r3, r3, r7
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d822      	bhi.n	800241e <UART_SetConfig+0x40a>
 80023d8:	009a      	lsls	r2, r3, #2
 80023da:	4b2f      	ldr	r3, [pc, #188]	; (8002498 <UART_SetConfig+0x484>)
 80023dc:	18d3      	adds	r3, r2, r3
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023e2:	f7ff fc6b 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 80023e6:	0003      	movs	r3, r0
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023ea:	e021      	b.n	8002430 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80023ec:	f7ff fc7c 	bl	8001ce8 <HAL_RCC_GetPCLK2Freq>
 80023f0:	0003      	movs	r3, r0
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023f4:	e01c      	b.n	8002430 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023f6:	4b29      	ldr	r3, [pc, #164]	; (800249c <UART_SetConfig+0x488>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2210      	movs	r2, #16
 80023fc:	4013      	ands	r3, r2
 80023fe:	d002      	beq.n	8002406 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002400:	4b27      	ldr	r3, [pc, #156]	; (80024a0 <UART_SetConfig+0x48c>)
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002404:	e014      	b.n	8002430 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8002406:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <UART_SetConfig+0x490>)
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800240a:	e011      	b.n	8002430 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800240c:	f7ff fba6 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8002410:	0003      	movs	r3, r0
 8002412:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002414:	e00c      	b.n	8002430 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	021b      	lsls	r3, r3, #8
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800241c:	e008      	b.n	8002430 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002422:	231a      	movs	r3, #26
 8002424:	2218      	movs	r2, #24
 8002426:	189b      	adds	r3, r3, r2
 8002428:	19db      	adds	r3, r3, r7
 800242a:	2201      	movs	r2, #1
 800242c:	701a      	strb	r2, [r3, #0]
        break;
 800242e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002432:	2b00      	cmp	r3, #0
 8002434:	d020      	beq.n	8002478 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	085a      	lsrs	r2, r3, #1
 800243c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243e:	18d2      	adds	r2, r2, r3
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	0019      	movs	r1, r3
 8002446:	0010      	movs	r0, r2
 8002448:	f7fd fe5e 	bl	8000108 <__udivsi3>
 800244c:	0003      	movs	r3, r0
 800244e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002452:	2b0f      	cmp	r3, #15
 8002454:	d90a      	bls.n	800246c <UART_SetConfig+0x458>
 8002456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	025b      	lsls	r3, r3, #9
 800245c:	429a      	cmp	r2, r3
 800245e:	d205      	bcs.n	800246c <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002462:	b29a      	uxth	r2, r3
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	e005      	b.n	8002478 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 800246c:	231a      	movs	r3, #26
 800246e:	2218      	movs	r2, #24
 8002470:	189b      	adds	r3, r3, r2
 8002472:	19db      	adds	r3, r3, r7
 8002474:	2201      	movs	r2, #1
 8002476:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	2200      	movs	r2, #0
 800247c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	2200      	movs	r2, #0
 8002482:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002484:	231a      	movs	r3, #26
 8002486:	2218      	movs	r2, #24
 8002488:	189b      	adds	r3, r3, r2
 800248a:	19db      	adds	r3, r3, r7
 800248c:	781b      	ldrb	r3, [r3, #0]
}
 800248e:	0018      	movs	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	b00e      	add	sp, #56	; 0x38
 8002494:	bdb0      	pop	{r4, r5, r7, pc}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	08002a1c 	.word	0x08002a1c
 800249c:	40021000 	.word	0x40021000
 80024a0:	003d0900 	.word	0x003d0900
 80024a4:	00f42400 	.word	0x00f42400

080024a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	2201      	movs	r2, #1
 80024b6:	4013      	ands	r3, r2
 80024b8:	d00b      	beq.n	80024d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	4a4a      	ldr	r2, [pc, #296]	; (80025ec <UART_AdvFeatureConfig+0x144>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	0019      	movs	r1, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	2202      	movs	r2, #2
 80024d8:	4013      	ands	r3, r2
 80024da:	d00b      	beq.n	80024f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4a43      	ldr	r2, [pc, #268]	; (80025f0 <UART_AdvFeatureConfig+0x148>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	0019      	movs	r1, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	2204      	movs	r2, #4
 80024fa:	4013      	ands	r3, r2
 80024fc:	d00b      	beq.n	8002516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	4a3b      	ldr	r2, [pc, #236]	; (80025f4 <UART_AdvFeatureConfig+0x14c>)
 8002506:	4013      	ands	r3, r2
 8002508:	0019      	movs	r1, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	2208      	movs	r2, #8
 800251c:	4013      	ands	r3, r2
 800251e:	d00b      	beq.n	8002538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	4a34      	ldr	r2, [pc, #208]	; (80025f8 <UART_AdvFeatureConfig+0x150>)
 8002528:	4013      	ands	r3, r2
 800252a:	0019      	movs	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	2210      	movs	r2, #16
 800253e:	4013      	ands	r3, r2
 8002540:	d00b      	beq.n	800255a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	4a2c      	ldr	r2, [pc, #176]	; (80025fc <UART_AdvFeatureConfig+0x154>)
 800254a:	4013      	ands	r3, r2
 800254c:	0019      	movs	r1, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	2220      	movs	r2, #32
 8002560:	4013      	ands	r3, r2
 8002562:	d00b      	beq.n	800257c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	4a25      	ldr	r2, [pc, #148]	; (8002600 <UART_AdvFeatureConfig+0x158>)
 800256c:	4013      	ands	r3, r2
 800256e:	0019      	movs	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	2240      	movs	r2, #64	; 0x40
 8002582:	4013      	ands	r3, r2
 8002584:	d01d      	beq.n	80025c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4a1d      	ldr	r2, [pc, #116]	; (8002604 <UART_AdvFeatureConfig+0x15c>)
 800258e:	4013      	ands	r3, r2
 8002590:	0019      	movs	r1, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	035b      	lsls	r3, r3, #13
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d10b      	bne.n	80025c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	4a15      	ldr	r2, [pc, #84]	; (8002608 <UART_AdvFeatureConfig+0x160>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	0019      	movs	r1, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	2280      	movs	r2, #128	; 0x80
 80025c8:	4013      	ands	r3, r2
 80025ca:	d00b      	beq.n	80025e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	4a0e      	ldr	r2, [pc, #56]	; (800260c <UART_AdvFeatureConfig+0x164>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	0019      	movs	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	605a      	str	r2, [r3, #4]
  }
}
 80025e4:	46c0      	nop			; (mov r8, r8)
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b002      	add	sp, #8
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	fffdffff 	.word	0xfffdffff
 80025f0:	fffeffff 	.word	0xfffeffff
 80025f4:	fffbffff 	.word	0xfffbffff
 80025f8:	ffff7fff 	.word	0xffff7fff
 80025fc:	ffffefff 	.word	0xffffefff
 8002600:	ffffdfff 	.word	0xffffdfff
 8002604:	ffefffff 	.word	0xffefffff
 8002608:	ff9fffff 	.word	0xff9fffff
 800260c:	fff7ffff 	.word	0xfff7ffff

08002610 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b092      	sub	sp, #72	; 0x48
 8002614:	af02      	add	r7, sp, #8
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2284      	movs	r2, #132	; 0x84
 800261c:	2100      	movs	r1, #0
 800261e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002620:	f7fe fa56 	bl	8000ad0 <HAL_GetTick>
 8002624:	0003      	movs	r3, r0
 8002626:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2208      	movs	r2, #8
 8002630:	4013      	ands	r3, r2
 8002632:	2b08      	cmp	r3, #8
 8002634:	d12c      	bne.n	8002690 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002638:	2280      	movs	r2, #128	; 0x80
 800263a:	0391      	lsls	r1, r2, #14
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	4a46      	ldr	r2, [pc, #280]	; (8002758 <UART_CheckIdleState+0x148>)
 8002640:	9200      	str	r2, [sp, #0]
 8002642:	2200      	movs	r2, #0
 8002644:	f000 f88c 	bl	8002760 <UART_WaitOnFlagUntilTimeout>
 8002648:	1e03      	subs	r3, r0, #0
 800264a:	d021      	beq.n	8002690 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800264c:	f3ef 8310 	mrs	r3, PRIMASK
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002654:	63bb      	str	r3, [r7, #56]	; 0x38
 8002656:	2301      	movs	r3, #1
 8002658:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265c:	f383 8810 	msr	PRIMASK, r3
}
 8002660:	46c0      	nop			; (mov r8, r8)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2180      	movs	r1, #128	; 0x80
 800266e:	438a      	bics	r2, r1
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002678:	f383 8810 	msr	PRIMASK, r3
}
 800267c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2220      	movs	r2, #32
 8002682:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2278      	movs	r2, #120	; 0x78
 8002688:	2100      	movs	r1, #0
 800268a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e05f      	b.n	8002750 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2204      	movs	r2, #4
 8002698:	4013      	ands	r3, r2
 800269a:	2b04      	cmp	r3, #4
 800269c:	d146      	bne.n	800272c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800269e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026a0:	2280      	movs	r2, #128	; 0x80
 80026a2:	03d1      	lsls	r1, r2, #15
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	4a2c      	ldr	r2, [pc, #176]	; (8002758 <UART_CheckIdleState+0x148>)
 80026a8:	9200      	str	r2, [sp, #0]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f000 f858 	bl	8002760 <UART_WaitOnFlagUntilTimeout>
 80026b0:	1e03      	subs	r3, r0, #0
 80026b2:	d03b      	beq.n	800272c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026b4:	f3ef 8310 	mrs	r3, PRIMASK
 80026b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80026ba:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026bc:	637b      	str	r3, [r7, #52]	; 0x34
 80026be:	2301      	movs	r3, #1
 80026c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	f383 8810 	msr	PRIMASK, r3
}
 80026c8:	46c0      	nop			; (mov r8, r8)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4921      	ldr	r1, [pc, #132]	; (800275c <UART_CheckIdleState+0x14c>)
 80026d6:	400a      	ands	r2, r1
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f383 8810 	msr	PRIMASK, r3
}
 80026e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026e6:	f3ef 8310 	mrs	r3, PRIMASK
 80026ea:	61bb      	str	r3, [r7, #24]
  return(result);
 80026ec:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ee:	633b      	str	r3, [r7, #48]	; 0x30
 80026f0:	2301      	movs	r3, #1
 80026f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f383 8810 	msr	PRIMASK, r3
}
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2101      	movs	r1, #1
 8002708:	438a      	bics	r2, r1
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	f383 8810 	msr	PRIMASK, r3
}
 8002716:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2280      	movs	r2, #128	; 0x80
 800271c:	2120      	movs	r1, #32
 800271e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2278      	movs	r2, #120	; 0x78
 8002724:	2100      	movs	r1, #0
 8002726:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e011      	b.n	8002750 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2220      	movs	r2, #32
 8002730:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2280      	movs	r2, #128	; 0x80
 8002736:	2120      	movs	r1, #32
 8002738:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2278      	movs	r2, #120	; 0x78
 800274a:	2100      	movs	r1, #0
 800274c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	0018      	movs	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	b010      	add	sp, #64	; 0x40
 8002756:	bd80      	pop	{r7, pc}
 8002758:	01ffffff 	.word	0x01ffffff
 800275c:	fffffedf 	.word	0xfffffedf

08002760 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	1dfb      	adds	r3, r7, #7
 800276e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002770:	e04b      	b.n	800280a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	3301      	adds	r3, #1
 8002776:	d048      	beq.n	800280a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002778:	f7fe f9aa 	bl	8000ad0 <HAL_GetTick>
 800277c:	0002      	movs	r2, r0
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	429a      	cmp	r2, r3
 8002786:	d302      	bcc.n	800278e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e04b      	b.n	800282a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2204      	movs	r2, #4
 800279a:	4013      	ands	r3, r2
 800279c:	d035      	beq.n	800280a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	2208      	movs	r2, #8
 80027a6:	4013      	ands	r3, r2
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d111      	bne.n	80027d0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2208      	movs	r2, #8
 80027b2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	0018      	movs	r0, r3
 80027b8:	f000 f83c 	bl	8002834 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2284      	movs	r2, #132	; 0x84
 80027c0:	2108      	movs	r1, #8
 80027c2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2278      	movs	r2, #120	; 0x78
 80027c8:	2100      	movs	r1, #0
 80027ca:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e02c      	b.n	800282a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	69da      	ldr	r2, [r3, #28]
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	401a      	ands	r2, r3
 80027dc:	2380      	movs	r3, #128	; 0x80
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d112      	bne.n	800280a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2280      	movs	r2, #128	; 0x80
 80027ea:	0112      	lsls	r2, r2, #4
 80027ec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	0018      	movs	r0, r3
 80027f2:	f000 f81f 	bl	8002834 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2284      	movs	r2, #132	; 0x84
 80027fa:	2120      	movs	r1, #32
 80027fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2278      	movs	r2, #120	; 0x78
 8002802:	2100      	movs	r1, #0
 8002804:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e00f      	b.n	800282a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	4013      	ands	r3, r2
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	425a      	negs	r2, r3
 800281a:	4153      	adcs	r3, r2
 800281c:	b2db      	uxtb	r3, r3
 800281e:	001a      	movs	r2, r3
 8002820:	1dfb      	adds	r3, r7, #7
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d0a4      	beq.n	8002772 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	0018      	movs	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	b004      	add	sp, #16
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08e      	sub	sp, #56	; 0x38
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800283c:	f3ef 8310 	mrs	r3, PRIMASK
 8002840:	617b      	str	r3, [r7, #20]
  return(result);
 8002842:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002844:	637b      	str	r3, [r7, #52]	; 0x34
 8002846:	2301      	movs	r3, #1
 8002848:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	f383 8810 	msr	PRIMASK, r3
}
 8002850:	46c0      	nop			; (mov r8, r8)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4926      	ldr	r1, [pc, #152]	; (80028f8 <UART_EndRxTransfer+0xc4>)
 800285e:	400a      	ands	r2, r1
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002864:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	f383 8810 	msr	PRIMASK, r3
}
 800286c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800286e:	f3ef 8310 	mrs	r3, PRIMASK
 8002872:	623b      	str	r3, [r7, #32]
  return(result);
 8002874:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002876:	633b      	str	r3, [r7, #48]	; 0x30
 8002878:	2301      	movs	r3, #1
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	f383 8810 	msr	PRIMASK, r3
}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2101      	movs	r1, #1
 8002890:	438a      	bics	r2, r1
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002896:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289a:	f383 8810 	msr	PRIMASK, r3
}
 800289e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d118      	bne.n	80028da <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028a8:	f3ef 8310 	mrs	r3, PRIMASK
 80028ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80028ae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b2:	2301      	movs	r3, #1
 80028b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f383 8810 	msr	PRIMASK, r3
}
 80028bc:	46c0      	nop			; (mov r8, r8)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2110      	movs	r1, #16
 80028ca:	438a      	bics	r2, r1
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f383 8810 	msr	PRIMASK, r3
}
 80028d8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2280      	movs	r2, #128	; 0x80
 80028de:	2120      	movs	r1, #32
 80028e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	669a      	str	r2, [r3, #104]	; 0x68
}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b00e      	add	sp, #56	; 0x38
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	fffffedf 	.word	0xfffffedf

080028fc <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e017      	b.n	800293e <HAL_WWDG_Init+0x42>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	0018      	movs	r0, r3
 8002912:	f7fe f801 	bl	8000918 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2180      	movs	r1, #128	; 0x80
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	431a      	orrs	r2, r3
 800292e:	0011      	movs	r1, r2
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	0018      	movs	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	b002      	add	sp, #8
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	68d2      	ldr	r2, [r2, #12]
 8002956:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	0018      	movs	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	b002      	add	sp, #8
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <__libc_init_array>:
 8002964:	b570      	push	{r4, r5, r6, lr}
 8002966:	2600      	movs	r6, #0
 8002968:	4d0c      	ldr	r5, [pc, #48]	; (800299c <__libc_init_array+0x38>)
 800296a:	4c0d      	ldr	r4, [pc, #52]	; (80029a0 <__libc_init_array+0x3c>)
 800296c:	1b64      	subs	r4, r4, r5
 800296e:	10a4      	asrs	r4, r4, #2
 8002970:	42a6      	cmp	r6, r4
 8002972:	d109      	bne.n	8002988 <__libc_init_array+0x24>
 8002974:	2600      	movs	r6, #0
 8002976:	f000 f821 	bl	80029bc <_init>
 800297a:	4d0a      	ldr	r5, [pc, #40]	; (80029a4 <__libc_init_array+0x40>)
 800297c:	4c0a      	ldr	r4, [pc, #40]	; (80029a8 <__libc_init_array+0x44>)
 800297e:	1b64      	subs	r4, r4, r5
 8002980:	10a4      	asrs	r4, r4, #2
 8002982:	42a6      	cmp	r6, r4
 8002984:	d105      	bne.n	8002992 <__libc_init_array+0x2e>
 8002986:	bd70      	pop	{r4, r5, r6, pc}
 8002988:	00b3      	lsls	r3, r6, #2
 800298a:	58eb      	ldr	r3, [r5, r3]
 800298c:	4798      	blx	r3
 800298e:	3601      	adds	r6, #1
 8002990:	e7ee      	b.n	8002970 <__libc_init_array+0xc>
 8002992:	00b3      	lsls	r3, r6, #2
 8002994:	58eb      	ldr	r3, [r5, r3]
 8002996:	4798      	blx	r3
 8002998:	3601      	adds	r6, #1
 800299a:	e7f2      	b.n	8002982 <__libc_init_array+0x1e>
 800299c:	08002a48 	.word	0x08002a48
 80029a0:	08002a48 	.word	0x08002a48
 80029a4:	08002a48 	.word	0x08002a48
 80029a8:	08002a4c 	.word	0x08002a4c

080029ac <memset>:
 80029ac:	0003      	movs	r3, r0
 80029ae:	1882      	adds	r2, r0, r2
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d100      	bne.n	80029b6 <memset+0xa>
 80029b4:	4770      	bx	lr
 80029b6:	7019      	strb	r1, [r3, #0]
 80029b8:	3301      	adds	r3, #1
 80029ba:	e7f9      	b.n	80029b0 <memset+0x4>

080029bc <_init>:
 80029bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029c2:	bc08      	pop	{r3}
 80029c4:	469e      	mov	lr, r3
 80029c6:	4770      	bx	lr

080029c8 <_fini>:
 80029c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ce:	bc08      	pop	{r3}
 80029d0:	469e      	mov	lr, r3
 80029d2:	4770      	bx	lr
