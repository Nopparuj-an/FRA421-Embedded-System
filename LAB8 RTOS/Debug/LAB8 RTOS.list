
LAB8 RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a30  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08004af0  08004af0  00014af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c2c  08004c2c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004c2c  08004c2c  00014c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c34  08004c34  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c34  08004c34  00014c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c38  08004c38  00014c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004c3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019f4  20000010  08004c4c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a04  08004c4c  00021a04  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103e7  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025cf  00000000  00000000  0003041f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  000329f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  00033798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002544  00000000  00000000  00034458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4bb  00000000  00000000  0003699c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006dcc8  00000000  00000000  00045e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b3b1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003088  00000000  00000000  000b3b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004ad8 	.word	0x08004ad8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004ad8 	.word	0x08004ad8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004ac:	f000 fa2a 	bl	8000904 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004b0:	f000 f836 	bl	8000520 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004b4:	f000 f8d6 	bl	8000664 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004b8:	f000 f8a4 	bl	8000604 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80004bc:	f002 f87c 	bl	80025b8 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004c0:	4a0e      	ldr	r2, [pc, #56]	; (80004fc <main+0x54>)
 80004c2:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <main+0x58>)
 80004c4:	2100      	movs	r1, #0
 80004c6:	0018      	movs	r0, r3
 80004c8:	f002 f8d2 	bl	8002670 <osThreadNew>
 80004cc:	0002      	movs	r2, r0
 80004ce:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <main+0x5c>)
 80004d0:	601a      	str	r2, [r3, #0]

	/* creation of turnOnLED */
	turnOnLEDHandle = osThreadNew(StartTask02, NULL, &turnOnLED_attributes);
 80004d2:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <main+0x60>)
 80004d4:	4b0d      	ldr	r3, [pc, #52]	; (800050c <main+0x64>)
 80004d6:	2100      	movs	r1, #0
 80004d8:	0018      	movs	r0, r3
 80004da:	f002 f8c9 	bl	8002670 <osThreadNew>
 80004de:	0002      	movs	r2, r0
 80004e0:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <main+0x68>)
 80004e2:	601a      	str	r2, [r3, #0]

	/* creation of turnOffLED */
	turnOffLEDHandle = osThreadNew(StartTask03, NULL, &turnOffLED_attributes);
 80004e4:	4a0b      	ldr	r2, [pc, #44]	; (8000514 <main+0x6c>)
 80004e6:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <main+0x70>)
 80004e8:	2100      	movs	r1, #0
 80004ea:	0018      	movs	r0, r3
 80004ec:	f002 f8c0 	bl	8002670 <osThreadNew>
 80004f0:	0002      	movs	r2, r0
 80004f2:	4b0a      	ldr	r3, [pc, #40]	; (800051c <main+0x74>)
 80004f4:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80004f6:	f002 f88b 	bl	8002610 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80004fa:	e7fe      	b.n	80004fa <main+0x52>
 80004fc:	08004b2c 	.word	0x08004b2c
 8000500:	0800072d 	.word	0x0800072d
 8000504:	200000b4 	.word	0x200000b4
 8000508:	08004b50 	.word	0x08004b50
 800050c:	0800073d 	.word	0x0800073d
 8000510:	200000b8 	.word	0x200000b8
 8000514:	08004b74 	.word	0x08004b74
 8000518:	0800075f 	.word	0x0800075f
 800051c:	200000bc 	.word	0x200000bc

08000520 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000520:	b590      	push	{r4, r7, lr}
 8000522:	b099      	sub	sp, #100	; 0x64
 8000524:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000526:	242c      	movs	r4, #44	; 0x2c
 8000528:	193b      	adds	r3, r7, r4
 800052a:	0018      	movs	r0, r3
 800052c:	2334      	movs	r3, #52	; 0x34
 800052e:	001a      	movs	r2, r3
 8000530:	2100      	movs	r1, #0
 8000532:	f004 fac8 	bl	8004ac6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000536:	2318      	movs	r3, #24
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	0018      	movs	r0, r3
 800053c:	2314      	movs	r3, #20
 800053e:	001a      	movs	r2, r3
 8000540:	2100      	movs	r1, #0
 8000542:	f004 fac0 	bl	8004ac6 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000546:	003b      	movs	r3, r7
 8000548:	0018      	movs	r0, r3
 800054a:	2318      	movs	r3, #24
 800054c:	001a      	movs	r2, r3
 800054e:	2100      	movs	r1, #0
 8000550:	f004 fab9 	bl	8004ac6 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000554:	4b29      	ldr	r3, [pc, #164]	; (80005fc <SystemClock_Config+0xdc>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a29      	ldr	r2, [pc, #164]	; (8000600 <SystemClock_Config+0xe0>)
 800055a:	401a      	ands	r2, r3
 800055c:	4b27      	ldr	r3, [pc, #156]	; (80005fc <SystemClock_Config+0xdc>)
 800055e:	2180      	movs	r1, #128	; 0x80
 8000560:	0109      	lsls	r1, r1, #4
 8000562:	430a      	orrs	r2, r1
 8000564:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000566:	0021      	movs	r1, r4
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2201      	movs	r2, #1
 800056c:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800056e:	187b      	adds	r3, r7, r1
 8000570:	22a0      	movs	r2, #160	; 0xa0
 8000572:	02d2      	lsls	r2, r2, #11
 8000574:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2202      	movs	r2, #2
 800057a:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2280      	movs	r2, #128	; 0x80
 8000580:	0252      	lsls	r2, r2, #9
 8000582:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	22c0      	movs	r2, #192	; 0xc0
 8000588:	0312      	lsls	r2, r2, #12
 800058a:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	03d2      	lsls	r2, r2, #15
 8000592:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000594:	187b      	adds	r3, r7, r1
 8000596:	0018      	movs	r0, r3
 8000598:	f000 fc74 	bl	8000e84 <HAL_RCC_OscConfig>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x84>
		Error_Handler();
 80005a0:	f000 f8ee 	bl	8000780 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80005a4:	2118      	movs	r1, #24
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	220f      	movs	r2, #15
 80005aa:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	2203      	movs	r2, #3
 80005b0:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2101      	movs	r1, #1
 80005c8:	0018      	movs	r0, r3
 80005ca:	f000 ffd7 	bl	800157c <HAL_RCC_ClockConfig>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xb6>
		Error_Handler();
 80005d2:	f000 f8d5 	bl	8000780 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005d6:	003b      	movs	r3, r7
 80005d8:	2202      	movs	r2, #2
 80005da:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005dc:	003b      	movs	r3, r7
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80005e2:	003b      	movs	r3, r7
 80005e4:	0018      	movs	r0, r3
 80005e6:	f001 f9ed 	bl	80019c4 <HAL_RCCEx_PeriphCLKConfig>
 80005ea:	1e03      	subs	r3, r0, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xd2>
		Error_Handler();
 80005ee:	f000 f8c7 	bl	8000780 <Error_Handler>
	}
}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	b019      	add	sp, #100	; 0x64
 80005f8:	bd90      	pop	{r4, r7, pc}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	40007000 	.word	0x40007000
 8000600:	ffffe7ff 	.word	0xffffe7ff

08000604 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <MX_USART2_UART_Init+0x58>)
 800060a:	4a15      	ldr	r2, [pc, #84]	; (8000660 <MX_USART2_UART_Init+0x5c>)
 800060c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800060e:	4b13      	ldr	r3, [pc, #76]	; (800065c <MX_USART2_UART_Init+0x58>)
 8000610:	22e1      	movs	r2, #225	; 0xe1
 8000612:	0252      	lsls	r2, r2, #9
 8000614:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_USART2_UART_Init+0x58>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_USART2_UART_Init+0x58>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_USART2_UART_Init+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_USART2_UART_Init+0x58>)
 800062a:	220c      	movs	r2, #12
 800062c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <MX_USART2_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_USART2_UART_Init+0x58>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <MX_USART2_UART_Init+0x58>)
 800063c:	2200      	movs	r2, #0
 800063e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_USART2_UART_Init+0x58>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000646:	4b05      	ldr	r3, [pc, #20]	; (800065c <MX_USART2_UART_Init+0x58>)
 8000648:	0018      	movs	r0, r3
 800064a:	f001 fae7 	bl	8001c1c <HAL_UART_Init>
 800064e:	1e03      	subs	r3, r0, #0
 8000650:	d001      	beq.n	8000656 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000652:	f000 f895 	bl	8000780 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	2000002c 	.word	0x2000002c
 8000660:	40004400 	.word	0x40004400

08000664 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b089      	sub	sp, #36	; 0x24
 8000668:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800066a:	240c      	movs	r4, #12
 800066c:	193b      	adds	r3, r7, r4
 800066e:	0018      	movs	r0, r3
 8000670:	2314      	movs	r3, #20
 8000672:	001a      	movs	r2, r3
 8000674:	2100      	movs	r1, #0
 8000676:	f004 fa26 	bl	8004ac6 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800067a:	4b2a      	ldr	r3, [pc, #168]	; (8000724 <MX_GPIO_Init+0xc0>)
 800067c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800067e:	4b29      	ldr	r3, [pc, #164]	; (8000724 <MX_GPIO_Init+0xc0>)
 8000680:	2104      	movs	r1, #4
 8000682:	430a      	orrs	r2, r1
 8000684:	62da      	str	r2, [r3, #44]	; 0x2c
 8000686:	4b27      	ldr	r3, [pc, #156]	; (8000724 <MX_GPIO_Init+0xc0>)
 8000688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800068a:	2204      	movs	r2, #4
 800068c:	4013      	ands	r3, r2
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000692:	4b24      	ldr	r3, [pc, #144]	; (8000724 <MX_GPIO_Init+0xc0>)
 8000694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000696:	4b23      	ldr	r3, [pc, #140]	; (8000724 <MX_GPIO_Init+0xc0>)
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	430a      	orrs	r2, r1
 800069c:	62da      	str	r2, [r3, #44]	; 0x2c
 800069e:	4b21      	ldr	r3, [pc, #132]	; (8000724 <MX_GPIO_Init+0xc0>)
 80006a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006a2:	2280      	movs	r2, #128	; 0x80
 80006a4:	4013      	ands	r3, r2
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <MX_GPIO_Init+0xc0>)
 80006ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ae:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <MX_GPIO_Init+0xc0>)
 80006b0:	2101      	movs	r1, #1
 80006b2:	430a      	orrs	r2, r1
 80006b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80006b6:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <MX_GPIO_Init+0xc0>)
 80006b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ba:	2201      	movs	r2, #1
 80006bc:	4013      	ands	r3, r2
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006c2:	23a0      	movs	r3, #160	; 0xa0
 80006c4:	05db      	lsls	r3, r3, #23
 80006c6:	2200      	movs	r2, #0
 80006c8:	2120      	movs	r1, #32
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 fbbc 	bl	8000e48 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	2280      	movs	r2, #128	; 0x80
 80006d4:	0192      	lsls	r2, r2, #6
 80006d6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	2284      	movs	r2, #132	; 0x84
 80006dc:	0392      	lsls	r2, r2, #14
 80006de:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <MX_GPIO_Init+0xc4>)
 80006ea:	0019      	movs	r1, r3
 80006ec:	0010      	movs	r0, r2
 80006ee:	f000 fa2d 	bl	8000b4c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80006f2:	0021      	movs	r1, r4
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2220      	movs	r2, #32
 80006f8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2201      	movs	r2, #1
 80006fe:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800070c:	187a      	adds	r2, r7, r1
 800070e:	23a0      	movs	r3, #160	; 0xa0
 8000710:	05db      	lsls	r3, r3, #23
 8000712:	0011      	movs	r1, r2
 8000714:	0018      	movs	r0, r3
 8000716:	f000 fa19 	bl	8000b4c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	b009      	add	sp, #36	; 0x24
 8000720:	bd90      	pop	{r4, r7, pc}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	40021000 	.word	0x40021000
 8000728:	50000800 	.word	0x50000800

0800072c <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000734:	2001      	movs	r0, #1
 8000736:	f002 f83f 	bl	80027b8 <osDelay>
 800073a:	e7fb      	b.n	8000734 <StartDefaultTask+0x8>

0800073c <StartTask02>:
 * @brief Function implementing the turnOnLED thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000744:	23a0      	movs	r3, #160	; 0xa0
 8000746:	05db      	lsls	r3, r3, #23
 8000748:	2201      	movs	r2, #1
 800074a:	2120      	movs	r1, #32
 800074c:	0018      	movs	r0, r3
 800074e:	f000 fb7b 	bl	8000e48 <HAL_GPIO_WritePin>
		osDelay(1000);
 8000752:	23fa      	movs	r3, #250	; 0xfa
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	0018      	movs	r0, r3
 8000758:	f002 f82e 	bl	80027b8 <osDelay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800075c:	e7f2      	b.n	8000744 <StartTask02+0x8>

0800075e <StartTask03>:
 * @brief Function implementing the turnOffLED thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument) {
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000766:	23a0      	movs	r3, #160	; 0xa0
 8000768:	05db      	lsls	r3, r3, #23
 800076a:	2200      	movs	r2, #0
 800076c:	2120      	movs	r1, #32
 800076e:	0018      	movs	r0, r3
 8000770:	f000 fb6a 	bl	8000e48 <HAL_GPIO_WritePin>
		osDelay(900);
 8000774:	23e1      	movs	r3, #225	; 0xe1
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	0018      	movs	r0, r3
 800077a:	f002 f81d 	bl	80027b8 <osDelay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800077e:	e7f2      	b.n	8000766 <StartTask03+0x8>

08000780 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000788:	e7fe      	b.n	8000788 <Error_Handler+0x8>
	...

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000790:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <HAL_MspInit+0x34>)
 8000792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <HAL_MspInit+0x34>)
 8000796:	2101      	movs	r1, #1
 8000798:	430a      	orrs	r2, r1
 800079a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <HAL_MspInit+0x34>)
 800079e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <HAL_MspInit+0x34>)
 80007a2:	2180      	movs	r1, #128	; 0x80
 80007a4:	0549      	lsls	r1, r1, #21
 80007a6:	430a      	orrs	r2, r1
 80007a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80007aa:	2302      	movs	r3, #2
 80007ac:	425b      	negs	r3, r3
 80007ae:	2200      	movs	r2, #0
 80007b0:	2103      	movs	r1, #3
 80007b2:	0018      	movs	r0, r3
 80007b4:	f000 f9a8 	bl	8000b08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	40021000 	.word	0x40021000

080007c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b089      	sub	sp, #36	; 0x24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	240c      	movs	r4, #12
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	0018      	movs	r0, r3
 80007d2:	2314      	movs	r3, #20
 80007d4:	001a      	movs	r2, r3
 80007d6:	2100      	movs	r1, #0
 80007d8:	f004 f975 	bl	8004ac6 <memset>
  if(huart->Instance==USART2)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a18      	ldr	r2, [pc, #96]	; (8000844 <HAL_UART_MspInit+0x80>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d129      	bne.n	800083a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <HAL_UART_MspInit+0x84>)
 80007e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <HAL_UART_MspInit+0x84>)
 80007ec:	2180      	movs	r1, #128	; 0x80
 80007ee:	0289      	lsls	r1, r1, #10
 80007f0:	430a      	orrs	r2, r1
 80007f2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <HAL_UART_MspInit+0x84>)
 80007f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007f8:	4b13      	ldr	r3, [pc, #76]	; (8000848 <HAL_UART_MspInit+0x84>)
 80007fa:	2101      	movs	r1, #1
 80007fc:	430a      	orrs	r2, r1
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <HAL_UART_MspInit+0x84>)
 8000802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000804:	2201      	movs	r2, #1
 8000806:	4013      	ands	r3, r2
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800080c:	0021      	movs	r1, r4
 800080e:	187b      	adds	r3, r7, r1
 8000810:	220c      	movs	r2, #12
 8000812:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2202      	movs	r2, #2
 8000818:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2203      	movs	r2, #3
 8000824:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2204      	movs	r2, #4
 800082a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082c:	187a      	adds	r2, r7, r1
 800082e:	23a0      	movs	r3, #160	; 0xa0
 8000830:	05db      	lsls	r3, r3, #23
 8000832:	0011      	movs	r1, r2
 8000834:	0018      	movs	r0, r3
 8000836:	f000 f989 	bl	8000b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	b009      	add	sp, #36	; 0x24
 8000840:	bd90      	pop	{r4, r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	40004400 	.word	0x40004400
 8000848:	40021000 	.word	0x40021000

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <NMI_Handler+0x4>

08000852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <HardFault_Handler+0x4>

08000858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800085c:	f000 f8a6 	bl	80009ac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000860:	f003 fa50 	bl	8003d04 <xTaskGetSchedulerState>
 8000864:	0003      	movs	r3, r0
 8000866:	2b01      	cmp	r3, #1
 8000868:	d001      	beq.n	800086e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800086a:	f003 ff1d 	bl	80046a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000880:	4813      	ldr	r0, [pc, #76]	; (80008d0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000882:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000884:	f7ff fff6 	bl	8000874 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000888:	4812      	ldr	r0, [pc, #72]	; (80008d4 <LoopForever+0x6>)
    LDR R1, [R0]
 800088a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800088c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800088e:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <LoopForever+0xa>)
    CMP R1, R2
 8000890:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000892:	d105      	bne.n	80008a0 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000894:	4811      	ldr	r0, [pc, #68]	; (80008dc <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000896:	4912      	ldr	r1, [pc, #72]	; (80008e0 <LoopForever+0x12>)
    STR R1, [R0]
 8000898:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800089a:	4812      	ldr	r0, [pc, #72]	; (80008e4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800089c:	4912      	ldr	r1, [pc, #72]	; (80008e8 <LoopForever+0x1a>)
    STR R1, [R0]
 800089e:	6001      	str	r1, [r0, #0]

080008a0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a0:	4812      	ldr	r0, [pc, #72]	; (80008ec <LoopForever+0x1e>)
  ldr r1, =_edata
 80008a2:	4913      	ldr	r1, [pc, #76]	; (80008f0 <LoopForever+0x22>)
  ldr r2, =_sidata
 80008a4:	4a13      	ldr	r2, [pc, #76]	; (80008f4 <LoopForever+0x26>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a8:	e002      	b.n	80008b0 <LoopCopyDataInit>

080008aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ae:	3304      	adds	r3, #4

080008b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b4:	d3f9      	bcc.n	80008aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b6:	4a10      	ldr	r2, [pc, #64]	; (80008f8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80008b8:	4c10      	ldr	r4, [pc, #64]	; (80008fc <LoopForever+0x2e>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008bc:	e001      	b.n	80008c2 <LoopFillZerobss>

080008be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c0:	3204      	adds	r2, #4

080008c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c4:	d3fb      	bcc.n	80008be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008c6:	f004 f8d1 	bl	8004a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ca:	f7ff fded 	bl	80004a8 <main>

080008ce <LoopForever>:

LoopForever:
    b LoopForever
 80008ce:	e7fe      	b.n	80008ce <LoopForever>
   ldr   r0, =_estack
 80008d0:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 80008d4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80008d8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80008dc:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80008e0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80008e4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80008e8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008f4:	08004c3c 	.word	0x08004c3c
  ldr r2, =_sbss
 80008f8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008fc:	20001a04 	.word	0x20001a04

08000900 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC1_IRQHandler>
	...

08000904 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <HAL_Init+0x3c>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <HAL_Init+0x3c>)
 8000916:	2140      	movs	r1, #64	; 0x40
 8000918:	430a      	orrs	r2, r1
 800091a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800091c:	2003      	movs	r0, #3
 800091e:	f000 f811 	bl	8000944 <HAL_InitTick>
 8000922:	1e03      	subs	r3, r0, #0
 8000924:	d003      	beq.n	800092e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	2201      	movs	r2, #1
 800092a:	701a      	strb	r2, [r3, #0]
 800092c:	e001      	b.n	8000932 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800092e:	f7ff ff2d 	bl	800078c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	781b      	ldrb	r3, [r3, #0]
}
 8000936:	0018      	movs	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	b002      	add	sp, #8
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	40022000 	.word	0x40022000

08000944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <HAL_InitTick+0x5c>)
 800094e:	681c      	ldr	r4, [r3, #0]
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <HAL_InitTick+0x60>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	0019      	movs	r1, r3
 8000956:	23fa      	movs	r3, #250	; 0xfa
 8000958:	0098      	lsls	r0, r3, #2
 800095a:	f7ff fbd5 	bl	8000108 <__udivsi3>
 800095e:	0003      	movs	r3, r0
 8000960:	0019      	movs	r1, r3
 8000962:	0020      	movs	r0, r4
 8000964:	f7ff fbd0 	bl	8000108 <__udivsi3>
 8000968:	0003      	movs	r3, r0
 800096a:	0018      	movs	r0, r3
 800096c:	f000 f8e1 	bl	8000b32 <HAL_SYSTICK_Config>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d001      	beq.n	8000978 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000974:	2301      	movs	r3, #1
 8000976:	e00f      	b.n	8000998 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b03      	cmp	r3, #3
 800097c:	d80b      	bhi.n	8000996 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	2301      	movs	r3, #1
 8000982:	425b      	negs	r3, r3
 8000984:	2200      	movs	r2, #0
 8000986:	0018      	movs	r0, r3
 8000988:	f000 f8be 	bl	8000b08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_InitTick+0x64>)
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000992:	2300      	movs	r3, #0
 8000994:	e000      	b.n	8000998 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
}
 8000998:	0018      	movs	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	b003      	add	sp, #12
 800099e:	bd90      	pop	{r4, r7, pc}
 80009a0:	20000000 	.word	0x20000000
 80009a4:	20000008 	.word	0x20000008
 80009a8:	20000004 	.word	0x20000004

080009ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <HAL_IncTick+0x1c>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	001a      	movs	r2, r3
 80009b6:	4b05      	ldr	r3, [pc, #20]	; (80009cc <HAL_IncTick+0x20>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	18d2      	adds	r2, r2, r3
 80009bc:	4b03      	ldr	r3, [pc, #12]	; (80009cc <HAL_IncTick+0x20>)
 80009be:	601a      	str	r2, [r3, #0]
}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	20000008 	.word	0x20000008
 80009cc:	200000c0 	.word	0x200000c0

080009d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  return uwTick;
 80009d4:	4b02      	ldr	r3, [pc, #8]	; (80009e0 <HAL_GetTick+0x10>)
 80009d6:	681b      	ldr	r3, [r3, #0]
}
 80009d8:	0018      	movs	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	200000c0 	.word	0x200000c0

080009e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	0002      	movs	r2, r0
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b7f      	cmp	r3, #127	; 0x7f
 80009f8:	d828      	bhi.n	8000a4c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009fa:	4a2f      	ldr	r2, [pc, #188]	; (8000ab8 <__NVIC_SetPriority+0xd4>)
 80009fc:	1dfb      	adds	r3, r7, #7
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	089b      	lsrs	r3, r3, #2
 8000a04:	33c0      	adds	r3, #192	; 0xc0
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	589b      	ldr	r3, [r3, r2]
 8000a0a:	1dfa      	adds	r2, r7, #7
 8000a0c:	7812      	ldrb	r2, [r2, #0]
 8000a0e:	0011      	movs	r1, r2
 8000a10:	2203      	movs	r2, #3
 8000a12:	400a      	ands	r2, r1
 8000a14:	00d2      	lsls	r2, r2, #3
 8000a16:	21ff      	movs	r1, #255	; 0xff
 8000a18:	4091      	lsls	r1, r2
 8000a1a:	000a      	movs	r2, r1
 8000a1c:	43d2      	mvns	r2, r2
 8000a1e:	401a      	ands	r2, r3
 8000a20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	019b      	lsls	r3, r3, #6
 8000a26:	22ff      	movs	r2, #255	; 0xff
 8000a28:	401a      	ands	r2, r3
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	0018      	movs	r0, r3
 8000a30:	2303      	movs	r3, #3
 8000a32:	4003      	ands	r3, r0
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a38:	481f      	ldr	r0, [pc, #124]	; (8000ab8 <__NVIC_SetPriority+0xd4>)
 8000a3a:	1dfb      	adds	r3, r7, #7
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	b25b      	sxtb	r3, r3
 8000a40:	089b      	lsrs	r3, r3, #2
 8000a42:	430a      	orrs	r2, r1
 8000a44:	33c0      	adds	r3, #192	; 0xc0
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a4a:	e031      	b.n	8000ab0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a4c:	4a1b      	ldr	r2, [pc, #108]	; (8000abc <__NVIC_SetPriority+0xd8>)
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	0019      	movs	r1, r3
 8000a54:	230f      	movs	r3, #15
 8000a56:	400b      	ands	r3, r1
 8000a58:	3b08      	subs	r3, #8
 8000a5a:	089b      	lsrs	r3, r3, #2
 8000a5c:	3306      	adds	r3, #6
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	18d3      	adds	r3, r2, r3
 8000a62:	3304      	adds	r3, #4
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	1dfa      	adds	r2, r7, #7
 8000a68:	7812      	ldrb	r2, [r2, #0]
 8000a6a:	0011      	movs	r1, r2
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	400a      	ands	r2, r1
 8000a70:	00d2      	lsls	r2, r2, #3
 8000a72:	21ff      	movs	r1, #255	; 0xff
 8000a74:	4091      	lsls	r1, r2
 8000a76:	000a      	movs	r2, r1
 8000a78:	43d2      	mvns	r2, r2
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	019b      	lsls	r3, r3, #6
 8000a82:	22ff      	movs	r2, #255	; 0xff
 8000a84:	401a      	ands	r2, r3
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	4003      	ands	r3, r0
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a94:	4809      	ldr	r0, [pc, #36]	; (8000abc <__NVIC_SetPriority+0xd8>)
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	001c      	movs	r4, r3
 8000a9c:	230f      	movs	r3, #15
 8000a9e:	4023      	ands	r3, r4
 8000aa0:	3b08      	subs	r3, #8
 8000aa2:	089b      	lsrs	r3, r3, #2
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	3306      	adds	r3, #6
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	18c3      	adds	r3, r0, r3
 8000aac:	3304      	adds	r3, #4
 8000aae:	601a      	str	r2, [r3, #0]
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b003      	add	sp, #12
 8000ab6:	bd90      	pop	{r4, r7, pc}
 8000ab8:	e000e100 	.word	0xe000e100
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	045b      	lsls	r3, r3, #17
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d301      	bcc.n	8000ad8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	e010      	b.n	8000afa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <SysTick_Config+0x44>)
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	3a01      	subs	r2, #1
 8000ade:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	425b      	negs	r3, r3
 8000ae4:	2103      	movs	r1, #3
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f7ff ff7c 	bl	80009e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <SysTick_Config+0x44>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af2:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <SysTick_Config+0x44>)
 8000af4:	2207      	movs	r2, #7
 8000af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	0018      	movs	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b002      	add	sp, #8
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	e000e010 	.word	0xe000e010

08000b08 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
 8000b12:	210f      	movs	r1, #15
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	1c02      	adds	r2, r0, #0
 8000b18:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	b25b      	sxtb	r3, r3
 8000b22:	0011      	movs	r1, r2
 8000b24:	0018      	movs	r0, r3
 8000b26:	f7ff ff5d 	bl	80009e4 <__NVIC_SetPriority>
}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b004      	add	sp, #16
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f7ff ffbf 	bl	8000ac0 <SysTick_Config>
 8000b42:	0003      	movs	r3, r0
}
 8000b44:	0018      	movs	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	b002      	add	sp, #8
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b62:	e155      	b.n	8000e10 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2101      	movs	r1, #1
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	4091      	lsls	r1, r2
 8000b6e:	000a      	movs	r2, r1
 8000b70:	4013      	ands	r3, r2
 8000b72:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d100      	bne.n	8000b7c <HAL_GPIO_Init+0x30>
 8000b7a:	e146      	b.n	8000e0a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	2203      	movs	r2, #3
 8000b82:	4013      	ands	r3, r2
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d005      	beq.n	8000b94 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d130      	bne.n	8000bf6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	409a      	lsls	r2, r3
 8000ba2:	0013      	movs	r3, r2
 8000ba4:	43da      	mvns	r2, r3
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	68da      	ldr	r2, [r3, #12]
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	409a      	lsls	r2, r3
 8000bb6:	0013      	movs	r3, r2
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bca:	2201      	movs	r2, #1
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	409a      	lsls	r2, r3
 8000bd0:	0013      	movs	r3, r2
 8000bd2:	43da      	mvns	r2, r3
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	091b      	lsrs	r3, r3, #4
 8000be0:	2201      	movs	r2, #1
 8000be2:	401a      	ands	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	409a      	lsls	r2, r3
 8000be8:	0013      	movs	r3, r2
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	2b03      	cmp	r3, #3
 8000c00:	d017      	beq.n	8000c32 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	409a      	lsls	r2, r3
 8000c10:	0013      	movs	r3, r2
 8000c12:	43da      	mvns	r2, r3
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	4013      	ands	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	689a      	ldr	r2, [r3, #8]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	409a      	lsls	r2, r3
 8000c24:	0013      	movs	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	2203      	movs	r2, #3
 8000c38:	4013      	ands	r3, r2
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d123      	bne.n	8000c86 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	08da      	lsrs	r2, r3, #3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3208      	adds	r2, #8
 8000c46:	0092      	lsls	r2, r2, #2
 8000c48:	58d3      	ldr	r3, [r2, r3]
 8000c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	2207      	movs	r2, #7
 8000c50:	4013      	ands	r3, r2
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	220f      	movs	r2, #15
 8000c56:	409a      	lsls	r2, r3
 8000c58:	0013      	movs	r3, r2
 8000c5a:	43da      	mvns	r2, r3
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	691a      	ldr	r2, [r3, #16]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	2107      	movs	r1, #7
 8000c6a:	400b      	ands	r3, r1
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	409a      	lsls	r2, r3
 8000c70:	0013      	movs	r3, r2
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	08da      	lsrs	r2, r3, #3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3208      	adds	r2, #8
 8000c80:	0092      	lsls	r2, r2, #2
 8000c82:	6939      	ldr	r1, [r7, #16]
 8000c84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	2203      	movs	r2, #3
 8000c92:	409a      	lsls	r2, r3
 8000c94:	0013      	movs	r3, r2
 8000c96:	43da      	mvns	r2, r3
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	401a      	ands	r2, r3
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	409a      	lsls	r2, r3
 8000cac:	0013      	movs	r3, r2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	23c0      	movs	r3, #192	; 0xc0
 8000cc0:	029b      	lsls	r3, r3, #10
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	d100      	bne.n	8000cc8 <HAL_GPIO_Init+0x17c>
 8000cc6:	e0a0      	b.n	8000e0a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc8:	4b57      	ldr	r3, [pc, #348]	; (8000e28 <HAL_GPIO_Init+0x2dc>)
 8000cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ccc:	4b56      	ldr	r3, [pc, #344]	; (8000e28 <HAL_GPIO_Init+0x2dc>)
 8000cce:	2101      	movs	r1, #1
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cd4:	4a55      	ldr	r2, [pc, #340]	; (8000e2c <HAL_GPIO_Init+0x2e0>)
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	089b      	lsrs	r3, r3, #2
 8000cda:	3302      	adds	r3, #2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	589b      	ldr	r3, [r3, r2]
 8000ce0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	220f      	movs	r2, #15
 8000cec:	409a      	lsls	r2, r3
 8000cee:	0013      	movs	r3, r2
 8000cf0:	43da      	mvns	r2, r3
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	23a0      	movs	r3, #160	; 0xa0
 8000cfc:	05db      	lsls	r3, r3, #23
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d01f      	beq.n	8000d42 <HAL_GPIO_Init+0x1f6>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a4a      	ldr	r2, [pc, #296]	; (8000e30 <HAL_GPIO_Init+0x2e4>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d019      	beq.n	8000d3e <HAL_GPIO_Init+0x1f2>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a49      	ldr	r2, [pc, #292]	; (8000e34 <HAL_GPIO_Init+0x2e8>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d013      	beq.n	8000d3a <HAL_GPIO_Init+0x1ee>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a48      	ldr	r2, [pc, #288]	; (8000e38 <HAL_GPIO_Init+0x2ec>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d00d      	beq.n	8000d36 <HAL_GPIO_Init+0x1ea>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a47      	ldr	r2, [pc, #284]	; (8000e3c <HAL_GPIO_Init+0x2f0>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d007      	beq.n	8000d32 <HAL_GPIO_Init+0x1e6>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a46      	ldr	r2, [pc, #280]	; (8000e40 <HAL_GPIO_Init+0x2f4>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d101      	bne.n	8000d2e <HAL_GPIO_Init+0x1e2>
 8000d2a:	2305      	movs	r3, #5
 8000d2c:	e00a      	b.n	8000d44 <HAL_GPIO_Init+0x1f8>
 8000d2e:	2306      	movs	r3, #6
 8000d30:	e008      	b.n	8000d44 <HAL_GPIO_Init+0x1f8>
 8000d32:	2304      	movs	r3, #4
 8000d34:	e006      	b.n	8000d44 <HAL_GPIO_Init+0x1f8>
 8000d36:	2303      	movs	r3, #3
 8000d38:	e004      	b.n	8000d44 <HAL_GPIO_Init+0x1f8>
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	e002      	b.n	8000d44 <HAL_GPIO_Init+0x1f8>
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e000      	b.n	8000d44 <HAL_GPIO_Init+0x1f8>
 8000d42:	2300      	movs	r3, #0
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	2103      	movs	r1, #3
 8000d48:	400a      	ands	r2, r1
 8000d4a:	0092      	lsls	r2, r2, #2
 8000d4c:	4093      	lsls	r3, r2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d54:	4935      	ldr	r1, [pc, #212]	; (8000e2c <HAL_GPIO_Init+0x2e0>)
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	089b      	lsrs	r3, r3, #2
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d62:	4b38      	ldr	r3, [pc, #224]	; (8000e44 <HAL_GPIO_Init+0x2f8>)
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	2380      	movs	r3, #128	; 0x80
 8000d78:	035b      	lsls	r3, r3, #13
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	d003      	beq.n	8000d86 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d86:	4b2f      	ldr	r3, [pc, #188]	; (8000e44 <HAL_GPIO_Init+0x2f8>)
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d8c:	4b2d      	ldr	r3, [pc, #180]	; (8000e44 <HAL_GPIO_Init+0x2f8>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	43da      	mvns	r2, r3
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	2380      	movs	r3, #128	; 0x80
 8000da2:	039b      	lsls	r3, r3, #14
 8000da4:	4013      	ands	r3, r2
 8000da6:	d003      	beq.n	8000db0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000db0:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <HAL_GPIO_Init+0x2f8>)
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000db6:	4b23      	ldr	r3, [pc, #140]	; (8000e44 <HAL_GPIO_Init+0x2f8>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	029b      	lsls	r3, r3, #10
 8000dce:	4013      	ands	r3, r2
 8000dd0:	d003      	beq.n	8000dda <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <HAL_GPIO_Init+0x2f8>)
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000de0:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <HAL_GPIO_Init+0x2f8>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	43da      	mvns	r2, r3
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	2380      	movs	r3, #128	; 0x80
 8000df6:	025b      	lsls	r3, r3, #9
 8000df8:	4013      	ands	r3, r2
 8000dfa:	d003      	beq.n	8000e04 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <HAL_GPIO_Init+0x2f8>)
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	40da      	lsrs	r2, r3
 8000e18:	1e13      	subs	r3, r2, #0
 8000e1a:	d000      	beq.n	8000e1e <HAL_GPIO_Init+0x2d2>
 8000e1c:	e6a2      	b.n	8000b64 <HAL_GPIO_Init+0x18>
  }
}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b006      	add	sp, #24
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40010000 	.word	0x40010000
 8000e30:	50000400 	.word	0x50000400
 8000e34:	50000800 	.word	0x50000800
 8000e38:	50000c00 	.word	0x50000c00
 8000e3c:	50001000 	.word	0x50001000
 8000e40:	50001c00 	.word	0x50001c00
 8000e44:	40010400 	.word	0x40010400

08000e48 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	0008      	movs	r0, r1
 8000e52:	0011      	movs	r1, r2
 8000e54:	1cbb      	adds	r3, r7, #2
 8000e56:	1c02      	adds	r2, r0, #0
 8000e58:	801a      	strh	r2, [r3, #0]
 8000e5a:	1c7b      	adds	r3, r7, #1
 8000e5c:	1c0a      	adds	r2, r1, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e60:	1c7b      	adds	r3, r7, #1
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d004      	beq.n	8000e72 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e68:	1cbb      	adds	r3, r7, #2
 8000e6a:	881a      	ldrh	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000e70:	e003      	b.n	8000e7a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000e72:	1cbb      	adds	r3, r7, #2
 8000e74:	881a      	ldrh	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b002      	add	sp, #8
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e84:	b5b0      	push	{r4, r5, r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d102      	bne.n	8000e98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	f000 fb6c 	bl	8001570 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e98:	4bc8      	ldr	r3, [pc, #800]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	220c      	movs	r2, #12
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ea2:	4bc6      	ldr	r3, [pc, #792]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	025b      	lsls	r3, r3, #9
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	d100      	bne.n	8000eba <HAL_RCC_OscConfig+0x36>
 8000eb8:	e07d      	b.n	8000fb6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	2b08      	cmp	r3, #8
 8000ebe:	d007      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	2b0c      	cmp	r3, #12
 8000ec4:	d112      	bne.n	8000eec <HAL_RCC_OscConfig+0x68>
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	025b      	lsls	r3, r3, #9
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d10d      	bne.n	8000eec <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed0:	4bba      	ldr	r3, [pc, #744]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	029b      	lsls	r3, r3, #10
 8000ed8:	4013      	ands	r3, r2
 8000eda:	d100      	bne.n	8000ede <HAL_RCC_OscConfig+0x5a>
 8000edc:	e06a      	b.n	8000fb4 <HAL_RCC_OscConfig+0x130>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d166      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	f000 fb42 	bl	8001570 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	025b      	lsls	r3, r3, #9
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d107      	bne.n	8000f08 <HAL_RCC_OscConfig+0x84>
 8000ef8:	4bb0      	ldr	r3, [pc, #704]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4baf      	ldr	r3, [pc, #700]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8000efe:	2180      	movs	r1, #128	; 0x80
 8000f00:	0249      	lsls	r1, r1, #9
 8000f02:	430a      	orrs	r2, r1
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	e027      	b.n	8000f58 <HAL_RCC_OscConfig+0xd4>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	23a0      	movs	r3, #160	; 0xa0
 8000f0e:	02db      	lsls	r3, r3, #11
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d10e      	bne.n	8000f32 <HAL_RCC_OscConfig+0xae>
 8000f14:	4ba9      	ldr	r3, [pc, #676]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4ba8      	ldr	r3, [pc, #672]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8000f1a:	2180      	movs	r1, #128	; 0x80
 8000f1c:	02c9      	lsls	r1, r1, #11
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	4ba6      	ldr	r3, [pc, #664]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	4ba5      	ldr	r3, [pc, #660]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8000f28:	2180      	movs	r1, #128	; 0x80
 8000f2a:	0249      	lsls	r1, r1, #9
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	e012      	b.n	8000f58 <HAL_RCC_OscConfig+0xd4>
 8000f32:	4ba2      	ldr	r3, [pc, #648]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	4ba1      	ldr	r3, [pc, #644]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8000f38:	49a1      	ldr	r1, [pc, #644]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8000f3a:	400a      	ands	r2, r1
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	4b9f      	ldr	r3, [pc, #636]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	2380      	movs	r3, #128	; 0x80
 8000f44:	025b      	lsls	r3, r3, #9
 8000f46:	4013      	ands	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	4b9b      	ldr	r3, [pc, #620]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b9a      	ldr	r3, [pc, #616]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8000f52:	499c      	ldr	r1, [pc, #624]	; (80011c4 <HAL_RCC_OscConfig+0x340>)
 8000f54:	400a      	ands	r2, r1
 8000f56:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d014      	beq.n	8000f8a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f60:	f7ff fd36 	bl	80009d0 <HAL_GetTick>
 8000f64:	0003      	movs	r3, r0
 8000f66:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f68:	e008      	b.n	8000f7c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f6a:	f7ff fd31 	bl	80009d0 <HAL_GetTick>
 8000f6e:	0002      	movs	r2, r0
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b64      	cmp	r3, #100	; 0x64
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e2f9      	b.n	8001570 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f7c:	4b8f      	ldr	r3, [pc, #572]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	029b      	lsls	r3, r3, #10
 8000f84:	4013      	ands	r3, r2
 8000f86:	d0f0      	beq.n	8000f6a <HAL_RCC_OscConfig+0xe6>
 8000f88:	e015      	b.n	8000fb6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8a:	f7ff fd21 	bl	80009d0 <HAL_GetTick>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f94:	f7ff fd1c 	bl	80009d0 <HAL_GetTick>
 8000f98:	0002      	movs	r2, r0
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b64      	cmp	r3, #100	; 0x64
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e2e4      	b.n	8001570 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fa6:	4b85      	ldr	r3, [pc, #532]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	2380      	movs	r3, #128	; 0x80
 8000fac:	029b      	lsls	r3, r3, #10
 8000fae:	4013      	ands	r3, r2
 8000fb0:	d1f0      	bne.n	8000f94 <HAL_RCC_OscConfig+0x110>
 8000fb2:	e000      	b.n	8000fb6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2202      	movs	r2, #2
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	d100      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x13e>
 8000fc0:	e099      	b.n	80010f6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fca:	2220      	movs	r2, #32
 8000fcc:	4013      	ands	r3, r2
 8000fce:	d009      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000fd0:	4b7a      	ldr	r3, [pc, #488]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b79      	ldr	r3, [pc, #484]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8000fd6:	2120      	movs	r1, #32
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	2220      	movs	r2, #32
 8000fe0:	4393      	bics	r3, r2
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	d005      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	2b0c      	cmp	r3, #12
 8000fee:	d13e      	bne.n	800106e <HAL_RCC_OscConfig+0x1ea>
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d13b      	bne.n	800106e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000ff6:	4b71      	ldr	r3, [pc, #452]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d004      	beq.n	800100a <HAL_RCC_OscConfig+0x186>
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e2b2      	b.n	8001570 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100a:	4b6c      	ldr	r3, [pc, #432]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	4a6e      	ldr	r2, [pc, #440]	; (80011c8 <HAL_RCC_OscConfig+0x344>)
 8001010:	4013      	ands	r3, r2
 8001012:	0019      	movs	r1, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	021a      	lsls	r2, r3, #8
 800101a:	4b68      	ldr	r3, [pc, #416]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 800101c:	430a      	orrs	r2, r1
 800101e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001020:	4b66      	ldr	r3, [pc, #408]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2209      	movs	r2, #9
 8001026:	4393      	bics	r3, r2
 8001028:	0019      	movs	r1, r3
 800102a:	4b64      	ldr	r3, [pc, #400]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 800102c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800102e:	430a      	orrs	r2, r1
 8001030:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001032:	f000 fbeb 	bl	800180c <HAL_RCC_GetSysClockFreq>
 8001036:	0001      	movs	r1, r0
 8001038:	4b60      	ldr	r3, [pc, #384]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	091b      	lsrs	r3, r3, #4
 800103e:	220f      	movs	r2, #15
 8001040:	4013      	ands	r3, r2
 8001042:	4a62      	ldr	r2, [pc, #392]	; (80011cc <HAL_RCC_OscConfig+0x348>)
 8001044:	5cd3      	ldrb	r3, [r2, r3]
 8001046:	000a      	movs	r2, r1
 8001048:	40da      	lsrs	r2, r3
 800104a:	4b61      	ldr	r3, [pc, #388]	; (80011d0 <HAL_RCC_OscConfig+0x34c>)
 800104c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800104e:	4b61      	ldr	r3, [pc, #388]	; (80011d4 <HAL_RCC_OscConfig+0x350>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2513      	movs	r5, #19
 8001054:	197c      	adds	r4, r7, r5
 8001056:	0018      	movs	r0, r3
 8001058:	f7ff fc74 	bl	8000944 <HAL_InitTick>
 800105c:	0003      	movs	r3, r0
 800105e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001060:	197b      	adds	r3, r7, r5
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d046      	beq.n	80010f6 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001068:	197b      	adds	r3, r7, r5
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	e280      	b.n	8001570 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001070:	2b00      	cmp	r3, #0
 8001072:	d027      	beq.n	80010c4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001074:	4b51      	ldr	r3, [pc, #324]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2209      	movs	r2, #9
 800107a:	4393      	bics	r3, r2
 800107c:	0019      	movs	r1, r3
 800107e:	4b4f      	ldr	r3, [pc, #316]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8001080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001082:	430a      	orrs	r2, r1
 8001084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001086:	f7ff fca3 	bl	80009d0 <HAL_GetTick>
 800108a:	0003      	movs	r3, r0
 800108c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800108e:	e008      	b.n	80010a2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001090:	f7ff fc9e 	bl	80009d0 <HAL_GetTick>
 8001094:	0002      	movs	r2, r0
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d901      	bls.n	80010a2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e266      	b.n	8001570 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010a2:	4b46      	ldr	r3, [pc, #280]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2204      	movs	r2, #4
 80010a8:	4013      	ands	r3, r2
 80010aa:	d0f1      	beq.n	8001090 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ac:	4b43      	ldr	r3, [pc, #268]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	4a45      	ldr	r2, [pc, #276]	; (80011c8 <HAL_RCC_OscConfig+0x344>)
 80010b2:	4013      	ands	r3, r2
 80010b4:	0019      	movs	r1, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	021a      	lsls	r2, r3, #8
 80010bc:	4b3f      	ldr	r3, [pc, #252]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 80010be:	430a      	orrs	r2, r1
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	e018      	b.n	80010f6 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010c4:	4b3d      	ldr	r3, [pc, #244]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b3c      	ldr	r3, [pc, #240]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 80010ca:	2101      	movs	r1, #1
 80010cc:	438a      	bics	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fc7e 	bl	80009d0 <HAL_GetTick>
 80010d4:	0003      	movs	r3, r0
 80010d6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010d8:	e008      	b.n	80010ec <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010da:	f7ff fc79 	bl	80009d0 <HAL_GetTick>
 80010de:	0002      	movs	r2, r0
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e241      	b.n	8001570 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010ec:	4b33      	ldr	r3, [pc, #204]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2204      	movs	r2, #4
 80010f2:	4013      	ands	r3, r2
 80010f4:	d1f1      	bne.n	80010da <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2210      	movs	r2, #16
 80010fc:	4013      	ands	r3, r2
 80010fe:	d100      	bne.n	8001102 <HAL_RCC_OscConfig+0x27e>
 8001100:	e0a1      	b.n	8001246 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d140      	bne.n	800118a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001108:	4b2c      	ldr	r3, [pc, #176]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	2380      	movs	r3, #128	; 0x80
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4013      	ands	r3, r2
 8001112:	d005      	beq.n	8001120 <HAL_RCC_OscConfig+0x29c>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e227      	b.n	8001570 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001120:	4b26      	ldr	r3, [pc, #152]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	4a2c      	ldr	r2, [pc, #176]	; (80011d8 <HAL_RCC_OscConfig+0x354>)
 8001126:	4013      	ands	r3, r2
 8001128:	0019      	movs	r1, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a1a      	ldr	r2, [r3, #32]
 800112e:	4b23      	ldr	r3, [pc, #140]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8001130:	430a      	orrs	r2, r1
 8001132:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001134:	4b21      	ldr	r3, [pc, #132]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	0a19      	lsrs	r1, r3, #8
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69db      	ldr	r3, [r3, #28]
 8001140:	061a      	lsls	r2, r3, #24
 8001142:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8001144:	430a      	orrs	r2, r1
 8001146:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	0b5b      	lsrs	r3, r3, #13
 800114e:	3301      	adds	r3, #1
 8001150:	2280      	movs	r2, #128	; 0x80
 8001152:	0212      	lsls	r2, r2, #8
 8001154:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	091b      	lsrs	r3, r3, #4
 800115c:	210f      	movs	r1, #15
 800115e:	400b      	ands	r3, r1
 8001160:	491a      	ldr	r1, [pc, #104]	; (80011cc <HAL_RCC_OscConfig+0x348>)
 8001162:	5ccb      	ldrb	r3, [r1, r3]
 8001164:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001166:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <HAL_RCC_OscConfig+0x34c>)
 8001168:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <HAL_RCC_OscConfig+0x350>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2513      	movs	r5, #19
 8001170:	197c      	adds	r4, r7, r5
 8001172:	0018      	movs	r0, r3
 8001174:	f7ff fbe6 	bl	8000944 <HAL_InitTick>
 8001178:	0003      	movs	r3, r0
 800117a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800117c:	197b      	adds	r3, r7, r5
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d060      	beq.n	8001246 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001184:	197b      	adds	r3, r7, r5
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	e1f2      	b.n	8001570 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d03f      	beq.n	8001212 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <HAL_RCC_OscConfig+0x338>)
 8001198:	2180      	movs	r1, #128	; 0x80
 800119a:	0049      	lsls	r1, r1, #1
 800119c:	430a      	orrs	r2, r1
 800119e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a0:	f7ff fc16 	bl	80009d0 <HAL_GetTick>
 80011a4:	0003      	movs	r3, r0
 80011a6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011a8:	e018      	b.n	80011dc <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011aa:	f7ff fc11 	bl	80009d0 <HAL_GetTick>
 80011ae:	0002      	movs	r2, r0
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d911      	bls.n	80011dc <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e1d9      	b.n	8001570 <HAL_RCC_OscConfig+0x6ec>
 80011bc:	40021000 	.word	0x40021000
 80011c0:	fffeffff 	.word	0xfffeffff
 80011c4:	fffbffff 	.word	0xfffbffff
 80011c8:	ffffe0ff 	.word	0xffffe0ff
 80011cc:	08004b98 	.word	0x08004b98
 80011d0:	20000000 	.word	0x20000000
 80011d4:	20000004 	.word	0x20000004
 80011d8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011dc:	4bc9      	ldr	r3, [pc, #804]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4013      	ands	r3, r2
 80011e6:	d0e0      	beq.n	80011aa <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011e8:	4bc6      	ldr	r3, [pc, #792]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	4ac6      	ldr	r2, [pc, #792]	; (8001508 <HAL_RCC_OscConfig+0x684>)
 80011ee:	4013      	ands	r3, r2
 80011f0:	0019      	movs	r1, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a1a      	ldr	r2, [r3, #32]
 80011f6:	4bc3      	ldr	r3, [pc, #780]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 80011f8:	430a      	orrs	r2, r1
 80011fa:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011fc:	4bc1      	ldr	r3, [pc, #772]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	0a19      	lsrs	r1, r3, #8
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	061a      	lsls	r2, r3, #24
 800120a:	4bbe      	ldr	r3, [pc, #760]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 800120c:	430a      	orrs	r2, r1
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	e019      	b.n	8001246 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001212:	4bbc      	ldr	r3, [pc, #752]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	4bbb      	ldr	r3, [pc, #748]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 8001218:	49bc      	ldr	r1, [pc, #752]	; (800150c <HAL_RCC_OscConfig+0x688>)
 800121a:	400a      	ands	r2, r1
 800121c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121e:	f7ff fbd7 	bl	80009d0 <HAL_GetTick>
 8001222:	0003      	movs	r3, r0
 8001224:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001228:	f7ff fbd2 	bl	80009d0 <HAL_GetTick>
 800122c:	0002      	movs	r2, r0
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e19a      	b.n	8001570 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800123a:	4bb2      	ldr	r3, [pc, #712]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4013      	ands	r3, r2
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2208      	movs	r2, #8
 800124c:	4013      	ands	r3, r2
 800124e:	d036      	beq.n	80012be <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d019      	beq.n	800128c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001258:	4baa      	ldr	r3, [pc, #680]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 800125a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800125c:	4ba9      	ldr	r3, [pc, #676]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 800125e:	2101      	movs	r1, #1
 8001260:	430a      	orrs	r2, r1
 8001262:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001264:	f7ff fbb4 	bl	80009d0 <HAL_GetTick>
 8001268:	0003      	movs	r3, r0
 800126a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800126e:	f7ff fbaf 	bl	80009d0 <HAL_GetTick>
 8001272:	0002      	movs	r2, r0
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e177      	b.n	8001570 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001280:	4ba0      	ldr	r3, [pc, #640]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 8001282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001284:	2202      	movs	r2, #2
 8001286:	4013      	ands	r3, r2
 8001288:	d0f1      	beq.n	800126e <HAL_RCC_OscConfig+0x3ea>
 800128a:	e018      	b.n	80012be <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800128c:	4b9d      	ldr	r3, [pc, #628]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 800128e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001290:	4b9c      	ldr	r3, [pc, #624]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 8001292:	2101      	movs	r1, #1
 8001294:	438a      	bics	r2, r1
 8001296:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001298:	f7ff fb9a 	bl	80009d0 <HAL_GetTick>
 800129c:	0003      	movs	r3, r0
 800129e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a2:	f7ff fb95 	bl	80009d0 <HAL_GetTick>
 80012a6:	0002      	movs	r2, r0
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e15d      	b.n	8001570 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012b4:	4b93      	ldr	r3, [pc, #588]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 80012b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012b8:	2202      	movs	r2, #2
 80012ba:	4013      	ands	r3, r2
 80012bc:	d1f1      	bne.n	80012a2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2204      	movs	r2, #4
 80012c4:	4013      	ands	r3, r2
 80012c6:	d100      	bne.n	80012ca <HAL_RCC_OscConfig+0x446>
 80012c8:	e0ae      	b.n	8001428 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ca:	2023      	movs	r0, #35	; 0x23
 80012cc:	183b      	adds	r3, r7, r0
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d2:	4b8c      	ldr	r3, [pc, #560]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 80012d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012d6:	2380      	movs	r3, #128	; 0x80
 80012d8:	055b      	lsls	r3, r3, #21
 80012da:	4013      	ands	r3, r2
 80012dc:	d109      	bne.n	80012f2 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	4b89      	ldr	r3, [pc, #548]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 80012e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012e2:	4b88      	ldr	r3, [pc, #544]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 80012e4:	2180      	movs	r1, #128	; 0x80
 80012e6:	0549      	lsls	r1, r1, #21
 80012e8:	430a      	orrs	r2, r1
 80012ea:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80012ec:	183b      	adds	r3, r7, r0
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f2:	4b87      	ldr	r3, [pc, #540]	; (8001510 <HAL_RCC_OscConfig+0x68c>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4013      	ands	r3, r2
 80012fc:	d11a      	bne.n	8001334 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012fe:	4b84      	ldr	r3, [pc, #528]	; (8001510 <HAL_RCC_OscConfig+0x68c>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4b83      	ldr	r3, [pc, #524]	; (8001510 <HAL_RCC_OscConfig+0x68c>)
 8001304:	2180      	movs	r1, #128	; 0x80
 8001306:	0049      	lsls	r1, r1, #1
 8001308:	430a      	orrs	r2, r1
 800130a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800130c:	f7ff fb60 	bl	80009d0 <HAL_GetTick>
 8001310:	0003      	movs	r3, r0
 8001312:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001316:	f7ff fb5b 	bl	80009d0 <HAL_GetTick>
 800131a:	0002      	movs	r2, r0
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b64      	cmp	r3, #100	; 0x64
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e123      	b.n	8001570 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001328:	4b79      	ldr	r3, [pc, #484]	; (8001510 <HAL_RCC_OscConfig+0x68c>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4013      	ands	r3, r2
 8001332:	d0f0      	beq.n	8001316 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	429a      	cmp	r2, r3
 800133e:	d107      	bne.n	8001350 <HAL_RCC_OscConfig+0x4cc>
 8001340:	4b70      	ldr	r3, [pc, #448]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 8001342:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001344:	4b6f      	ldr	r3, [pc, #444]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 8001346:	2180      	movs	r1, #128	; 0x80
 8001348:	0049      	lsls	r1, r1, #1
 800134a:	430a      	orrs	r2, r1
 800134c:	651a      	str	r2, [r3, #80]	; 0x50
 800134e:	e031      	b.n	80013b4 <HAL_RCC_OscConfig+0x530>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d10c      	bne.n	8001372 <HAL_RCC_OscConfig+0x4ee>
 8001358:	4b6a      	ldr	r3, [pc, #424]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 800135a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800135c:	4b69      	ldr	r3, [pc, #420]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 800135e:	496b      	ldr	r1, [pc, #428]	; (800150c <HAL_RCC_OscConfig+0x688>)
 8001360:	400a      	ands	r2, r1
 8001362:	651a      	str	r2, [r3, #80]	; 0x50
 8001364:	4b67      	ldr	r3, [pc, #412]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 8001366:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001368:	4b66      	ldr	r3, [pc, #408]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 800136a:	496a      	ldr	r1, [pc, #424]	; (8001514 <HAL_RCC_OscConfig+0x690>)
 800136c:	400a      	ands	r2, r1
 800136e:	651a      	str	r2, [r3, #80]	; 0x50
 8001370:	e020      	b.n	80013b4 <HAL_RCC_OscConfig+0x530>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	23a0      	movs	r3, #160	; 0xa0
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	429a      	cmp	r2, r3
 800137c:	d10e      	bne.n	800139c <HAL_RCC_OscConfig+0x518>
 800137e:	4b61      	ldr	r3, [pc, #388]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 8001380:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001382:	4b60      	ldr	r3, [pc, #384]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 8001384:	2180      	movs	r1, #128	; 0x80
 8001386:	00c9      	lsls	r1, r1, #3
 8001388:	430a      	orrs	r2, r1
 800138a:	651a      	str	r2, [r3, #80]	; 0x50
 800138c:	4b5d      	ldr	r3, [pc, #372]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 800138e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001390:	4b5c      	ldr	r3, [pc, #368]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 8001392:	2180      	movs	r1, #128	; 0x80
 8001394:	0049      	lsls	r1, r1, #1
 8001396:	430a      	orrs	r2, r1
 8001398:	651a      	str	r2, [r3, #80]	; 0x50
 800139a:	e00b      	b.n	80013b4 <HAL_RCC_OscConfig+0x530>
 800139c:	4b59      	ldr	r3, [pc, #356]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 800139e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013a0:	4b58      	ldr	r3, [pc, #352]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 80013a2:	495a      	ldr	r1, [pc, #360]	; (800150c <HAL_RCC_OscConfig+0x688>)
 80013a4:	400a      	ands	r2, r1
 80013a6:	651a      	str	r2, [r3, #80]	; 0x50
 80013a8:	4b56      	ldr	r3, [pc, #344]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 80013aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013ac:	4b55      	ldr	r3, [pc, #340]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 80013ae:	4959      	ldr	r1, [pc, #356]	; (8001514 <HAL_RCC_OscConfig+0x690>)
 80013b0:	400a      	ands	r2, r1
 80013b2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d015      	beq.n	80013e8 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013bc:	f7ff fb08 	bl	80009d0 <HAL_GetTick>
 80013c0:	0003      	movs	r3, r0
 80013c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013c4:	e009      	b.n	80013da <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c6:	f7ff fb03 	bl	80009d0 <HAL_GetTick>
 80013ca:	0002      	movs	r2, r0
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	4a51      	ldr	r2, [pc, #324]	; (8001518 <HAL_RCC_OscConfig+0x694>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e0ca      	b.n	8001570 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013da:	4b4a      	ldr	r3, [pc, #296]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 80013dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013de:	2380      	movs	r3, #128	; 0x80
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4013      	ands	r3, r2
 80013e4:	d0ef      	beq.n	80013c6 <HAL_RCC_OscConfig+0x542>
 80013e6:	e014      	b.n	8001412 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e8:	f7ff faf2 	bl	80009d0 <HAL_GetTick>
 80013ec:	0003      	movs	r3, r0
 80013ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013f0:	e009      	b.n	8001406 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013f2:	f7ff faed 	bl	80009d0 <HAL_GetTick>
 80013f6:	0002      	movs	r2, r0
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	4a46      	ldr	r2, [pc, #280]	; (8001518 <HAL_RCC_OscConfig+0x694>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e0b4      	b.n	8001570 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001406:	4b3f      	ldr	r3, [pc, #252]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 8001408:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4013      	ands	r3, r2
 8001410:	d1ef      	bne.n	80013f2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001412:	2323      	movs	r3, #35	; 0x23
 8001414:	18fb      	adds	r3, r7, r3
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d105      	bne.n	8001428 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800141c:	4b39      	ldr	r3, [pc, #228]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 800141e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001420:	4b38      	ldr	r3, [pc, #224]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 8001422:	493e      	ldr	r1, [pc, #248]	; (800151c <HAL_RCC_OscConfig+0x698>)
 8001424:	400a      	ands	r2, r1
 8001426:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142c:	2b00      	cmp	r3, #0
 800142e:	d100      	bne.n	8001432 <HAL_RCC_OscConfig+0x5ae>
 8001430:	e09d      	b.n	800156e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	2b0c      	cmp	r3, #12
 8001436:	d100      	bne.n	800143a <HAL_RCC_OscConfig+0x5b6>
 8001438:	e076      	b.n	8001528 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143e:	2b02      	cmp	r3, #2
 8001440:	d145      	bne.n	80014ce <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001442:	4b30      	ldr	r3, [pc, #192]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	4b2f      	ldr	r3, [pc, #188]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 8001448:	4935      	ldr	r1, [pc, #212]	; (8001520 <HAL_RCC_OscConfig+0x69c>)
 800144a:	400a      	ands	r2, r1
 800144c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144e:	f7ff fabf 	bl	80009d0 <HAL_GetTick>
 8001452:	0003      	movs	r3, r0
 8001454:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001458:	f7ff faba 	bl	80009d0 <HAL_GetTick>
 800145c:	0002      	movs	r2, r0
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e082      	b.n	8001570 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800146a:	4b26      	ldr	r3, [pc, #152]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	2380      	movs	r3, #128	; 0x80
 8001470:	049b      	lsls	r3, r3, #18
 8001472:	4013      	ands	r3, r2
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001476:	4b23      	ldr	r3, [pc, #140]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	4a2a      	ldr	r2, [pc, #168]	; (8001524 <HAL_RCC_OscConfig+0x6a0>)
 800147c:	4013      	ands	r3, r2
 800147e:	0019      	movs	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001488:	431a      	orrs	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	431a      	orrs	r2, r3
 8001490:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 8001492:	430a      	orrs	r2, r1
 8001494:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001496:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 800149c:	2180      	movs	r1, #128	; 0x80
 800149e:	0449      	lsls	r1, r1, #17
 80014a0:	430a      	orrs	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fa94 	bl	80009d0 <HAL_GetTick>
 80014a8:	0003      	movs	r3, r0
 80014aa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ae:	f7ff fa8f 	bl	80009d0 <HAL_GetTick>
 80014b2:	0002      	movs	r2, r0
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e057      	b.n	8001570 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80014c0:	4b10      	ldr	r3, [pc, #64]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	049b      	lsls	r3, r3, #18
 80014c8:	4013      	ands	r3, r2
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x62a>
 80014cc:	e04f      	b.n	800156e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 80014d4:	4912      	ldr	r1, [pc, #72]	; (8001520 <HAL_RCC_OscConfig+0x69c>)
 80014d6:	400a      	ands	r2, r1
 80014d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014da:	f7ff fa79 	bl	80009d0 <HAL_GetTick>
 80014de:	0003      	movs	r3, r0
 80014e0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e4:	f7ff fa74 	bl	80009d0 <HAL_GetTick>
 80014e8:	0002      	movs	r2, r0
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e03c      	b.n	8001570 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014f6:	4b03      	ldr	r3, [pc, #12]	; (8001504 <HAL_RCC_OscConfig+0x680>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	049b      	lsls	r3, r3, #18
 80014fe:	4013      	ands	r3, r2
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x660>
 8001502:	e034      	b.n	800156e <HAL_RCC_OscConfig+0x6ea>
 8001504:	40021000 	.word	0x40021000
 8001508:	ffff1fff 	.word	0xffff1fff
 800150c:	fffffeff 	.word	0xfffffeff
 8001510:	40007000 	.word	0x40007000
 8001514:	fffffbff 	.word	0xfffffbff
 8001518:	00001388 	.word	0x00001388
 800151c:	efffffff 	.word	0xefffffff
 8001520:	feffffff 	.word	0xfeffffff
 8001524:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e01d      	b.n	8001570 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001534:	4b10      	ldr	r3, [pc, #64]	; (8001578 <HAL_RCC_OscConfig+0x6f4>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	025b      	lsls	r3, r3, #9
 8001540:	401a      	ands	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001546:	429a      	cmp	r2, r3
 8001548:	d10f      	bne.n	800156a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	23f0      	movs	r3, #240	; 0xf0
 800154e:	039b      	lsls	r3, r3, #14
 8001550:	401a      	ands	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001556:	429a      	cmp	r2, r3
 8001558:	d107      	bne.n	800156a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	23c0      	movs	r3, #192	; 0xc0
 800155e:	041b      	lsls	r3, r3, #16
 8001560:	401a      	ands	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001566:	429a      	cmp	r2, r3
 8001568:	d001      	beq.n	800156e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	0018      	movs	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	b00a      	add	sp, #40	; 0x28
 8001576:	bdb0      	pop	{r4, r5, r7, pc}
 8001578:	40021000 	.word	0x40021000

0800157c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800157c:	b5b0      	push	{r4, r5, r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e128      	b.n	80017e2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001590:	4b96      	ldr	r3, [pc, #600]	; (80017ec <HAL_RCC_ClockConfig+0x270>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2201      	movs	r2, #1
 8001596:	4013      	ands	r3, r2
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d91e      	bls.n	80015dc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159e:	4b93      	ldr	r3, [pc, #588]	; (80017ec <HAL_RCC_ClockConfig+0x270>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2201      	movs	r2, #1
 80015a4:	4393      	bics	r3, r2
 80015a6:	0019      	movs	r1, r3
 80015a8:	4b90      	ldr	r3, [pc, #576]	; (80017ec <HAL_RCC_ClockConfig+0x270>)
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015b0:	f7ff fa0e 	bl	80009d0 <HAL_GetTick>
 80015b4:	0003      	movs	r3, r0
 80015b6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b8:	e009      	b.n	80015ce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ba:	f7ff fa09 	bl	80009d0 <HAL_GetTick>
 80015be:	0002      	movs	r2, r0
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	4a8a      	ldr	r2, [pc, #552]	; (80017f0 <HAL_RCC_ClockConfig+0x274>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e109      	b.n	80017e2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ce:	4b87      	ldr	r3, [pc, #540]	; (80017ec <HAL_RCC_ClockConfig+0x270>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2201      	movs	r2, #1
 80015d4:	4013      	ands	r3, r2
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d1ee      	bne.n	80015ba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2202      	movs	r2, #2
 80015e2:	4013      	ands	r3, r2
 80015e4:	d009      	beq.n	80015fa <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e6:	4b83      	ldr	r3, [pc, #524]	; (80017f4 <HAL_RCC_ClockConfig+0x278>)
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	22f0      	movs	r2, #240	; 0xf0
 80015ec:	4393      	bics	r3, r2
 80015ee:	0019      	movs	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	4b7f      	ldr	r3, [pc, #508]	; (80017f4 <HAL_RCC_ClockConfig+0x278>)
 80015f6:	430a      	orrs	r2, r1
 80015f8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2201      	movs	r2, #1
 8001600:	4013      	ands	r3, r2
 8001602:	d100      	bne.n	8001606 <HAL_RCC_ClockConfig+0x8a>
 8001604:	e089      	b.n	800171a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d107      	bne.n	800161e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800160e:	4b79      	ldr	r3, [pc, #484]	; (80017f4 <HAL_RCC_ClockConfig+0x278>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	2380      	movs	r3, #128	; 0x80
 8001614:	029b      	lsls	r3, r3, #10
 8001616:	4013      	ands	r3, r2
 8001618:	d120      	bne.n	800165c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e0e1      	b.n	80017e2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b03      	cmp	r3, #3
 8001624:	d107      	bne.n	8001636 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001626:	4b73      	ldr	r3, [pc, #460]	; (80017f4 <HAL_RCC_ClockConfig+0x278>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	049b      	lsls	r3, r3, #18
 800162e:	4013      	ands	r3, r2
 8001630:	d114      	bne.n	800165c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e0d5      	b.n	80017e2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d106      	bne.n	800164c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800163e:	4b6d      	ldr	r3, [pc, #436]	; (80017f4 <HAL_RCC_ClockConfig+0x278>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2204      	movs	r2, #4
 8001644:	4013      	ands	r3, r2
 8001646:	d109      	bne.n	800165c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0ca      	b.n	80017e2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800164c:	4b69      	ldr	r3, [pc, #420]	; (80017f4 <HAL_RCC_ClockConfig+0x278>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4013      	ands	r3, r2
 8001656:	d101      	bne.n	800165c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0c2      	b.n	80017e2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800165c:	4b65      	ldr	r3, [pc, #404]	; (80017f4 <HAL_RCC_ClockConfig+0x278>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	2203      	movs	r2, #3
 8001662:	4393      	bics	r3, r2
 8001664:	0019      	movs	r1, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	4b62      	ldr	r3, [pc, #392]	; (80017f4 <HAL_RCC_ClockConfig+0x278>)
 800166c:	430a      	orrs	r2, r1
 800166e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001670:	f7ff f9ae 	bl	80009d0 <HAL_GetTick>
 8001674:	0003      	movs	r3, r0
 8001676:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d111      	bne.n	80016a4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001680:	e009      	b.n	8001696 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001682:	f7ff f9a5 	bl	80009d0 <HAL_GetTick>
 8001686:	0002      	movs	r2, r0
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	4a58      	ldr	r2, [pc, #352]	; (80017f0 <HAL_RCC_ClockConfig+0x274>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e0a5      	b.n	80017e2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001696:	4b57      	ldr	r3, [pc, #348]	; (80017f4 <HAL_RCC_ClockConfig+0x278>)
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	220c      	movs	r2, #12
 800169c:	4013      	ands	r3, r2
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d1ef      	bne.n	8001682 <HAL_RCC_ClockConfig+0x106>
 80016a2:	e03a      	b.n	800171a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b03      	cmp	r3, #3
 80016aa:	d111      	bne.n	80016d0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016ac:	e009      	b.n	80016c2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ae:	f7ff f98f 	bl	80009d0 <HAL_GetTick>
 80016b2:	0002      	movs	r2, r0
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	4a4d      	ldr	r2, [pc, #308]	; (80017f0 <HAL_RCC_ClockConfig+0x274>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e08f      	b.n	80017e2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c2:	4b4c      	ldr	r3, [pc, #304]	; (80017f4 <HAL_RCC_ClockConfig+0x278>)
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	220c      	movs	r2, #12
 80016c8:	4013      	ands	r3, r2
 80016ca:	2b0c      	cmp	r3, #12
 80016cc:	d1ef      	bne.n	80016ae <HAL_RCC_ClockConfig+0x132>
 80016ce:	e024      	b.n	800171a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d11b      	bne.n	8001710 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016d8:	e009      	b.n	80016ee <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016da:	f7ff f979 	bl	80009d0 <HAL_GetTick>
 80016de:	0002      	movs	r2, r0
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	4a42      	ldr	r2, [pc, #264]	; (80017f0 <HAL_RCC_ClockConfig+0x274>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e079      	b.n	80017e2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016ee:	4b41      	ldr	r3, [pc, #260]	; (80017f4 <HAL_RCC_ClockConfig+0x278>)
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	220c      	movs	r2, #12
 80016f4:	4013      	ands	r3, r2
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	d1ef      	bne.n	80016da <HAL_RCC_ClockConfig+0x15e>
 80016fa:	e00e      	b.n	800171a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016fc:	f7ff f968 	bl	80009d0 <HAL_GetTick>
 8001700:	0002      	movs	r2, r0
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	4a3a      	ldr	r2, [pc, #232]	; (80017f0 <HAL_RCC_ClockConfig+0x274>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e068      	b.n	80017e2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001710:	4b38      	ldr	r3, [pc, #224]	; (80017f4 <HAL_RCC_ClockConfig+0x278>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	220c      	movs	r2, #12
 8001716:	4013      	ands	r3, r2
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800171a:	4b34      	ldr	r3, [pc, #208]	; (80017ec <HAL_RCC_ClockConfig+0x270>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2201      	movs	r2, #1
 8001720:	4013      	ands	r3, r2
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d21e      	bcs.n	8001766 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001728:	4b30      	ldr	r3, [pc, #192]	; (80017ec <HAL_RCC_ClockConfig+0x270>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2201      	movs	r2, #1
 800172e:	4393      	bics	r3, r2
 8001730:	0019      	movs	r1, r3
 8001732:	4b2e      	ldr	r3, [pc, #184]	; (80017ec <HAL_RCC_ClockConfig+0x270>)
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800173a:	f7ff f949 	bl	80009d0 <HAL_GetTick>
 800173e:	0003      	movs	r3, r0
 8001740:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001742:	e009      	b.n	8001758 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001744:	f7ff f944 	bl	80009d0 <HAL_GetTick>
 8001748:	0002      	movs	r2, r0
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	4a28      	ldr	r2, [pc, #160]	; (80017f0 <HAL_RCC_ClockConfig+0x274>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e044      	b.n	80017e2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001758:	4b24      	ldr	r3, [pc, #144]	; (80017ec <HAL_RCC_ClockConfig+0x270>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2201      	movs	r2, #1
 800175e:	4013      	ands	r3, r2
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d1ee      	bne.n	8001744 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2204      	movs	r2, #4
 800176c:	4013      	ands	r3, r2
 800176e:	d009      	beq.n	8001784 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001770:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <HAL_RCC_ClockConfig+0x278>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	4a20      	ldr	r2, [pc, #128]	; (80017f8 <HAL_RCC_ClockConfig+0x27c>)
 8001776:	4013      	ands	r3, r2
 8001778:	0019      	movs	r1, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <HAL_RCC_ClockConfig+0x278>)
 8001780:	430a      	orrs	r2, r1
 8001782:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2208      	movs	r2, #8
 800178a:	4013      	ands	r3, r2
 800178c:	d00a      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800178e:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_RCC_ClockConfig+0x278>)
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	4a1a      	ldr	r2, [pc, #104]	; (80017fc <HAL_RCC_ClockConfig+0x280>)
 8001794:	4013      	ands	r3, r2
 8001796:	0019      	movs	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	00da      	lsls	r2, r3, #3
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <HAL_RCC_ClockConfig+0x278>)
 80017a0:	430a      	orrs	r2, r1
 80017a2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017a4:	f000 f832 	bl	800180c <HAL_RCC_GetSysClockFreq>
 80017a8:	0001      	movs	r1, r0
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_RCC_ClockConfig+0x278>)
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	091b      	lsrs	r3, r3, #4
 80017b0:	220f      	movs	r2, #15
 80017b2:	4013      	ands	r3, r2
 80017b4:	4a12      	ldr	r2, [pc, #72]	; (8001800 <HAL_RCC_ClockConfig+0x284>)
 80017b6:	5cd3      	ldrb	r3, [r2, r3]
 80017b8:	000a      	movs	r2, r1
 80017ba:	40da      	lsrs	r2, r3
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <HAL_RCC_ClockConfig+0x288>)
 80017be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_RCC_ClockConfig+0x28c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	250b      	movs	r5, #11
 80017c6:	197c      	adds	r4, r7, r5
 80017c8:	0018      	movs	r0, r3
 80017ca:	f7ff f8bb 	bl	8000944 <HAL_InitTick>
 80017ce:	0003      	movs	r3, r0
 80017d0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80017d2:	197b      	adds	r3, r7, r5
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d002      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80017da:	197b      	adds	r3, r7, r5
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	e000      	b.n	80017e2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	0018      	movs	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	b004      	add	sp, #16
 80017e8:	bdb0      	pop	{r4, r5, r7, pc}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	40022000 	.word	0x40022000
 80017f0:	00001388 	.word	0x00001388
 80017f4:	40021000 	.word	0x40021000
 80017f8:	fffff8ff 	.word	0xfffff8ff
 80017fc:	ffffc7ff 	.word	0xffffc7ff
 8001800:	08004b98 	.word	0x08004b98
 8001804:	20000000 	.word	0x20000000
 8001808:	20000004 	.word	0x20000004

0800180c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800180c:	b5b0      	push	{r4, r5, r7, lr}
 800180e:	b08e      	sub	sp, #56	; 0x38
 8001810:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001812:	4b4c      	ldr	r3, [pc, #304]	; (8001944 <HAL_RCC_GetSysClockFreq+0x138>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800181a:	230c      	movs	r3, #12
 800181c:	4013      	ands	r3, r2
 800181e:	2b0c      	cmp	r3, #12
 8001820:	d014      	beq.n	800184c <HAL_RCC_GetSysClockFreq+0x40>
 8001822:	d900      	bls.n	8001826 <HAL_RCC_GetSysClockFreq+0x1a>
 8001824:	e07b      	b.n	800191e <HAL_RCC_GetSysClockFreq+0x112>
 8001826:	2b04      	cmp	r3, #4
 8001828:	d002      	beq.n	8001830 <HAL_RCC_GetSysClockFreq+0x24>
 800182a:	2b08      	cmp	r3, #8
 800182c:	d00b      	beq.n	8001846 <HAL_RCC_GetSysClockFreq+0x3a>
 800182e:	e076      	b.n	800191e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001830:	4b44      	ldr	r3, [pc, #272]	; (8001944 <HAL_RCC_GetSysClockFreq+0x138>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2210      	movs	r2, #16
 8001836:	4013      	ands	r3, r2
 8001838:	d002      	beq.n	8001840 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800183a:	4b43      	ldr	r3, [pc, #268]	; (8001948 <HAL_RCC_GetSysClockFreq+0x13c>)
 800183c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800183e:	e07c      	b.n	800193a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001840:	4b42      	ldr	r3, [pc, #264]	; (800194c <HAL_RCC_GetSysClockFreq+0x140>)
 8001842:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001844:	e079      	b.n	800193a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001846:	4b42      	ldr	r3, [pc, #264]	; (8001950 <HAL_RCC_GetSysClockFreq+0x144>)
 8001848:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800184a:	e076      	b.n	800193a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184e:	0c9a      	lsrs	r2, r3, #18
 8001850:	230f      	movs	r3, #15
 8001852:	401a      	ands	r2, r3
 8001854:	4b3f      	ldr	r3, [pc, #252]	; (8001954 <HAL_RCC_GetSysClockFreq+0x148>)
 8001856:	5c9b      	ldrb	r3, [r3, r2]
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800185a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185c:	0d9a      	lsrs	r2, r3, #22
 800185e:	2303      	movs	r3, #3
 8001860:	4013      	ands	r3, r2
 8001862:	3301      	adds	r3, #1
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001866:	4b37      	ldr	r3, [pc, #220]	; (8001944 <HAL_RCC_GetSysClockFreq+0x138>)
 8001868:	68da      	ldr	r2, [r3, #12]
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	025b      	lsls	r3, r3, #9
 800186e:	4013      	ands	r3, r2
 8001870:	d01a      	beq.n	80018a8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001874:	61bb      	str	r3, [r7, #24]
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	4a35      	ldr	r2, [pc, #212]	; (8001950 <HAL_RCC_GetSysClockFreq+0x144>)
 800187c:	2300      	movs	r3, #0
 800187e:	69b8      	ldr	r0, [r7, #24]
 8001880:	69f9      	ldr	r1, [r7, #28]
 8001882:	f7fe fced 	bl	8000260 <__aeabi_lmul>
 8001886:	0002      	movs	r2, r0
 8001888:	000b      	movs	r3, r1
 800188a:	0010      	movs	r0, r2
 800188c:	0019      	movs	r1, r3
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f7fe fcc1 	bl	8000220 <__aeabi_uldivmod>
 800189e:	0002      	movs	r2, r0
 80018a0:	000b      	movs	r3, r1
 80018a2:	0013      	movs	r3, r2
 80018a4:	637b      	str	r3, [r7, #52]	; 0x34
 80018a6:	e037      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018a8:	4b26      	ldr	r3, [pc, #152]	; (8001944 <HAL_RCC_GetSysClockFreq+0x138>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2210      	movs	r2, #16
 80018ae:	4013      	ands	r3, r2
 80018b0:	d01a      	beq.n	80018e8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80018b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4a23      	ldr	r2, [pc, #140]	; (8001948 <HAL_RCC_GetSysClockFreq+0x13c>)
 80018bc:	2300      	movs	r3, #0
 80018be:	68b8      	ldr	r0, [r7, #8]
 80018c0:	68f9      	ldr	r1, [r7, #12]
 80018c2:	f7fe fccd 	bl	8000260 <__aeabi_lmul>
 80018c6:	0002      	movs	r2, r0
 80018c8:	000b      	movs	r3, r1
 80018ca:	0010      	movs	r0, r2
 80018cc:	0019      	movs	r1, r3
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f7fe fca1 	bl	8000220 <__aeabi_uldivmod>
 80018de:	0002      	movs	r2, r0
 80018e0:	000b      	movs	r3, r1
 80018e2:	0013      	movs	r3, r2
 80018e4:	637b      	str	r3, [r7, #52]	; 0x34
 80018e6:	e017      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80018e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ea:	0018      	movs	r0, r3
 80018ec:	2300      	movs	r3, #0
 80018ee:	0019      	movs	r1, r3
 80018f0:	4a16      	ldr	r2, [pc, #88]	; (800194c <HAL_RCC_GetSysClockFreq+0x140>)
 80018f2:	2300      	movs	r3, #0
 80018f4:	f7fe fcb4 	bl	8000260 <__aeabi_lmul>
 80018f8:	0002      	movs	r2, r0
 80018fa:	000b      	movs	r3, r1
 80018fc:	0010      	movs	r0, r2
 80018fe:	0019      	movs	r1, r3
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	001c      	movs	r4, r3
 8001904:	2300      	movs	r3, #0
 8001906:	001d      	movs	r5, r3
 8001908:	0022      	movs	r2, r4
 800190a:	002b      	movs	r3, r5
 800190c:	f7fe fc88 	bl	8000220 <__aeabi_uldivmod>
 8001910:	0002      	movs	r2, r0
 8001912:	000b      	movs	r3, r1
 8001914:	0013      	movs	r3, r2
 8001916:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800191a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800191c:	e00d      	b.n	800193a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_RCC_GetSysClockFreq+0x138>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	0b5b      	lsrs	r3, r3, #13
 8001924:	2207      	movs	r2, #7
 8001926:	4013      	ands	r3, r2
 8001928:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800192a:	6a3b      	ldr	r3, [r7, #32]
 800192c:	3301      	adds	r3, #1
 800192e:	2280      	movs	r2, #128	; 0x80
 8001930:	0212      	lsls	r2, r2, #8
 8001932:	409a      	lsls	r2, r3
 8001934:	0013      	movs	r3, r2
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001938:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800193a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800193c:	0018      	movs	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	b00e      	add	sp, #56	; 0x38
 8001942:	bdb0      	pop	{r4, r5, r7, pc}
 8001944:	40021000 	.word	0x40021000
 8001948:	003d0900 	.word	0x003d0900
 800194c:	00f42400 	.word	0x00f42400
 8001950:	007a1200 	.word	0x007a1200
 8001954:	08004bb0 	.word	0x08004bb0

08001958 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800195c:	4b02      	ldr	r3, [pc, #8]	; (8001968 <HAL_RCC_GetHCLKFreq+0x10>)
 800195e:	681b      	ldr	r3, [r3, #0]
}
 8001960:	0018      	movs	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	20000000 	.word	0x20000000

0800196c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001970:	f7ff fff2 	bl	8001958 <HAL_RCC_GetHCLKFreq>
 8001974:	0001      	movs	r1, r0
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	0a1b      	lsrs	r3, r3, #8
 800197c:	2207      	movs	r2, #7
 800197e:	4013      	ands	r3, r2
 8001980:	4a04      	ldr	r2, [pc, #16]	; (8001994 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001982:	5cd3      	ldrb	r3, [r2, r3]
 8001984:	40d9      	lsrs	r1, r3
 8001986:	000b      	movs	r3, r1
}
 8001988:	0018      	movs	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	40021000 	.word	0x40021000
 8001994:	08004ba8 	.word	0x08004ba8

08001998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800199c:	f7ff ffdc 	bl	8001958 <HAL_RCC_GetHCLKFreq>
 80019a0:	0001      	movs	r1, r0
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	0adb      	lsrs	r3, r3, #11
 80019a8:	2207      	movs	r2, #7
 80019aa:	4013      	ands	r3, r2
 80019ac:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80019ae:	5cd3      	ldrb	r3, [r2, r3]
 80019b0:	40d9      	lsrs	r1, r3
 80019b2:	000b      	movs	r3, r1
}
 80019b4:	0018      	movs	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	40021000 	.word	0x40021000
 80019c0:	08004ba8 	.word	0x08004ba8

080019c4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80019cc:	2017      	movs	r0, #23
 80019ce:	183b      	adds	r3, r7, r0
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2220      	movs	r2, #32
 80019da:	4013      	ands	r3, r2
 80019dc:	d100      	bne.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80019de:	e0c7      	b.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e0:	4b84      	ldr	r3, [pc, #528]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80019e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019e4:	2380      	movs	r3, #128	; 0x80
 80019e6:	055b      	lsls	r3, r3, #21
 80019e8:	4013      	ands	r3, r2
 80019ea:	d109      	bne.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ec:	4b81      	ldr	r3, [pc, #516]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80019ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019f0:	4b80      	ldr	r3, [pc, #512]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80019f2:	2180      	movs	r1, #128	; 0x80
 80019f4:	0549      	lsls	r1, r1, #21
 80019f6:	430a      	orrs	r2, r1
 80019f8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80019fa:	183b      	adds	r3, r7, r0
 80019fc:	2201      	movs	r2, #1
 80019fe:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a00:	4b7d      	ldr	r3, [pc, #500]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d11a      	bne.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a0c:	4b7a      	ldr	r3, [pc, #488]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b79      	ldr	r3, [pc, #484]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001a12:	2180      	movs	r1, #128	; 0x80
 8001a14:	0049      	lsls	r1, r1, #1
 8001a16:	430a      	orrs	r2, r1
 8001a18:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a1a:	f7fe ffd9 	bl	80009d0 <HAL_GetTick>
 8001a1e:	0003      	movs	r3, r0
 8001a20:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a22:	e008      	b.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a24:	f7fe ffd4 	bl	80009d0 <HAL_GetTick>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b64      	cmp	r3, #100	; 0x64
 8001a30:	d901      	bls.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e0d9      	b.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a36:	4b70      	ldr	r3, [pc, #448]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001a42:	4b6c      	ldr	r3, [pc, #432]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	23c0      	movs	r3, #192	; 0xc0
 8001a48:	039b      	lsls	r3, r3, #14
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	23c0      	movs	r3, #192	; 0xc0
 8001a54:	039b      	lsls	r3, r3, #14
 8001a56:	4013      	ands	r3, r2
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d013      	beq.n	8001a86 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	23c0      	movs	r3, #192	; 0xc0
 8001a64:	029b      	lsls	r3, r3, #10
 8001a66:	401a      	ands	r2, r3
 8001a68:	23c0      	movs	r3, #192	; 0xc0
 8001a6a:	029b      	lsls	r3, r3, #10
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d10a      	bne.n	8001a86 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001a70:	4b60      	ldr	r3, [pc, #384]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	029b      	lsls	r3, r3, #10
 8001a78:	401a      	ands	r2, r3
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	029b      	lsls	r3, r3, #10
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d101      	bne.n	8001a86 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e0b1      	b.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001a86:	4b5b      	ldr	r3, [pc, #364]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001a88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a8a:	23c0      	movs	r3, #192	; 0xc0
 8001a8c:	029b      	lsls	r3, r3, #10
 8001a8e:	4013      	ands	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d03b      	beq.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	23c0      	movs	r3, #192	; 0xc0
 8001a9e:	029b      	lsls	r3, r3, #10
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d033      	beq.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2220      	movs	r2, #32
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d02e      	beq.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001ab2:	4b50      	ldr	r3, [pc, #320]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ab6:	4a51      	ldr	r2, [pc, #324]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001abc:	4b4d      	ldr	r3, [pc, #308]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001abe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ac0:	4b4c      	ldr	r3, [pc, #304]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ac2:	2180      	movs	r1, #128	; 0x80
 8001ac4:	0309      	lsls	r1, r1, #12
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001aca:	4b4a      	ldr	r3, [pc, #296]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001acc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ace:	4b49      	ldr	r3, [pc, #292]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ad0:	494b      	ldr	r1, [pc, #300]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001ad2:	400a      	ands	r2, r1
 8001ad4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001ad6:	4b47      	ldr	r3, [pc, #284]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d014      	beq.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae6:	f7fe ff73 	bl	80009d0 <HAL_GetTick>
 8001aea:	0003      	movs	r3, r0
 8001aec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001aee:	e009      	b.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001af0:	f7fe ff6e 	bl	80009d0 <HAL_GetTick>
 8001af4:	0002      	movs	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	4a42      	ldr	r2, [pc, #264]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e072      	b.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b04:	4b3b      	ldr	r3, [pc, #236]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d0ef      	beq.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2220      	movs	r2, #32
 8001b16:	4013      	ands	r3, r2
 8001b18:	d01f      	beq.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	23c0      	movs	r3, #192	; 0xc0
 8001b20:	029b      	lsls	r3, r3, #10
 8001b22:	401a      	ands	r2, r3
 8001b24:	23c0      	movs	r3, #192	; 0xc0
 8001b26:	029b      	lsls	r3, r3, #10
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d10c      	bne.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8001b2c:	4b31      	ldr	r3, [pc, #196]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a35      	ldr	r2, [pc, #212]	; (8001c08 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001b32:	4013      	ands	r3, r2
 8001b34:	0019      	movs	r1, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	23c0      	movs	r3, #192	; 0xc0
 8001b3c:	039b      	lsls	r3, r3, #14
 8001b3e:	401a      	ands	r2, r3
 8001b40:	4b2c      	ldr	r3, [pc, #176]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b42:	430a      	orrs	r2, r1
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b48:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	23c0      	movs	r3, #192	; 0xc0
 8001b50:	029b      	lsls	r3, r3, #10
 8001b52:	401a      	ands	r2, r3
 8001b54:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b56:	430a      	orrs	r2, r1
 8001b58:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b5a:	2317      	movs	r3, #23
 8001b5c:	18fb      	adds	r3, r7, r3
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d105      	bne.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b64:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b68:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b6a:	4928      	ldr	r1, [pc, #160]	; (8001c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b6c:	400a      	ands	r2, r1
 8001b6e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2202      	movs	r2, #2
 8001b76:	4013      	ands	r3, r2
 8001b78:	d009      	beq.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7e:	220c      	movs	r2, #12
 8001b80:	4393      	bics	r3, r2
 8001b82:	0019      	movs	r1, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2204      	movs	r2, #4
 8001b94:	4013      	ands	r3, r2
 8001b96:	d009      	beq.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001b98:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9c:	4a1c      	ldr	r2, [pc, #112]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	0019      	movs	r1, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2208      	movs	r2, #8
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d009      	beq.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bba:	4a16      	ldr	r2, [pc, #88]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	0019      	movs	r1, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d009      	beq.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001bd4:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd8:	4a0f      	ldr	r2, [pc, #60]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	0019      	movs	r1, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001be4:	430a      	orrs	r2, r1
 8001be6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	0018      	movs	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	b006      	add	sp, #24
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40007000 	.word	0x40007000
 8001bfc:	fffcffff 	.word	0xfffcffff
 8001c00:	fff7ffff 	.word	0xfff7ffff
 8001c04:	00001388 	.word	0x00001388
 8001c08:	ffcfffff 	.word	0xffcfffff
 8001c0c:	efffffff 	.word	0xefffffff
 8001c10:	fffff3ff 	.word	0xfffff3ff
 8001c14:	ffffcfff 	.word	0xffffcfff
 8001c18:	fff3ffff 	.word	0xfff3ffff

08001c1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e044      	b.n	8001cb8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d107      	bne.n	8001c46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2278      	movs	r2, #120	; 0x78
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	0018      	movs	r0, r3
 8001c42:	f7fe fdbf 	bl	80007c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2224      	movs	r2, #36	; 0x24
 8001c4a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2101      	movs	r1, #1
 8001c58:	438a      	bics	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f000 f830 	bl	8001cc4 <UART_SetConfig>
 8001c64:	0003      	movs	r3, r0
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d101      	bne.n	8001c6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e024      	b.n	8001cb8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f000 fa6d 	bl	8002158 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	490d      	ldr	r1, [pc, #52]	; (8001cc0 <HAL_UART_Init+0xa4>)
 8001c8a:	400a      	ands	r2, r1
 8001c8c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	212a      	movs	r1, #42	; 0x2a
 8001c9a:	438a      	bics	r2, r1
 8001c9c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2101      	movs	r1, #1
 8001caa:	430a      	orrs	r2, r1
 8001cac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f000 fb05 	bl	80022c0 <UART_CheckIdleState>
 8001cb6:	0003      	movs	r3, r0
}
 8001cb8:	0018      	movs	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b002      	add	sp, #8
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	ffffb7ff 	.word	0xffffb7ff

08001cc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cc4:	b5b0      	push	{r4, r5, r7, lr}
 8001cc6:	b08e      	sub	sp, #56	; 0x38
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ccc:	231a      	movs	r3, #26
 8001cce:	2218      	movs	r2, #24
 8001cd0:	189b      	adds	r3, r3, r2
 8001cd2:	19db      	adds	r3, r3, r7
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4ab4      	ldr	r2, [pc, #720]	; (8001fc8 <UART_SetConfig+0x304>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d02:	430a      	orrs	r2, r1
 8001d04:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	4aaf      	ldr	r2, [pc, #700]	; (8001fcc <UART_SetConfig+0x308>)
 8001d0e:	4013      	ands	r3, r2
 8001d10:	0019      	movs	r1, r3
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4aa9      	ldr	r2, [pc, #676]	; (8001fd0 <UART_SetConfig+0x30c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d004      	beq.n	8001d38 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d34:	4313      	orrs	r3, r2
 8001d36:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	4aa5      	ldr	r2, [pc, #660]	; (8001fd4 <UART_SetConfig+0x310>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	0019      	movs	r1, r3
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4aa1      	ldr	r2, [pc, #644]	; (8001fd8 <UART_SetConfig+0x314>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d131      	bne.n	8001dbc <UART_SetConfig+0xf8>
 8001d58:	4ba0      	ldr	r3, [pc, #640]	; (8001fdc <UART_SetConfig+0x318>)
 8001d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5c:	220c      	movs	r2, #12
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b0c      	cmp	r3, #12
 8001d62:	d01d      	beq.n	8001da0 <UART_SetConfig+0xdc>
 8001d64:	d823      	bhi.n	8001dae <UART_SetConfig+0xea>
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d00c      	beq.n	8001d84 <UART_SetConfig+0xc0>
 8001d6a:	d820      	bhi.n	8001dae <UART_SetConfig+0xea>
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <UART_SetConfig+0xb2>
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d00e      	beq.n	8001d92 <UART_SetConfig+0xce>
 8001d74:	e01b      	b.n	8001dae <UART_SetConfig+0xea>
 8001d76:	231b      	movs	r3, #27
 8001d78:	2218      	movs	r2, #24
 8001d7a:	189b      	adds	r3, r3, r2
 8001d7c:	19db      	adds	r3, r3, r7
 8001d7e:	2200      	movs	r2, #0
 8001d80:	701a      	strb	r2, [r3, #0]
 8001d82:	e065      	b.n	8001e50 <UART_SetConfig+0x18c>
 8001d84:	231b      	movs	r3, #27
 8001d86:	2218      	movs	r2, #24
 8001d88:	189b      	adds	r3, r3, r2
 8001d8a:	19db      	adds	r3, r3, r7
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	701a      	strb	r2, [r3, #0]
 8001d90:	e05e      	b.n	8001e50 <UART_SetConfig+0x18c>
 8001d92:	231b      	movs	r3, #27
 8001d94:	2218      	movs	r2, #24
 8001d96:	189b      	adds	r3, r3, r2
 8001d98:	19db      	adds	r3, r3, r7
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	701a      	strb	r2, [r3, #0]
 8001d9e:	e057      	b.n	8001e50 <UART_SetConfig+0x18c>
 8001da0:	231b      	movs	r3, #27
 8001da2:	2218      	movs	r2, #24
 8001da4:	189b      	adds	r3, r3, r2
 8001da6:	19db      	adds	r3, r3, r7
 8001da8:	2208      	movs	r2, #8
 8001daa:	701a      	strb	r2, [r3, #0]
 8001dac:	e050      	b.n	8001e50 <UART_SetConfig+0x18c>
 8001dae:	231b      	movs	r3, #27
 8001db0:	2218      	movs	r2, #24
 8001db2:	189b      	adds	r3, r3, r2
 8001db4:	19db      	adds	r3, r3, r7
 8001db6:	2210      	movs	r2, #16
 8001db8:	701a      	strb	r2, [r3, #0]
 8001dba:	e049      	b.n	8001e50 <UART_SetConfig+0x18c>
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a83      	ldr	r2, [pc, #524]	; (8001fd0 <UART_SetConfig+0x30c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d13e      	bne.n	8001e44 <UART_SetConfig+0x180>
 8001dc6:	4b85      	ldr	r3, [pc, #532]	; (8001fdc <UART_SetConfig+0x318>)
 8001dc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dca:	23c0      	movs	r3, #192	; 0xc0
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	4013      	ands	r3, r2
 8001dd0:	22c0      	movs	r2, #192	; 0xc0
 8001dd2:	0112      	lsls	r2, r2, #4
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d027      	beq.n	8001e28 <UART_SetConfig+0x164>
 8001dd8:	22c0      	movs	r2, #192	; 0xc0
 8001dda:	0112      	lsls	r2, r2, #4
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d82a      	bhi.n	8001e36 <UART_SetConfig+0x172>
 8001de0:	2280      	movs	r2, #128	; 0x80
 8001de2:	0112      	lsls	r2, r2, #4
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d011      	beq.n	8001e0c <UART_SetConfig+0x148>
 8001de8:	2280      	movs	r2, #128	; 0x80
 8001dea:	0112      	lsls	r2, r2, #4
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d822      	bhi.n	8001e36 <UART_SetConfig+0x172>
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d004      	beq.n	8001dfe <UART_SetConfig+0x13a>
 8001df4:	2280      	movs	r2, #128	; 0x80
 8001df6:	00d2      	lsls	r2, r2, #3
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d00e      	beq.n	8001e1a <UART_SetConfig+0x156>
 8001dfc:	e01b      	b.n	8001e36 <UART_SetConfig+0x172>
 8001dfe:	231b      	movs	r3, #27
 8001e00:	2218      	movs	r2, #24
 8001e02:	189b      	adds	r3, r3, r2
 8001e04:	19db      	adds	r3, r3, r7
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
 8001e0a:	e021      	b.n	8001e50 <UART_SetConfig+0x18c>
 8001e0c:	231b      	movs	r3, #27
 8001e0e:	2218      	movs	r2, #24
 8001e10:	189b      	adds	r3, r3, r2
 8001e12:	19db      	adds	r3, r3, r7
 8001e14:	2202      	movs	r2, #2
 8001e16:	701a      	strb	r2, [r3, #0]
 8001e18:	e01a      	b.n	8001e50 <UART_SetConfig+0x18c>
 8001e1a:	231b      	movs	r3, #27
 8001e1c:	2218      	movs	r2, #24
 8001e1e:	189b      	adds	r3, r3, r2
 8001e20:	19db      	adds	r3, r3, r7
 8001e22:	2204      	movs	r2, #4
 8001e24:	701a      	strb	r2, [r3, #0]
 8001e26:	e013      	b.n	8001e50 <UART_SetConfig+0x18c>
 8001e28:	231b      	movs	r3, #27
 8001e2a:	2218      	movs	r2, #24
 8001e2c:	189b      	adds	r3, r3, r2
 8001e2e:	19db      	adds	r3, r3, r7
 8001e30:	2208      	movs	r2, #8
 8001e32:	701a      	strb	r2, [r3, #0]
 8001e34:	e00c      	b.n	8001e50 <UART_SetConfig+0x18c>
 8001e36:	231b      	movs	r3, #27
 8001e38:	2218      	movs	r2, #24
 8001e3a:	189b      	adds	r3, r3, r2
 8001e3c:	19db      	adds	r3, r3, r7
 8001e3e:	2210      	movs	r2, #16
 8001e40:	701a      	strb	r2, [r3, #0]
 8001e42:	e005      	b.n	8001e50 <UART_SetConfig+0x18c>
 8001e44:	231b      	movs	r3, #27
 8001e46:	2218      	movs	r2, #24
 8001e48:	189b      	adds	r3, r3, r2
 8001e4a:	19db      	adds	r3, r3, r7
 8001e4c:	2210      	movs	r2, #16
 8001e4e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a5e      	ldr	r2, [pc, #376]	; (8001fd0 <UART_SetConfig+0x30c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d000      	beq.n	8001e5c <UART_SetConfig+0x198>
 8001e5a:	e084      	b.n	8001f66 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8001e5c:	231b      	movs	r3, #27
 8001e5e:	2218      	movs	r2, #24
 8001e60:	189b      	adds	r3, r3, r2
 8001e62:	19db      	adds	r3, r3, r7
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d01d      	beq.n	8001ea6 <UART_SetConfig+0x1e2>
 8001e6a:	dc20      	bgt.n	8001eae <UART_SetConfig+0x1ea>
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d015      	beq.n	8001e9c <UART_SetConfig+0x1d8>
 8001e70:	dc1d      	bgt.n	8001eae <UART_SetConfig+0x1ea>
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <UART_SetConfig+0x1b8>
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d005      	beq.n	8001e86 <UART_SetConfig+0x1c2>
 8001e7a:	e018      	b.n	8001eae <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e7c:	f7ff fd76 	bl	800196c <HAL_RCC_GetPCLK1Freq>
 8001e80:	0003      	movs	r3, r0
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001e84:	e01c      	b.n	8001ec0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e86:	4b55      	ldr	r3, [pc, #340]	; (8001fdc <UART_SetConfig+0x318>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2210      	movs	r2, #16
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d002      	beq.n	8001e96 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8001e90:	4b53      	ldr	r3, [pc, #332]	; (8001fe0 <UART_SetConfig+0x31c>)
 8001e92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8001e94:	e014      	b.n	8001ec0 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8001e96:	4b53      	ldr	r3, [pc, #332]	; (8001fe4 <UART_SetConfig+0x320>)
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001e9a:	e011      	b.n	8001ec0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e9c:	f7ff fcb6 	bl	800180c <HAL_RCC_GetSysClockFreq>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001ea4:	e00c      	b.n	8001ec0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001ea6:	2380      	movs	r3, #128	; 0x80
 8001ea8:	021b      	lsls	r3, r3, #8
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001eac:	e008      	b.n	8001ec0 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8001eb2:	231a      	movs	r3, #26
 8001eb4:	2218      	movs	r2, #24
 8001eb6:	189b      	adds	r3, r3, r2
 8001eb8:	19db      	adds	r3, r3, r7
 8001eba:	2201      	movs	r2, #1
 8001ebc:	701a      	strb	r2, [r3, #0]
        break;
 8001ebe:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8001ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d100      	bne.n	8001ec8 <UART_SetConfig+0x204>
 8001ec6:	e12f      	b.n	8002128 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	0013      	movs	r3, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	189b      	adds	r3, r3, r2
 8001ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d305      	bcc.n	8001ee4 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8001ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d906      	bls.n	8001ef2 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8001ee4:	231a      	movs	r3, #26
 8001ee6:	2218      	movs	r2, #24
 8001ee8:	189b      	adds	r3, r3, r2
 8001eea:	19db      	adds	r3, r3, r7
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
 8001ef0:	e11a      	b.n	8002128 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8001ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	6939      	ldr	r1, [r7, #16]
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	000b      	movs	r3, r1
 8001f00:	0e1b      	lsrs	r3, r3, #24
 8001f02:	0010      	movs	r0, r2
 8001f04:	0205      	lsls	r5, r0, #8
 8001f06:	431d      	orrs	r5, r3
 8001f08:	000b      	movs	r3, r1
 8001f0a:	021c      	lsls	r4, r3, #8
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	085b      	lsrs	r3, r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68b8      	ldr	r0, [r7, #8]
 8001f1a:	68f9      	ldr	r1, [r7, #12]
 8001f1c:	1900      	adds	r0, r0, r4
 8001f1e:	4169      	adcs	r1, r5
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	603b      	str	r3, [r7, #0]
 8001f26:	2300      	movs	r3, #0
 8001f28:	607b      	str	r3, [r7, #4]
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f7fe f977 	bl	8000220 <__aeabi_uldivmod>
 8001f32:	0002      	movs	r2, r0
 8001f34:	000b      	movs	r3, r1
 8001f36:	0013      	movs	r3, r2
 8001f38:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f3c:	23c0      	movs	r3, #192	; 0xc0
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d309      	bcc.n	8001f58 <UART_SetConfig+0x294>
 8001f44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	035b      	lsls	r3, r3, #13
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d204      	bcs.n	8001f58 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	e0e7      	b.n	8002128 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8001f58:	231a      	movs	r3, #26
 8001f5a:	2218      	movs	r2, #24
 8001f5c:	189b      	adds	r3, r3, r2
 8001f5e:	19db      	adds	r3, r3, r7
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]
 8001f64:	e0e0      	b.n	8002128 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	69da      	ldr	r2, [r3, #28]
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d000      	beq.n	8001f74 <UART_SetConfig+0x2b0>
 8001f72:	e082      	b.n	800207a <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8001f74:	231b      	movs	r3, #27
 8001f76:	2218      	movs	r2, #24
 8001f78:	189b      	adds	r3, r3, r2
 8001f7a:	19db      	adds	r3, r3, r7
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d834      	bhi.n	8001fec <UART_SetConfig+0x328>
 8001f82:	009a      	lsls	r2, r3, #2
 8001f84:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <UART_SetConfig+0x324>)
 8001f86:	18d3      	adds	r3, r2, r3
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f8c:	f7ff fcee 	bl	800196c <HAL_RCC_GetPCLK1Freq>
 8001f90:	0003      	movs	r3, r0
 8001f92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001f94:	e033      	b.n	8001ffe <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001f96:	f7ff fcff 	bl	8001998 <HAL_RCC_GetPCLK2Freq>
 8001f9a:	0003      	movs	r3, r0
 8001f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001f9e:	e02e      	b.n	8001ffe <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fa0:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <UART_SetConfig+0x318>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2210      	movs	r2, #16
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d002      	beq.n	8001fb0 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8001faa:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <UART_SetConfig+0x31c>)
 8001fac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8001fae:	e026      	b.n	8001ffe <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <UART_SetConfig+0x320>)
 8001fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001fb4:	e023      	b.n	8001ffe <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001fb6:	f7ff fc29 	bl	800180c <HAL_RCC_GetSysClockFreq>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001fbe:	e01e      	b.n	8001ffe <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	021b      	lsls	r3, r3, #8
 8001fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001fc6:	e01a      	b.n	8001ffe <UART_SetConfig+0x33a>
 8001fc8:	efff69f3 	.word	0xefff69f3
 8001fcc:	ffffcfff 	.word	0xffffcfff
 8001fd0:	40004800 	.word	0x40004800
 8001fd4:	fffff4ff 	.word	0xfffff4ff
 8001fd8:	40004400 	.word	0x40004400
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	003d0900 	.word	0x003d0900
 8001fe4:	00f42400 	.word	0x00f42400
 8001fe8:	08004bbc 	.word	0x08004bbc
      default:
        pclk = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8001ff0:	231a      	movs	r3, #26
 8001ff2:	2218      	movs	r2, #24
 8001ff4:	189b      	adds	r3, r3, r2
 8001ff6:	19db      	adds	r3, r3, r7
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]
        break;
 8001ffc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002000:	2b00      	cmp	r3, #0
 8002002:	d100      	bne.n	8002006 <UART_SetConfig+0x342>
 8002004:	e090      	b.n	8002128 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002008:	005a      	lsls	r2, r3, #1
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	085b      	lsrs	r3, r3, #1
 8002010:	18d2      	adds	r2, r2, r3
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	0019      	movs	r1, r3
 8002018:	0010      	movs	r0, r2
 800201a:	f7fe f875 	bl	8000108 <__udivsi3>
 800201e:	0003      	movs	r3, r0
 8002020:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002024:	2b0f      	cmp	r3, #15
 8002026:	d921      	bls.n	800206c <UART_SetConfig+0x3a8>
 8002028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	025b      	lsls	r3, r3, #9
 800202e:	429a      	cmp	r2, r3
 8002030:	d21c      	bcs.n	800206c <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002034:	b29a      	uxth	r2, r3
 8002036:	200e      	movs	r0, #14
 8002038:	2418      	movs	r4, #24
 800203a:	1903      	adds	r3, r0, r4
 800203c:	19db      	adds	r3, r3, r7
 800203e:	210f      	movs	r1, #15
 8002040:	438a      	bics	r2, r1
 8002042:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002046:	085b      	lsrs	r3, r3, #1
 8002048:	b29b      	uxth	r3, r3
 800204a:	2207      	movs	r2, #7
 800204c:	4013      	ands	r3, r2
 800204e:	b299      	uxth	r1, r3
 8002050:	1903      	adds	r3, r0, r4
 8002052:	19db      	adds	r3, r3, r7
 8002054:	1902      	adds	r2, r0, r4
 8002056:	19d2      	adds	r2, r2, r7
 8002058:	8812      	ldrh	r2, [r2, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	1902      	adds	r2, r0, r4
 8002064:	19d2      	adds	r2, r2, r7
 8002066:	8812      	ldrh	r2, [r2, #0]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	e05d      	b.n	8002128 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 800206c:	231a      	movs	r3, #26
 800206e:	2218      	movs	r2, #24
 8002070:	189b      	adds	r3, r3, r2
 8002072:	19db      	adds	r3, r3, r7
 8002074:	2201      	movs	r2, #1
 8002076:	701a      	strb	r2, [r3, #0]
 8002078:	e056      	b.n	8002128 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 800207a:	231b      	movs	r3, #27
 800207c:	2218      	movs	r2, #24
 800207e:	189b      	adds	r3, r3, r2
 8002080:	19db      	adds	r3, r3, r7
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b08      	cmp	r3, #8
 8002086:	d822      	bhi.n	80020ce <UART_SetConfig+0x40a>
 8002088:	009a      	lsls	r2, r3, #2
 800208a:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <UART_SetConfig+0x484>)
 800208c:	18d3      	adds	r3, r2, r3
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002092:	f7ff fc6b 	bl	800196c <HAL_RCC_GetPCLK1Freq>
 8002096:	0003      	movs	r3, r0
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800209a:	e021      	b.n	80020e0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800209c:	f7ff fc7c 	bl	8001998 <HAL_RCC_GetPCLK2Freq>
 80020a0:	0003      	movs	r3, r0
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80020a4:	e01c      	b.n	80020e0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020a6:	4b29      	ldr	r3, [pc, #164]	; (800214c <UART_SetConfig+0x488>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2210      	movs	r2, #16
 80020ac:	4013      	ands	r3, r2
 80020ae:	d002      	beq.n	80020b6 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80020b0:	4b27      	ldr	r3, [pc, #156]	; (8002150 <UART_SetConfig+0x48c>)
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80020b4:	e014      	b.n	80020e0 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 80020b6:	4b27      	ldr	r3, [pc, #156]	; (8002154 <UART_SetConfig+0x490>)
 80020b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80020ba:	e011      	b.n	80020e0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80020bc:	f7ff fba6 	bl	800180c <HAL_RCC_GetSysClockFreq>
 80020c0:	0003      	movs	r3, r0
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80020c4:	e00c      	b.n	80020e0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80020c6:	2380      	movs	r3, #128	; 0x80
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80020cc:	e008      	b.n	80020e0 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80020d2:	231a      	movs	r3, #26
 80020d4:	2218      	movs	r2, #24
 80020d6:	189b      	adds	r3, r3, r2
 80020d8:	19db      	adds	r3, r3, r7
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
        break;
 80020de:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80020e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d020      	beq.n	8002128 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	085a      	lsrs	r2, r3, #1
 80020ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ee:	18d2      	adds	r2, r2, r3
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	0019      	movs	r1, r3
 80020f6:	0010      	movs	r0, r2
 80020f8:	f7fe f806 	bl	8000108 <__udivsi3>
 80020fc:	0003      	movs	r3, r0
 80020fe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002102:	2b0f      	cmp	r3, #15
 8002104:	d90a      	bls.n	800211c <UART_SetConfig+0x458>
 8002106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	025b      	lsls	r3, r3, #9
 800210c:	429a      	cmp	r2, r3
 800210e:	d205      	bcs.n	800211c <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002112:	b29a      	uxth	r2, r3
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	e005      	b.n	8002128 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 800211c:	231a      	movs	r3, #26
 800211e:	2218      	movs	r2, #24
 8002120:	189b      	adds	r3, r3, r2
 8002122:	19db      	adds	r3, r3, r7
 8002124:	2201      	movs	r2, #1
 8002126:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	2200      	movs	r2, #0
 800212c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	2200      	movs	r2, #0
 8002132:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002134:	231a      	movs	r3, #26
 8002136:	2218      	movs	r2, #24
 8002138:	189b      	adds	r3, r3, r2
 800213a:	19db      	adds	r3, r3, r7
 800213c:	781b      	ldrb	r3, [r3, #0]
}
 800213e:	0018      	movs	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	b00e      	add	sp, #56	; 0x38
 8002144:	bdb0      	pop	{r4, r5, r7, pc}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	08004be0 	.word	0x08004be0
 800214c:	40021000 	.word	0x40021000
 8002150:	003d0900 	.word	0x003d0900
 8002154:	00f42400 	.word	0x00f42400

08002158 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	2201      	movs	r2, #1
 8002166:	4013      	ands	r3, r2
 8002168:	d00b      	beq.n	8002182 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	4a4a      	ldr	r2, [pc, #296]	; (800229c <UART_AdvFeatureConfig+0x144>)
 8002172:	4013      	ands	r3, r2
 8002174:	0019      	movs	r1, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	2202      	movs	r2, #2
 8002188:	4013      	ands	r3, r2
 800218a:	d00b      	beq.n	80021a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	4a43      	ldr	r2, [pc, #268]	; (80022a0 <UART_AdvFeatureConfig+0x148>)
 8002194:	4013      	ands	r3, r2
 8002196:	0019      	movs	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	2204      	movs	r2, #4
 80021aa:	4013      	ands	r3, r2
 80021ac:	d00b      	beq.n	80021c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4a3b      	ldr	r2, [pc, #236]	; (80022a4 <UART_AdvFeatureConfig+0x14c>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	0019      	movs	r1, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	2208      	movs	r2, #8
 80021cc:	4013      	ands	r3, r2
 80021ce:	d00b      	beq.n	80021e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4a34      	ldr	r2, [pc, #208]	; (80022a8 <UART_AdvFeatureConfig+0x150>)
 80021d8:	4013      	ands	r3, r2
 80021da:	0019      	movs	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	2210      	movs	r2, #16
 80021ee:	4013      	ands	r3, r2
 80021f0:	d00b      	beq.n	800220a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	4a2c      	ldr	r2, [pc, #176]	; (80022ac <UART_AdvFeatureConfig+0x154>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	0019      	movs	r1, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	2220      	movs	r2, #32
 8002210:	4013      	ands	r3, r2
 8002212:	d00b      	beq.n	800222c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	4a25      	ldr	r2, [pc, #148]	; (80022b0 <UART_AdvFeatureConfig+0x158>)
 800221c:	4013      	ands	r3, r2
 800221e:	0019      	movs	r1, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	2240      	movs	r2, #64	; 0x40
 8002232:	4013      	ands	r3, r2
 8002234:	d01d      	beq.n	8002272 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	4a1d      	ldr	r2, [pc, #116]	; (80022b4 <UART_AdvFeatureConfig+0x15c>)
 800223e:	4013      	ands	r3, r2
 8002240:	0019      	movs	r1, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002252:	2380      	movs	r3, #128	; 0x80
 8002254:	035b      	lsls	r3, r3, #13
 8002256:	429a      	cmp	r2, r3
 8002258:	d10b      	bne.n	8002272 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4a15      	ldr	r2, [pc, #84]	; (80022b8 <UART_AdvFeatureConfig+0x160>)
 8002262:	4013      	ands	r3, r2
 8002264:	0019      	movs	r1, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002276:	2280      	movs	r2, #128	; 0x80
 8002278:	4013      	ands	r3, r2
 800227a:	d00b      	beq.n	8002294 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	4a0e      	ldr	r2, [pc, #56]	; (80022bc <UART_AdvFeatureConfig+0x164>)
 8002284:	4013      	ands	r3, r2
 8002286:	0019      	movs	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	605a      	str	r2, [r3, #4]
  }
}
 8002294:	46c0      	nop			; (mov r8, r8)
 8002296:	46bd      	mov	sp, r7
 8002298:	b002      	add	sp, #8
 800229a:	bd80      	pop	{r7, pc}
 800229c:	fffdffff 	.word	0xfffdffff
 80022a0:	fffeffff 	.word	0xfffeffff
 80022a4:	fffbffff 	.word	0xfffbffff
 80022a8:	ffff7fff 	.word	0xffff7fff
 80022ac:	ffffefff 	.word	0xffffefff
 80022b0:	ffffdfff 	.word	0xffffdfff
 80022b4:	ffefffff 	.word	0xffefffff
 80022b8:	ff9fffff 	.word	0xff9fffff
 80022bc:	fff7ffff 	.word	0xfff7ffff

080022c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b092      	sub	sp, #72	; 0x48
 80022c4:	af02      	add	r7, sp, #8
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2284      	movs	r2, #132	; 0x84
 80022cc:	2100      	movs	r1, #0
 80022ce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80022d0:	f7fe fb7e 	bl	80009d0 <HAL_GetTick>
 80022d4:	0003      	movs	r3, r0
 80022d6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2208      	movs	r2, #8
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d12c      	bne.n	8002340 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e8:	2280      	movs	r2, #128	; 0x80
 80022ea:	0391      	lsls	r1, r2, #14
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	4a46      	ldr	r2, [pc, #280]	; (8002408 <UART_CheckIdleState+0x148>)
 80022f0:	9200      	str	r2, [sp, #0]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f000 f88c 	bl	8002410 <UART_WaitOnFlagUntilTimeout>
 80022f8:	1e03      	subs	r3, r0, #0
 80022fa:	d021      	beq.n	8002340 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002304:	63bb      	str	r3, [r7, #56]	; 0x38
 8002306:	2301      	movs	r3, #1
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800230a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230c:	f383 8810 	msr	PRIMASK, r3
}
 8002310:	46c0      	nop			; (mov r8, r8)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2180      	movs	r1, #128	; 0x80
 800231e:	438a      	bics	r2, r1
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002328:	f383 8810 	msr	PRIMASK, r3
}
 800232c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2220      	movs	r2, #32
 8002332:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2278      	movs	r2, #120	; 0x78
 8002338:	2100      	movs	r1, #0
 800233a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e05f      	b.n	8002400 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2204      	movs	r2, #4
 8002348:	4013      	ands	r3, r2
 800234a:	2b04      	cmp	r3, #4
 800234c:	d146      	bne.n	80023dc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800234e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002350:	2280      	movs	r2, #128	; 0x80
 8002352:	03d1      	lsls	r1, r2, #15
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	4a2c      	ldr	r2, [pc, #176]	; (8002408 <UART_CheckIdleState+0x148>)
 8002358:	9200      	str	r2, [sp, #0]
 800235a:	2200      	movs	r2, #0
 800235c:	f000 f858 	bl	8002410 <UART_WaitOnFlagUntilTimeout>
 8002360:	1e03      	subs	r3, r0, #0
 8002362:	d03b      	beq.n	80023dc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002364:	f3ef 8310 	mrs	r3, PRIMASK
 8002368:	60fb      	str	r3, [r7, #12]
  return(result);
 800236a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800236c:	637b      	str	r3, [r7, #52]	; 0x34
 800236e:	2301      	movs	r3, #1
 8002370:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	f383 8810 	msr	PRIMASK, r3
}
 8002378:	46c0      	nop			; (mov r8, r8)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4921      	ldr	r1, [pc, #132]	; (800240c <UART_CheckIdleState+0x14c>)
 8002386:	400a      	ands	r2, r1
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800238c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f383 8810 	msr	PRIMASK, r3
}
 8002394:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002396:	f3ef 8310 	mrs	r3, PRIMASK
 800239a:	61bb      	str	r3, [r7, #24]
  return(result);
 800239c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800239e:	633b      	str	r3, [r7, #48]	; 0x30
 80023a0:	2301      	movs	r3, #1
 80023a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f383 8810 	msr	PRIMASK, r3
}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2101      	movs	r1, #1
 80023b8:	438a      	bics	r2, r1
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	f383 8810 	msr	PRIMASK, r3
}
 80023c6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2280      	movs	r2, #128	; 0x80
 80023cc:	2120      	movs	r1, #32
 80023ce:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2278      	movs	r2, #120	; 0x78
 80023d4:	2100      	movs	r1, #0
 80023d6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e011      	b.n	8002400 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2220      	movs	r2, #32
 80023e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2280      	movs	r2, #128	; 0x80
 80023e6:	2120      	movs	r1, #32
 80023e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2278      	movs	r2, #120	; 0x78
 80023fa:	2100      	movs	r1, #0
 80023fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	0018      	movs	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	b010      	add	sp, #64	; 0x40
 8002406:	bd80      	pop	{r7, pc}
 8002408:	01ffffff 	.word	0x01ffffff
 800240c:	fffffedf 	.word	0xfffffedf

08002410 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	1dfb      	adds	r3, r7, #7
 800241e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002420:	e04b      	b.n	80024ba <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	3301      	adds	r3, #1
 8002426:	d048      	beq.n	80024ba <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002428:	f7fe fad2 	bl	80009d0 <HAL_GetTick>
 800242c:	0002      	movs	r2, r0
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	429a      	cmp	r2, r3
 8002436:	d302      	bcc.n	800243e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e04b      	b.n	80024da <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2204      	movs	r2, #4
 800244a:	4013      	ands	r3, r2
 800244c:	d035      	beq.n	80024ba <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	2208      	movs	r2, #8
 8002456:	4013      	ands	r3, r2
 8002458:	2b08      	cmp	r3, #8
 800245a:	d111      	bne.n	8002480 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2208      	movs	r2, #8
 8002462:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	0018      	movs	r0, r3
 8002468:	f000 f83c 	bl	80024e4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2284      	movs	r2, #132	; 0x84
 8002470:	2108      	movs	r1, #8
 8002472:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2278      	movs	r2, #120	; 0x78
 8002478:	2100      	movs	r1, #0
 800247a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e02c      	b.n	80024da <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	69da      	ldr	r2, [r3, #28]
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	401a      	ands	r2, r3
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	429a      	cmp	r2, r3
 8002492:	d112      	bne.n	80024ba <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2280      	movs	r2, #128	; 0x80
 800249a:	0112      	lsls	r2, r2, #4
 800249c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	0018      	movs	r0, r3
 80024a2:	f000 f81f 	bl	80024e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2284      	movs	r2, #132	; 0x84
 80024aa:	2120      	movs	r1, #32
 80024ac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2278      	movs	r2, #120	; 0x78
 80024b2:	2100      	movs	r1, #0
 80024b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e00f      	b.n	80024da <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	4013      	ands	r3, r2
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	425a      	negs	r2, r3
 80024ca:	4153      	adcs	r3, r2
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	001a      	movs	r2, r3
 80024d0:	1dfb      	adds	r3, r7, #7
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d0a4      	beq.n	8002422 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	0018      	movs	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	b004      	add	sp, #16
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08e      	sub	sp, #56	; 0x38
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024ec:	f3ef 8310 	mrs	r3, PRIMASK
 80024f0:	617b      	str	r3, [r7, #20]
  return(result);
 80024f2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024f4:	637b      	str	r3, [r7, #52]	; 0x34
 80024f6:	2301      	movs	r3, #1
 80024f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	f383 8810 	msr	PRIMASK, r3
}
 8002500:	46c0      	nop			; (mov r8, r8)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4926      	ldr	r1, [pc, #152]	; (80025a8 <UART_EndRxTransfer+0xc4>)
 800250e:	400a      	ands	r2, r1
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002514:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	f383 8810 	msr	PRIMASK, r3
}
 800251c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800251e:	f3ef 8310 	mrs	r3, PRIMASK
 8002522:	623b      	str	r3, [r7, #32]
  return(result);
 8002524:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002526:	633b      	str	r3, [r7, #48]	; 0x30
 8002528:	2301      	movs	r3, #1
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	f383 8810 	msr	PRIMASK, r3
}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2101      	movs	r1, #1
 8002540:	438a      	bics	r2, r1
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254a:	f383 8810 	msr	PRIMASK, r3
}
 800254e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002554:	2b01      	cmp	r3, #1
 8002556:	d118      	bne.n	800258a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002558:	f3ef 8310 	mrs	r3, PRIMASK
 800255c:	60bb      	str	r3, [r7, #8]
  return(result);
 800255e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002562:	2301      	movs	r3, #1
 8002564:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f383 8810 	msr	PRIMASK, r3
}
 800256c:	46c0      	nop			; (mov r8, r8)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2110      	movs	r1, #16
 800257a:	438a      	bics	r2, r1
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002580:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	f383 8810 	msr	PRIMASK, r3
}
 8002588:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2280      	movs	r2, #128	; 0x80
 800258e:	2120      	movs	r1, #32
 8002590:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b00e      	add	sp, #56	; 0x38
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	fffffedf 	.word	0xfffffedf

080025ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80025b0:	46c0      	nop			; (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025be:	f3ef 8305 	mrs	r3, IPSR
 80025c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80025c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d109      	bne.n	80025de <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ca:	f3ef 8310 	mrs	r3, PRIMASK
 80025ce:	607b      	str	r3, [r7, #4]
  return(result);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d007      	beq.n	80025e6 <osKernelInitialize+0x2e>
 80025d6:	4b0d      	ldr	r3, [pc, #52]	; (800260c <osKernelInitialize+0x54>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d103      	bne.n	80025e6 <osKernelInitialize+0x2e>
    stat = osErrorISR;
 80025de:	2306      	movs	r3, #6
 80025e0:	425b      	negs	r3, r3
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	e00c      	b.n	8002600 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <osKernelInitialize+0x54>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d105      	bne.n	80025fa <osKernelInitialize+0x42>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80025ee:	4b07      	ldr	r3, [pc, #28]	; (800260c <osKernelInitialize+0x54>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	e002      	b.n	8002600 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 80025fa:	2301      	movs	r3, #1
 80025fc:	425b      	negs	r3, r3
 80025fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002600:	68fb      	ldr	r3, [r7, #12]
}
 8002602:	0018      	movs	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	b004      	add	sp, #16
 8002608:	bd80      	pop	{r7, pc}
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	200000c4 	.word	0x200000c4

08002610 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002616:	f3ef 8305 	mrs	r3, IPSR
 800261a:	60bb      	str	r3, [r7, #8]
  return(result);
 800261c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800261e:	2b00      	cmp	r3, #0
 8002620:	d109      	bne.n	8002636 <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002622:	f3ef 8310 	mrs	r3, PRIMASK
 8002626:	607b      	str	r3, [r7, #4]
  return(result);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d007      	beq.n	800263e <osKernelStart+0x2e>
 800262e:	4b0f      	ldr	r3, [pc, #60]	; (800266c <osKernelStart+0x5c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d103      	bne.n	800263e <osKernelStart+0x2e>
    stat = osErrorISR;
 8002636:	2306      	movs	r3, #6
 8002638:	425b      	negs	r3, r3
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	e010      	b.n	8002660 <osKernelStart+0x50>
  }
  else {
    if (KernelState == osKernelReady) {
 800263e:	4b0b      	ldr	r3, [pc, #44]	; (800266c <osKernelStart+0x5c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d109      	bne.n	800265a <osKernelStart+0x4a>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002646:	f7ff ffb1 	bl	80025ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800264a:	4b08      	ldr	r3, [pc, #32]	; (800266c <osKernelStart+0x5c>)
 800264c:	2202      	movs	r2, #2
 800264e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002650:	f000 ff86 	bl	8003560 <vTaskStartScheduler>
      stat = osOK;
 8002654:	2300      	movs	r3, #0
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	e002      	b.n	8002660 <osKernelStart+0x50>
    } else {
      stat = osError;
 800265a:	2301      	movs	r3, #1
 800265c:	425b      	negs	r3, r3
 800265e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002660:	68fb      	ldr	r3, [r7, #12]
}
 8002662:	0018      	movs	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	b004      	add	sp, #16
 8002668:	bd80      	pop	{r7, pc}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	200000c4 	.word	0x200000c4

08002670 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002670:	b5b0      	push	{r4, r5, r7, lr}
 8002672:	b090      	sub	sp, #64	; 0x40
 8002674:	af04      	add	r7, sp, #16
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002680:	f3ef 8305 	mrs	r3, IPSR
 8002684:	61fb      	str	r3, [r7, #28]
  return(result);
 8002686:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002688:	2b00      	cmp	r3, #0
 800268a:	d000      	beq.n	800268e <osThreadNew+0x1e>
 800268c:	e08c      	b.n	80027a8 <osThreadNew+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800268e:	f3ef 8310 	mrs	r3, PRIMASK
 8002692:	61bb      	str	r3, [r7, #24]
  return(result);
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d004      	beq.n	80026a4 <osThreadNew+0x34>
 800269a:	4b46      	ldr	r3, [pc, #280]	; (80027b4 <osThreadNew+0x144>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d100      	bne.n	80026a4 <osThreadNew+0x34>
 80026a2:	e081      	b.n	80027a8 <osThreadNew+0x138>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d100      	bne.n	80026ac <osThreadNew+0x3c>
 80026aa:	e07d      	b.n	80027a8 <osThreadNew+0x138>
    stack = configMINIMAL_STACK_SIZE;
 80026ac:	2380      	movs	r3, #128	; 0x80
 80026ae:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80026b0:	2318      	movs	r3, #24
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80026b8:	2301      	movs	r3, #1
 80026ba:	425b      	negs	r3, r3
 80026bc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d044      	beq.n	800274e <osThreadNew+0xde>
      if (attr->name != NULL) {
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <osThreadNew+0x62>
        name = attr->name;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <osThreadNew+0x70>
        prio = (UBaseType_t)attr->priority;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d007      	beq.n	80026f6 <osThreadNew+0x86>
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	2b38      	cmp	r3, #56	; 0x38
 80026ea:	d804      	bhi.n	80026f6 <osThreadNew+0x86>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	4013      	ands	r3, r2
 80026f4:	d001      	beq.n	80026fa <osThreadNew+0x8a>
        return (NULL);
 80026f6:	2300      	movs	r3, #0
 80026f8:	e057      	b.n	80027aa <osThreadNew+0x13a>
      }

      if (attr->stack_size > 0U) {
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <osThreadNew+0x9a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	089b      	lsrs	r3, r3, #2
 8002708:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00e      	beq.n	8002730 <osThreadNew+0xc0>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2b5b      	cmp	r3, #91	; 0x5b
 8002718:	d90a      	bls.n	8002730 <osThreadNew+0xc0>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800271e:	2b00      	cmp	r3, #0
 8002720:	d006      	beq.n	8002730 <osThreadNew+0xc0>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <osThreadNew+0xc0>
        mem = 1;
 800272a:	2301      	movs	r3, #1
 800272c:	623b      	str	r3, [r7, #32]
 800272e:	e010      	b.n	8002752 <osThreadNew+0xe2>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10c      	bne.n	8002752 <osThreadNew+0xe2>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d108      	bne.n	8002752 <osThreadNew+0xe2>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d104      	bne.n	8002752 <osThreadNew+0xe2>
          mem = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	623b      	str	r3, [r7, #32]
 800274c:	e001      	b.n	8002752 <osThreadNew+0xe2>
        }
      }
    }
    else {
      mem = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d112      	bne.n	800277e <osThreadNew+0x10e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002760:	68bd      	ldr	r5, [r7, #8]
 8002762:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002764:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	9302      	str	r3, [sp, #8]
 800276a:	9201      	str	r2, [sp, #4]
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	002b      	movs	r3, r5
 8002772:	0022      	movs	r2, r4
 8002774:	f000 fd4b 	bl	800320e <xTaskCreateStatic>
 8002778:	0003      	movs	r3, r0
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	e014      	b.n	80027a8 <osThreadNew+0x138>
    }
    else {
      if (mem == 0) {
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d111      	bne.n	80027a8 <osThreadNew+0x138>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002786:	b29a      	uxth	r2, r3
 8002788:	68bc      	ldr	r4, [r7, #8]
 800278a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	2314      	movs	r3, #20
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	9301      	str	r3, [sp, #4]
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	0023      	movs	r3, r4
 800279a:	f000 fd7c 	bl	8003296 <xTaskCreate>
 800279e:	0003      	movs	r3, r0
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d001      	beq.n	80027a8 <osThreadNew+0x138>
          hTask = NULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80027a8:	697b      	ldr	r3, [r7, #20]
}
 80027aa:	0018      	movs	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	b00c      	add	sp, #48	; 0x30
 80027b0:	bdb0      	pop	{r4, r5, r7, pc}
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	200000c4 	.word	0x200000c4

080027b8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027c0:	f3ef 8305 	mrs	r3, IPSR
 80027c4:	613b      	str	r3, [r7, #16]
  return(result);
 80027c6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d109      	bne.n	80027e0 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027cc:	f3ef 8310 	mrs	r3, PRIMASK
 80027d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d007      	beq.n	80027e8 <osDelay+0x30>
 80027d8:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <osDelay+0x4c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d103      	bne.n	80027e8 <osDelay+0x30>
    stat = osErrorISR;
 80027e0:	2306      	movs	r3, #6
 80027e2:	425b      	negs	r3, r3
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	e008      	b.n	80027fa <osDelay+0x42>
  }
  else {
    stat = osOK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <osDelay+0x42>
      vTaskDelay(ticks);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	0018      	movs	r0, r3
 80027f6:	f000 fe8d 	bl	8003514 <vTaskDelay>
    }
  }

  return (stat);
 80027fa:	697b      	ldr	r3, [r7, #20]
}
 80027fc:	0018      	movs	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	b006      	add	sp, #24
 8002802:	bd80      	pop	{r7, pc}
 8002804:	200000c4 	.word	0x200000c4

08002808 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4a06      	ldr	r2, [pc, #24]	; (8002830 <vApplicationGetIdleTaskMemory+0x28>)
 8002818:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	4a05      	ldr	r2, [pc, #20]	; (8002834 <vApplicationGetIdleTaskMemory+0x2c>)
 800281e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2280      	movs	r2, #128	; 0x80
 8002824:	601a      	str	r2, [r3, #0]
}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	46bd      	mov	sp, r7
 800282a:	b004      	add	sp, #16
 800282c:	bd80      	pop	{r7, pc}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	200000c8 	.word	0x200000c8
 8002834:	20000124 	.word	0x20000124

08002838 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4a06      	ldr	r2, [pc, #24]	; (8002860 <vApplicationGetTimerTaskMemory+0x28>)
 8002848:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	4a05      	ldr	r2, [pc, #20]	; (8002864 <vApplicationGetTimerTaskMemory+0x2c>)
 800284e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2280      	movs	r2, #128	; 0x80
 8002854:	0052      	lsls	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]
}
 8002858:	46c0      	nop			; (mov r8, r8)
 800285a:	46bd      	mov	sp, r7
 800285c:	b004      	add	sp, #16
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20000324 	.word	0x20000324
 8002864:	20000380 	.word	0x20000380

08002868 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3308      	adds	r3, #8
 8002874:	001a      	movs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	4252      	negs	r2, r2
 8002880:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3308      	adds	r3, #8
 8002886:	001a      	movs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3308      	adds	r3, #8
 8002890:	001a      	movs	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800289c:	46c0      	nop			; (mov r8, r8)
 800289e:	46bd      	mov	sp, r7
 80028a0:	b002      	add	sp, #8
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	46bd      	mov	sp, r7
 80028b6:	b002      	add	sp, #8
 80028b8:	bd80      	pop	{r7, pc}

080028ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	601a      	str	r2, [r3, #0]
}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b004      	add	sp, #16
 80028fc:	bd80      	pop	{r7, pc}

080028fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b084      	sub	sp, #16
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	3301      	adds	r3, #1
 8002912:	d103      	bne.n	800291c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	e00c      	b.n	8002936 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3308      	adds	r3, #8
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	e002      	b.n	800292a <vListInsert+0x2c>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	429a      	cmp	r2, r3
 8002934:	d2f6      	bcs.n	8002924 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	601a      	str	r2, [r3, #0]
}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	46bd      	mov	sp, r7
 8002966:	b004      	add	sp, #16
 8002968:	bd80      	pop	{r7, pc}

0800296a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b084      	sub	sp, #16
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6892      	ldr	r2, [r2, #8]
 8002980:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6852      	ldr	r2, [r2, #4]
 800298a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	429a      	cmp	r2, r3
 8002994:	d103      	bne.n	800299e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	1e5a      	subs	r2, r3, #1
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
}
 80029b2:	0018      	movs	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	b004      	add	sp, #16
 80029b8:	bd80      	pop	{r7, pc}

080029ba <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b084      	sub	sp, #16
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <xQueueGenericReset+0x18>
 80029ce:	b672      	cpsid	i
 80029d0:	e7fe      	b.n	80029d0 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80029d2:	f001 fe0d 	bl	80045f0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	434b      	muls	r3, r1
 80029e4:	18d2      	adds	r2, r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a00:	1e59      	subs	r1, r3, #1
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	434b      	muls	r3, r1
 8002a08:	18d2      	adds	r2, r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2244      	movs	r2, #68	; 0x44
 8002a12:	21ff      	movs	r1, #255	; 0xff
 8002a14:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2245      	movs	r2, #69	; 0x45
 8002a1a:	21ff      	movs	r1, #255	; 0xff
 8002a1c:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10d      	bne.n	8002a40 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d013      	beq.n	8002a54 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	3310      	adds	r3, #16
 8002a30:	0018      	movs	r0, r3
 8002a32:	f000 ffd5 	bl	80039e0 <xTaskRemoveFromEventList>
 8002a36:	1e03      	subs	r3, r0, #0
 8002a38:	d00c      	beq.n	8002a54 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a3a:	f001 fdc9 	bl	80045d0 <vPortYield>
 8002a3e:	e009      	b.n	8002a54 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	3310      	adds	r3, #16
 8002a44:	0018      	movs	r0, r3
 8002a46:	f7ff ff0f 	bl	8002868 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	3324      	adds	r3, #36	; 0x24
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f7ff ff0a 	bl	8002868 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a54:	f001 fdde 	bl	8004614 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a58:	2301      	movs	r3, #1
}
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	b004      	add	sp, #16
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a62:	b590      	push	{r4, r7, lr}
 8002a64:	b089      	sub	sp, #36	; 0x24
 8002a66:	af02      	add	r7, sp, #8
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <xQueueGenericCreateStatic+0x18>
 8002a76:	b672      	cpsid	i
 8002a78:	e7fe      	b.n	8002a78 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <xQueueGenericCreateStatic+0x22>
 8002a80:	b672      	cpsid	i
 8002a82:	e7fe      	b.n	8002a82 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <xQueueGenericCreateStatic+0x2e>
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <xQueueGenericCreateStatic+0x32>
 8002a90:	2301      	movs	r3, #1
 8002a92:	e000      	b.n	8002a96 <xQueueGenericCreateStatic+0x34>
 8002a94:	2300      	movs	r3, #0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <xQueueGenericCreateStatic+0x3c>
 8002a9a:	b672      	cpsid	i
 8002a9c:	e7fe      	b.n	8002a9c <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d102      	bne.n	8002aaa <xQueueGenericCreateStatic+0x48>
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <xQueueGenericCreateStatic+0x4c>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <xQueueGenericCreateStatic+0x4e>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <xQueueGenericCreateStatic+0x56>
 8002ab4:	b672      	cpsid	i
 8002ab6:	e7fe      	b.n	8002ab6 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ab8:	2350      	movs	r3, #80	; 0x50
 8002aba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	2b50      	cmp	r3, #80	; 0x50
 8002ac0:	d001      	beq.n	8002ac6 <xQueueGenericCreateStatic+0x64>
 8002ac2:	b672      	cpsid	i
 8002ac4:	e7fe      	b.n	8002ac4 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ac6:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00e      	beq.n	8002af0 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2246      	movs	r2, #70	; 0x46
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ada:	2328      	movs	r3, #40	; 0x28
 8002adc:	18fb      	adds	r3, r7, r3
 8002ade:	781c      	ldrb	r4, [r3, #0]
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	68b9      	ldr	r1, [r7, #8]
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	0023      	movs	r3, r4
 8002aec:	f000 f805 	bl	8002afa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002af0:	697b      	ldr	r3, [r7, #20]
	}
 8002af2:	0018      	movs	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	b007      	add	sp, #28
 8002af8:	bd90      	pop	{r4, r7, pc}

08002afa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b084      	sub	sp, #16
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	607a      	str	r2, [r7, #4]
 8002b06:	001a      	movs	r2, r3
 8002b08:	1cfb      	adds	r3, r7, #3
 8002b0a:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d103      	bne.n	8002b1a <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	e002      	b.n	8002b20 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	2101      	movs	r1, #1
 8002b30:	0018      	movs	r0, r3
 8002b32:	f7ff ff42 	bl	80029ba <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	1cfa      	adds	r2, r7, #3
 8002b3a:	214c      	movs	r1, #76	; 0x4c
 8002b3c:	7812      	ldrb	r2, [r2, #0]
 8002b3e:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b40:	46c0      	nop			; (mov r8, r8)
 8002b42:	46bd      	mov	sp, r7
 8002b44:	b004      	add	sp, #16
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08a      	sub	sp, #40	; 0x28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
 8002b54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b56:	2300      	movs	r3, #0
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <xQueueGenericSend+0x20>
 8002b64:	b672      	cpsid	i
 8002b66:	e7fe      	b.n	8002b66 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d103      	bne.n	8002b76 <xQueueGenericSend+0x2e>
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <xQueueGenericSend+0x32>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <xQueueGenericSend+0x34>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <xQueueGenericSend+0x3c>
 8002b80:	b672      	cpsid	i
 8002b82:	e7fe      	b.n	8002b82 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d103      	bne.n	8002b92 <xQueueGenericSend+0x4a>
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <xQueueGenericSend+0x4e>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <xQueueGenericSend+0x50>
 8002b96:	2300      	movs	r3, #0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <xQueueGenericSend+0x58>
 8002b9c:	b672      	cpsid	i
 8002b9e:	e7fe      	b.n	8002b9e <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ba0:	f001 f8b0 	bl	8003d04 <xTaskGetSchedulerState>
 8002ba4:	1e03      	subs	r3, r0, #0
 8002ba6:	d102      	bne.n	8002bae <xQueueGenericSend+0x66>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <xQueueGenericSend+0x6a>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <xQueueGenericSend+0x6c>
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <xQueueGenericSend+0x74>
 8002bb8:	b672      	cpsid	i
 8002bba:	e7fe      	b.n	8002bba <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bbc:	f001 fd18 	bl	80045f0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d302      	bcc.n	8002bd2 <xQueueGenericSend+0x8a>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d11e      	bne.n	8002c10 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	68b9      	ldr	r1, [r7, #8]
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f000 f99f 	bl	8002f1c <prvCopyDataToQueue>
 8002bde:	0003      	movs	r3, r0
 8002be0:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d009      	beq.n	8002bfe <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	3324      	adds	r3, #36	; 0x24
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f000 fef6 	bl	80039e0 <xTaskRemoveFromEventList>
 8002bf4:	1e03      	subs	r3, r0, #0
 8002bf6:	d007      	beq.n	8002c08 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002bf8:	f001 fcea 	bl	80045d0 <vPortYield>
 8002bfc:	e004      	b.n	8002c08 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c04:	f001 fce4 	bl	80045d0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c08:	f001 fd04 	bl	8004614 <vPortExitCritical>
				return pdPASS;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e05b      	b.n	8002cc8 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d103      	bne.n	8002c1e <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c16:	f001 fcfd 	bl	8004614 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	e054      	b.n	8002cc8 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d106      	bne.n	8002c32 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c24:	2314      	movs	r3, #20
 8002c26:	18fb      	adds	r3, r7, r3
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f000 ff35 	bl	8003a98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c32:	f001 fcef 	bl	8004614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c36:	f000 fce7 	bl	8003608 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c3a:	f001 fcd9 	bl	80045f0 <vPortEnterCritical>
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	2244      	movs	r2, #68	; 0x44
 8002c42:	5c9b      	ldrb	r3, [r3, r2]
 8002c44:	b25b      	sxtb	r3, r3
 8002c46:	3301      	adds	r3, #1
 8002c48:	d103      	bne.n	8002c52 <xQueueGenericSend+0x10a>
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	2244      	movs	r2, #68	; 0x44
 8002c4e:	2100      	movs	r1, #0
 8002c50:	5499      	strb	r1, [r3, r2]
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	2245      	movs	r2, #69	; 0x45
 8002c56:	5c9b      	ldrb	r3, [r3, r2]
 8002c58:	b25b      	sxtb	r3, r3
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	d103      	bne.n	8002c66 <xQueueGenericSend+0x11e>
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	2245      	movs	r2, #69	; 0x45
 8002c62:	2100      	movs	r1, #0
 8002c64:	5499      	strb	r1, [r3, r2]
 8002c66:	f001 fcd5 	bl	8004614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c6a:	1d3a      	adds	r2, r7, #4
 8002c6c:	2314      	movs	r3, #20
 8002c6e:	18fb      	adds	r3, r7, r3
 8002c70:	0011      	movs	r1, r2
 8002c72:	0018      	movs	r0, r3
 8002c74:	f000 ff24 	bl	8003ac0 <xTaskCheckForTimeOut>
 8002c78:	1e03      	subs	r3, r0, #0
 8002c7a:	d11e      	bne.n	8002cba <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f000 fa51 	bl	8003126 <prvIsQueueFull>
 8002c84:	1e03      	subs	r3, r0, #0
 8002c86:	d011      	beq.n	8002cac <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	3310      	adds	r3, #16
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	0011      	movs	r1, r2
 8002c90:	0018      	movs	r0, r3
 8002c92:	f000 fe61 	bl	8003958 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f000 f9d0 	bl	800303e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c9e:	f000 fcbf 	bl	8003620 <xTaskResumeAll>
 8002ca2:	1e03      	subs	r3, r0, #0
 8002ca4:	d18a      	bne.n	8002bbc <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8002ca6:	f001 fc93 	bl	80045d0 <vPortYield>
 8002caa:	e787      	b.n	8002bbc <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f000 f9c5 	bl	800303e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cb4:	f000 fcb4 	bl	8003620 <xTaskResumeAll>
 8002cb8:	e780      	b.n	8002bbc <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f000 f9be 	bl	800303e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cc2:	f000 fcad 	bl	8003620 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002cc6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002cc8:	0018      	movs	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b00a      	add	sp, #40	; 0x28
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002cd0:	b590      	push	{r4, r7, lr}
 8002cd2:	b089      	sub	sp, #36	; 0x24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
 8002cdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <xQueueGenericSendFromISR+0x1c>
 8002ce8:	b672      	cpsid	i
 8002cea:	e7fe      	b.n	8002cea <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d103      	bne.n	8002cfa <xQueueGenericSendFromISR+0x2a>
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <xQueueGenericSendFromISR+0x2e>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <xQueueGenericSendFromISR+0x30>
 8002cfe:	2300      	movs	r3, #0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <xQueueGenericSendFromISR+0x38>
 8002d04:	b672      	cpsid	i
 8002d06:	e7fe      	b.n	8002d06 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d103      	bne.n	8002d16 <xQueueGenericSendFromISR+0x46>
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <xQueueGenericSendFromISR+0x4a>
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <xQueueGenericSendFromISR+0x4c>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <xQueueGenericSendFromISR+0x54>
 8002d20:	b672      	cpsid	i
 8002d22:	e7fe      	b.n	8002d22 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d24:	f001 fc8e 	bl	8004644 <ulSetInterruptMaskFromISR>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d302      	bcc.n	8002d3e <xQueueGenericSendFromISR+0x6e>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d12e      	bne.n	8002d9c <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d3e:	2413      	movs	r4, #19
 8002d40:	193b      	adds	r3, r7, r4
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	2145      	movs	r1, #69	; 0x45
 8002d46:	5c52      	ldrb	r2, [r2, r1]
 8002d48:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	68b9      	ldr	r1, [r7, #8]
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	0018      	movs	r0, r3
 8002d52:	f000 f8e3 	bl	8002f1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d56:	193b      	adds	r3, r7, r4
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	b25b      	sxtb	r3, r3
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	d111      	bne.n	8002d84 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d016      	beq.n	8002d96 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	3324      	adds	r3, #36	; 0x24
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f000 fe37 	bl	80039e0 <xTaskRemoveFromEventList>
 8002d72:	1e03      	subs	r3, r0, #0
 8002d74:	d00f      	beq.n	8002d96 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00c      	beq.n	8002d96 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	e008      	b.n	8002d96 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d84:	2313      	movs	r3, #19
 8002d86:	18fb      	adds	r3, r7, r3
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	b259      	sxtb	r1, r3
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	2245      	movs	r2, #69	; 0x45
 8002d94:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8002d96:	2301      	movs	r3, #1
 8002d98:	61fb      	str	r3, [r7, #28]
		{
 8002d9a:	e001      	b.n	8002da0 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	0018      	movs	r0, r3
 8002da4:	f001 fc54 	bl	8004650 <vClearInterruptMaskFromISR>

	return xReturn;
 8002da8:	69fb      	ldr	r3, [r7, #28]
}
 8002daa:	0018      	movs	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b009      	add	sp, #36	; 0x24
 8002db0:	bd90      	pop	{r4, r7, pc}

08002db2 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b08a      	sub	sp, #40	; 0x28
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <xQueueReceive+0x1e>
 8002dcc:	b672      	cpsid	i
 8002dce:	e7fe      	b.n	8002dce <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d103      	bne.n	8002dde <xQueueReceive+0x2c>
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <xQueueReceive+0x30>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <xQueueReceive+0x32>
 8002de2:	2300      	movs	r3, #0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <xQueueReceive+0x3a>
 8002de8:	b672      	cpsid	i
 8002dea:	e7fe      	b.n	8002dea <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dec:	f000 ff8a 	bl	8003d04 <xTaskGetSchedulerState>
 8002df0:	1e03      	subs	r3, r0, #0
 8002df2:	d102      	bne.n	8002dfa <xQueueReceive+0x48>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <xQueueReceive+0x4c>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <xQueueReceive+0x4e>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <xQueueReceive+0x56>
 8002e04:	b672      	cpsid	i
 8002e06:	e7fe      	b.n	8002e06 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e08:	f001 fbf2 	bl	80045f0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e10:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d01a      	beq.n	8002e4e <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	0011      	movs	r1, r2
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f000 f8e7 	bl	8002ff2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	1e5a      	subs	r2, r3, #1
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	3310      	adds	r3, #16
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f000 fdd1 	bl	80039e0 <xTaskRemoveFromEventList>
 8002e3e:	1e03      	subs	r3, r0, #0
 8002e40:	d001      	beq.n	8002e46 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e42:	f001 fbc5 	bl	80045d0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e46:	f001 fbe5 	bl	8004614 <vPortExitCritical>
				return pdPASS;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e062      	b.n	8002f14 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d103      	bne.n	8002e5c <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e54:	f001 fbde 	bl	8004614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	e05b      	b.n	8002f14 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e62:	2314      	movs	r3, #20
 8002e64:	18fb      	adds	r3, r7, r3
 8002e66:	0018      	movs	r0, r3
 8002e68:	f000 fe16 	bl	8003a98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e70:	f001 fbd0 	bl	8004614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e74:	f000 fbc8 	bl	8003608 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e78:	f001 fbba 	bl	80045f0 <vPortEnterCritical>
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	2244      	movs	r2, #68	; 0x44
 8002e80:	5c9b      	ldrb	r3, [r3, r2]
 8002e82:	b25b      	sxtb	r3, r3
 8002e84:	3301      	adds	r3, #1
 8002e86:	d103      	bne.n	8002e90 <xQueueReceive+0xde>
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	2244      	movs	r2, #68	; 0x44
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	5499      	strb	r1, [r3, r2]
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	2245      	movs	r2, #69	; 0x45
 8002e94:	5c9b      	ldrb	r3, [r3, r2]
 8002e96:	b25b      	sxtb	r3, r3
 8002e98:	3301      	adds	r3, #1
 8002e9a:	d103      	bne.n	8002ea4 <xQueueReceive+0xf2>
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	2245      	movs	r2, #69	; 0x45
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	5499      	strb	r1, [r3, r2]
 8002ea4:	f001 fbb6 	bl	8004614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ea8:	1d3a      	adds	r2, r7, #4
 8002eaa:	2314      	movs	r3, #20
 8002eac:	18fb      	adds	r3, r7, r3
 8002eae:	0011      	movs	r1, r2
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f000 fe05 	bl	8003ac0 <xTaskCheckForTimeOut>
 8002eb6:	1e03      	subs	r3, r0, #0
 8002eb8:	d11e      	bne.n	8002ef8 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f000 f91c 	bl	80030fa <prvIsQueueEmpty>
 8002ec2:	1e03      	subs	r3, r0, #0
 8002ec4:	d011      	beq.n	8002eea <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	3324      	adds	r3, #36	; 0x24
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	0011      	movs	r1, r2
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f000 fd42 	bl	8003958 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f000 f8b1 	bl	800303e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002edc:	f000 fba0 	bl	8003620 <xTaskResumeAll>
 8002ee0:	1e03      	subs	r3, r0, #0
 8002ee2:	d191      	bne.n	8002e08 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8002ee4:	f001 fb74 	bl	80045d0 <vPortYield>
 8002ee8:	e78e      	b.n	8002e08 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	0018      	movs	r0, r3
 8002eee:	f000 f8a6 	bl	800303e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ef2:	f000 fb95 	bl	8003620 <xTaskResumeAll>
 8002ef6:	e787      	b.n	8002e08 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	0018      	movs	r0, r3
 8002efc:	f000 f89f 	bl	800303e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f00:	f000 fb8e 	bl	8003620 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	0018      	movs	r0, r3
 8002f08:	f000 f8f7 	bl	80030fa <prvIsQueueEmpty>
 8002f0c:	1e03      	subs	r3, r0, #0
 8002f0e:	d100      	bne.n	8002f12 <xQueueReceive+0x160>
 8002f10:	e77a      	b.n	8002e08 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f12:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f14:	0018      	movs	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b00a      	add	sp, #40	; 0x28
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10e      	bne.n	8002f58 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d14e      	bne.n	8002fe0 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	0018      	movs	r0, r3
 8002f48:	f000 fef8 	bl	8003d3c <xTaskPriorityDisinherit>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	609a      	str	r2, [r3, #8]
 8002f56:	e043      	b.n	8002fe0 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d119      	bne.n	8002f92 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6858      	ldr	r0, [r3, #4]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	0019      	movs	r1, r3
 8002f6a:	f001 fda3 	bl	8004ab4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	18d2      	adds	r2, r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d32b      	bcc.n	8002fe0 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	605a      	str	r2, [r3, #4]
 8002f90:	e026      	b.n	8002fe0 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	68d8      	ldr	r0, [r3, #12]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	0019      	movs	r1, r3
 8002f9e:	f001 fd89 	bl	8004ab4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	425b      	negs	r3, r3
 8002fac:	18d2      	adds	r2, r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d207      	bcs.n	8002fce <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	425b      	negs	r3, r3
 8002fc8:	18d2      	adds	r2, r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d105      	bne.n	8002fe0 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002fe8:	697b      	ldr	r3, [r7, #20]
}
 8002fea:	0018      	movs	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	b006      	add	sp, #24
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	2b00      	cmp	r3, #0
 8003002:	d018      	beq.n	8003036 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	18d2      	adds	r2, r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	429a      	cmp	r2, r3
 800301c:	d303      	bcc.n	8003026 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68d9      	ldr	r1, [r3, #12]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	0018      	movs	r0, r3
 8003032:	f001 fd3f 	bl	8004ab4 <memcpy>
	}
}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	46bd      	mov	sp, r7
 800303a:	b002      	add	sp, #8
 800303c:	bd80      	pop	{r7, pc}

0800303e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b084      	sub	sp, #16
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003046:	f001 fad3 	bl	80045f0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800304a:	230f      	movs	r3, #15
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	2145      	movs	r1, #69	; 0x45
 8003052:	5c52      	ldrb	r2, [r2, r1]
 8003054:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003056:	e013      	b.n	8003080 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	2b00      	cmp	r3, #0
 800305e:	d016      	beq.n	800308e <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3324      	adds	r3, #36	; 0x24
 8003064:	0018      	movs	r0, r3
 8003066:	f000 fcbb 	bl	80039e0 <xTaskRemoveFromEventList>
 800306a:	1e03      	subs	r3, r0, #0
 800306c:	d001      	beq.n	8003072 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800306e:	f000 fd77 	bl	8003b60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003072:	210f      	movs	r1, #15
 8003074:	187b      	adds	r3, r7, r1
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	3b01      	subs	r3, #1
 800307a:	b2da      	uxtb	r2, r3
 800307c:	187b      	adds	r3, r7, r1
 800307e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003080:	230f      	movs	r3, #15
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	b25b      	sxtb	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	dce5      	bgt.n	8003058 <prvUnlockQueue+0x1a>
 800308c:	e000      	b.n	8003090 <prvUnlockQueue+0x52>
					break;
 800308e:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2245      	movs	r2, #69	; 0x45
 8003094:	21ff      	movs	r1, #255	; 0xff
 8003096:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003098:	f001 fabc 	bl	8004614 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800309c:	f001 faa8 	bl	80045f0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80030a0:	230e      	movs	r3, #14
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	2144      	movs	r1, #68	; 0x44
 80030a8:	5c52      	ldrb	r2, [r2, r1]
 80030aa:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030ac:	e013      	b.n	80030d6 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d016      	beq.n	80030e4 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3310      	adds	r3, #16
 80030ba:	0018      	movs	r0, r3
 80030bc:	f000 fc90 	bl	80039e0 <xTaskRemoveFromEventList>
 80030c0:	1e03      	subs	r3, r0, #0
 80030c2:	d001      	beq.n	80030c8 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80030c4:	f000 fd4c 	bl	8003b60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030c8:	210e      	movs	r1, #14
 80030ca:	187b      	adds	r3, r7, r1
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	187b      	adds	r3, r7, r1
 80030d4:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030d6:	230e      	movs	r3, #14
 80030d8:	18fb      	adds	r3, r7, r3
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	b25b      	sxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	dce5      	bgt.n	80030ae <prvUnlockQueue+0x70>
 80030e2:	e000      	b.n	80030e6 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80030e4:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2244      	movs	r2, #68	; 0x44
 80030ea:	21ff      	movs	r1, #255	; 0xff
 80030ec:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80030ee:	f001 fa91 	bl	8004614 <vPortExitCritical>
}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	46bd      	mov	sp, r7
 80030f6:	b004      	add	sp, #16
 80030f8:	bd80      	pop	{r7, pc}

080030fa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003102:	f001 fa75 	bl	80045f0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310a:	2b00      	cmp	r3, #0
 800310c:	d102      	bne.n	8003114 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800310e:	2301      	movs	r3, #1
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	e001      	b.n	8003118 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003114:	2300      	movs	r3, #0
 8003116:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003118:	f001 fa7c 	bl	8004614 <vPortExitCritical>

	return xReturn;
 800311c:	68fb      	ldr	r3, [r7, #12]
}
 800311e:	0018      	movs	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	b004      	add	sp, #16
 8003124:	bd80      	pop	{r7, pc}

08003126 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b084      	sub	sp, #16
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800312e:	f001 fa5f 	bl	80045f0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313a:	429a      	cmp	r2, r3
 800313c:	d102      	bne.n	8003144 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800313e:	2301      	movs	r3, #1
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	e001      	b.n	8003148 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003144:	2300      	movs	r3, #0
 8003146:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003148:	f001 fa64 	bl	8004614 <vPortExitCritical>

	return xReturn;
 800314c:	68fb      	ldr	r3, [r7, #12]
}
 800314e:	0018      	movs	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	b004      	add	sp, #16
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	e015      	b.n	8003194 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003168:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <vQueueAddToRegistry+0x4c>)
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	00d2      	lsls	r2, r2, #3
 800316e:	58d3      	ldr	r3, [r2, r3]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10c      	bne.n	800318e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003174:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <vQueueAddToRegistry+0x4c>)
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	00d2      	lsls	r2, r2, #3
 800317a:	6839      	ldr	r1, [r7, #0]
 800317c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800317e:	4a09      	ldr	r2, [pc, #36]	; (80031a4 <vQueueAddToRegistry+0x4c>)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	18d3      	adds	r3, r2, r3
 8003186:	3304      	adds	r3, #4
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800318c:	e006      	b.n	800319c <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	3301      	adds	r3, #1
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2b07      	cmp	r3, #7
 8003198:	d9e6      	bls.n	8003168 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	46c0      	nop			; (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	b004      	add	sp, #16
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	20000780 	.word	0x20000780

080031a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80031b8:	f001 fa1a 	bl	80045f0 <vPortEnterCritical>
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	2244      	movs	r2, #68	; 0x44
 80031c0:	5c9b      	ldrb	r3, [r3, r2]
 80031c2:	b25b      	sxtb	r3, r3
 80031c4:	3301      	adds	r3, #1
 80031c6:	d103      	bne.n	80031d0 <vQueueWaitForMessageRestricted+0x28>
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2244      	movs	r2, #68	; 0x44
 80031cc:	2100      	movs	r1, #0
 80031ce:	5499      	strb	r1, [r3, r2]
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	2245      	movs	r2, #69	; 0x45
 80031d4:	5c9b      	ldrb	r3, [r3, r2]
 80031d6:	b25b      	sxtb	r3, r3
 80031d8:	3301      	adds	r3, #1
 80031da:	d103      	bne.n	80031e4 <vQueueWaitForMessageRestricted+0x3c>
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2245      	movs	r2, #69	; 0x45
 80031e0:	2100      	movs	r1, #0
 80031e2:	5499      	strb	r1, [r3, r2]
 80031e4:	f001 fa16 	bl	8004614 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d106      	bne.n	80031fe <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	3324      	adds	r3, #36	; 0x24
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	68b9      	ldr	r1, [r7, #8]
 80031f8:	0018      	movs	r0, r3
 80031fa:	f000 fbcb 	bl	8003994 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	0018      	movs	r0, r3
 8003202:	f7ff ff1c 	bl	800303e <prvUnlockQueue>
	}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	46bd      	mov	sp, r7
 800320a:	b006      	add	sp, #24
 800320c:	bd80      	pop	{r7, pc}

0800320e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800320e:	b590      	push	{r4, r7, lr}
 8003210:	b08d      	sub	sp, #52	; 0x34
 8003212:	af04      	add	r7, sp, #16
 8003214:	60f8      	str	r0, [r7, #12]
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	607a      	str	r2, [r7, #4]
 800321a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800321c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <xTaskCreateStatic+0x18>
 8003222:	b672      	cpsid	i
 8003224:	e7fe      	b.n	8003224 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8003226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <xTaskCreateStatic+0x22>
 800322c:	b672      	cpsid	i
 800322e:	e7fe      	b.n	800322e <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003230:	235c      	movs	r3, #92	; 0x5c
 8003232:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	2b5c      	cmp	r3, #92	; 0x5c
 8003238:	d001      	beq.n	800323e <xTaskCreateStatic+0x30>
 800323a:	b672      	cpsid	i
 800323c:	e7fe      	b.n	800323c <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800323e:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003242:	2b00      	cmp	r3, #0
 8003244:	d020      	beq.n	8003288 <xTaskCreateStatic+0x7a>
 8003246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003248:	2b00      	cmp	r3, #0
 800324a:	d01d      	beq.n	8003288 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800324c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324e:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003254:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	2259      	movs	r2, #89	; 0x59
 800325a:	2102      	movs	r1, #2
 800325c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800325e:	683c      	ldr	r4, [r7, #0]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	68b9      	ldr	r1, [r7, #8]
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	2300      	movs	r3, #0
 8003268:	9303      	str	r3, [sp, #12]
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	9302      	str	r3, [sp, #8]
 800326e:	2318      	movs	r3, #24
 8003270:	18fb      	adds	r3, r7, r3
 8003272:	9301      	str	r3, [sp, #4]
 8003274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	0023      	movs	r3, r4
 800327a:	f000 f859 	bl	8003330 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	0018      	movs	r0, r3
 8003282:	f000 f8df 	bl	8003444 <prvAddNewTaskToReadyList>
 8003286:	e001      	b.n	800328c <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8003288:	2300      	movs	r3, #0
 800328a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800328c:	69bb      	ldr	r3, [r7, #24]
	}
 800328e:	0018      	movs	r0, r3
 8003290:	46bd      	mov	sp, r7
 8003292:	b009      	add	sp, #36	; 0x24
 8003294:	bd90      	pop	{r4, r7, pc}

08003296 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003296:	b590      	push	{r4, r7, lr}
 8003298:	b08d      	sub	sp, #52	; 0x34
 800329a:	af04      	add	r7, sp, #16
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	603b      	str	r3, [r7, #0]
 80032a2:	1dbb      	adds	r3, r7, #6
 80032a4:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032a6:	1dbb      	adds	r3, r7, #6
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	0018      	movs	r0, r3
 80032ae:	f001 fa37 	bl	8004720 <pvPortMalloc>
 80032b2:	0003      	movs	r3, r0
 80032b4:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d010      	beq.n	80032de <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80032bc:	205c      	movs	r0, #92	; 0x5c
 80032be:	f001 fa2f 	bl	8004720 <pvPortMalloc>
 80032c2:	0003      	movs	r3, r0
 80032c4:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	631a      	str	r2, [r3, #48]	; 0x30
 80032d2:	e006      	b.n	80032e2 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	0018      	movs	r0, r3
 80032d8:	f001 fac8 	bl	800486c <vPortFree>
 80032dc:	e001      	b.n	80032e2 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d01a      	beq.n	800331e <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	2259      	movs	r2, #89	; 0x59
 80032ec:	2100      	movs	r1, #0
 80032ee:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032f0:	1dbb      	adds	r3, r7, #6
 80032f2:	881a      	ldrh	r2, [r3, #0]
 80032f4:	683c      	ldr	r4, [r7, #0]
 80032f6:	68b9      	ldr	r1, [r7, #8]
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	2300      	movs	r3, #0
 80032fc:	9303      	str	r3, [sp, #12]
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	9302      	str	r3, [sp, #8]
 8003302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003304:	9301      	str	r3, [sp, #4]
 8003306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	0023      	movs	r3, r4
 800330c:	f000 f810 	bl	8003330 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	0018      	movs	r0, r3
 8003314:	f000 f896 	bl	8003444 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003318:	2301      	movs	r3, #1
 800331a:	61bb      	str	r3, [r7, #24]
 800331c:	e002      	b.n	8003324 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800331e:	2301      	movs	r3, #1
 8003320:	425b      	negs	r3, r3
 8003322:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003324:	69bb      	ldr	r3, [r7, #24]
	}
 8003326:	0018      	movs	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	b009      	add	sp, #36	; 0x24
 800332c:	bd90      	pop	{r4, r7, pc}
	...

08003330 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
 800333c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800333e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003340:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	001a      	movs	r2, r3
 8003348:	21a5      	movs	r1, #165	; 0xa5
 800334a:	f001 fbbc 	bl	8004ac6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800334e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	493a      	ldr	r1, [pc, #232]	; (8003440 <prvInitialiseNewTask+0x110>)
 8003356:	468c      	mov	ip, r1
 8003358:	4463      	add	r3, ip
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	18d3      	adds	r3, r2, r3
 800335e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	2207      	movs	r2, #7
 8003364:	4393      	bics	r3, r2
 8003366:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	2207      	movs	r2, #7
 800336c:	4013      	ands	r3, r2
 800336e:	d001      	beq.n	8003374 <prvInitialiseNewTask+0x44>
 8003370:	b672      	cpsid	i
 8003372:	e7fe      	b.n	8003372 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d020      	beq.n	80033bc <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	e013      	b.n	80033a8 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	18d3      	adds	r3, r2, r3
 8003386:	7818      	ldrb	r0, [r3, #0]
 8003388:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800338a:	2134      	movs	r1, #52	; 0x34
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	18d3      	adds	r3, r2, r3
 8003390:	185b      	adds	r3, r3, r1
 8003392:	1c02      	adds	r2, r0, #0
 8003394:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	18d3      	adds	r3, r2, r3
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d006      	beq.n	80033b0 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	3301      	adds	r3, #1
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2b0f      	cmp	r3, #15
 80033ac:	d9e8      	bls.n	8003380 <prvInitialiseNewTask+0x50>
 80033ae:	e000      	b.n	80033b2 <prvInitialiseNewTask+0x82>
			{
				break;
 80033b0:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b4:	2243      	movs	r2, #67	; 0x43
 80033b6:	2100      	movs	r1, #0
 80033b8:	5499      	strb	r1, [r3, r2]
 80033ba:	e003      	b.n	80033c4 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80033bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033be:	2234      	movs	r2, #52	; 0x34
 80033c0:	2100      	movs	r1, #0
 80033c2:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	2b37      	cmp	r3, #55	; 0x37
 80033c8:	d901      	bls.n	80033ce <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033ca:	2337      	movs	r3, #55	; 0x37
 80033cc:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80033ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d0:	6a3a      	ldr	r2, [r7, #32]
 80033d2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80033d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d6:	6a3a      	ldr	r2, [r7, #32]
 80033d8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80033da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033dc:	2200      	movs	r2, #0
 80033de:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e2:	3304      	adds	r3, #4
 80033e4:	0018      	movs	r0, r3
 80033e6:	f7ff fa5d 	bl	80028a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ec:	3318      	adds	r3, #24
 80033ee:	0018      	movs	r0, r3
 80033f0:	f7ff fa58 	bl	80028a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	2238      	movs	r2, #56	; 0x38
 80033fe:	1ad2      	subs	r2, r2, r3
 8003400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003402:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003408:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800340a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340c:	2200      	movs	r2, #0
 800340e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003412:	2258      	movs	r2, #88	; 0x58
 8003414:	2100      	movs	r1, #0
 8003416:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	68f9      	ldr	r1, [r7, #12]
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	0018      	movs	r0, r3
 8003420:	f001 f84e 	bl	80044c0 <pxPortInitialiseStack>
 8003424:	0002      	movs	r2, r0
 8003426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003428:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	46bd      	mov	sp, r7
 800343a:	b006      	add	sp, #24
 800343c:	bd80      	pop	{r7, pc}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	3fffffff 	.word	0x3fffffff

08003444 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800344c:	f001 f8d0 	bl	80045f0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003450:	4b2a      	ldr	r3, [pc, #168]	; (80034fc <prvAddNewTaskToReadyList+0xb8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	4b29      	ldr	r3, [pc, #164]	; (80034fc <prvAddNewTaskToReadyList+0xb8>)
 8003458:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800345a:	4b29      	ldr	r3, [pc, #164]	; (8003500 <prvAddNewTaskToReadyList+0xbc>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d109      	bne.n	8003476 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003462:	4b27      	ldr	r3, [pc, #156]	; (8003500 <prvAddNewTaskToReadyList+0xbc>)
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003468:	4b24      	ldr	r3, [pc, #144]	; (80034fc <prvAddNewTaskToReadyList+0xb8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d110      	bne.n	8003492 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003470:	f000 fb90 	bl	8003b94 <prvInitialiseTaskLists>
 8003474:	e00d      	b.n	8003492 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003476:	4b23      	ldr	r3, [pc, #140]	; (8003504 <prvAddNewTaskToReadyList+0xc0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d109      	bne.n	8003492 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800347e:	4b20      	ldr	r3, [pc, #128]	; (8003500 <prvAddNewTaskToReadyList+0xbc>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	429a      	cmp	r2, r3
 800348a:	d802      	bhi.n	8003492 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800348c:	4b1c      	ldr	r3, [pc, #112]	; (8003500 <prvAddNewTaskToReadyList+0xbc>)
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003492:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <prvAddNewTaskToReadyList+0xc4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	4b1b      	ldr	r3, [pc, #108]	; (8003508 <prvAddNewTaskToReadyList+0xc4>)
 800349a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800349c:	4b1a      	ldr	r3, [pc, #104]	; (8003508 <prvAddNewTaskToReadyList+0xc4>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a8:	4b18      	ldr	r3, [pc, #96]	; (800350c <prvAddNewTaskToReadyList+0xc8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d903      	bls.n	80034b8 <prvAddNewTaskToReadyList+0x74>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b4:	4b15      	ldr	r3, [pc, #84]	; (800350c <prvAddNewTaskToReadyList+0xc8>)
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034bc:	0013      	movs	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	189b      	adds	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4a12      	ldr	r2, [pc, #72]	; (8003510 <prvAddNewTaskToReadyList+0xcc>)
 80034c6:	189a      	adds	r2, r3, r2
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3304      	adds	r3, #4
 80034cc:	0019      	movs	r1, r3
 80034ce:	0010      	movs	r0, r2
 80034d0:	f7ff f9f3 	bl	80028ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80034d4:	f001 f89e 	bl	8004614 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80034d8:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <prvAddNewTaskToReadyList+0xc0>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034e0:	4b07      	ldr	r3, [pc, #28]	; (8003500 <prvAddNewTaskToReadyList+0xbc>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d201      	bcs.n	80034f2 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80034ee:	f001 f86f 	bl	80045d0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	46bd      	mov	sp, r7
 80034f6:	b002      	add	sp, #8
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	20000c94 	.word	0x20000c94
 8003500:	200007c0 	.word	0x200007c0
 8003504:	20000ca0 	.word	0x20000ca0
 8003508:	20000cb0 	.word	0x20000cb0
 800350c:	20000c9c 	.word	0x20000c9c
 8003510:	200007c4 	.word	0x200007c4

08003514 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800351c:	2300      	movs	r3, #0
 800351e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d010      	beq.n	8003548 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003526:	4b0d      	ldr	r3, [pc, #52]	; (800355c <vTaskDelay+0x48>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <vTaskDelay+0x1e>
 800352e:	b672      	cpsid	i
 8003530:	e7fe      	b.n	8003530 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003532:	f000 f869 	bl	8003608 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2100      	movs	r1, #0
 800353a:	0018      	movs	r0, r3
 800353c:	f000 fc5a 	bl	8003df4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003540:	f000 f86e 	bl	8003620 <xTaskResumeAll>
 8003544:	0003      	movs	r3, r0
 8003546:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800354e:	f001 f83f 	bl	80045d0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	46bd      	mov	sp, r7
 8003556:	b004      	add	sp, #16
 8003558:	bd80      	pop	{r7, pc}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	20000cbc 	.word	0x20000cbc

08003560 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003560:	b590      	push	{r4, r7, lr}
 8003562:	b089      	sub	sp, #36	; 0x24
 8003564:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003566:	2300      	movs	r3, #0
 8003568:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800356a:	2300      	movs	r3, #0
 800356c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800356e:	003a      	movs	r2, r7
 8003570:	1d39      	adds	r1, r7, #4
 8003572:	2308      	movs	r3, #8
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	0018      	movs	r0, r3
 8003578:	f7ff f946 	bl	8002808 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800357c:	683c      	ldr	r4, [r7, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	491b      	ldr	r1, [pc, #108]	; (80035f0 <vTaskStartScheduler+0x90>)
 8003584:	481b      	ldr	r0, [pc, #108]	; (80035f4 <vTaskStartScheduler+0x94>)
 8003586:	9202      	str	r2, [sp, #8]
 8003588:	9301      	str	r3, [sp, #4]
 800358a:	2300      	movs	r3, #0
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	2300      	movs	r3, #0
 8003590:	0022      	movs	r2, r4
 8003592:	f7ff fe3c 	bl	800320e <xTaskCreateStatic>
 8003596:	0002      	movs	r2, r0
 8003598:	4b17      	ldr	r3, [pc, #92]	; (80035f8 <vTaskStartScheduler+0x98>)
 800359a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800359c:	4b16      	ldr	r3, [pc, #88]	; (80035f8 <vTaskStartScheduler+0x98>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80035a4:	2301      	movs	r3, #1
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	e001      	b.n	80035ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d103      	bne.n	80035bc <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80035b4:	f000 fc72 	bl	8003e9c <xTimerCreateTimerTask>
 80035b8:	0003      	movs	r3, r0
 80035ba:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d10d      	bne.n	80035de <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80035c2:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035c4:	4b0d      	ldr	r3, [pc, #52]	; (80035fc <vTaskStartScheduler+0x9c>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	4252      	negs	r2, r2
 80035ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035cc:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <vTaskStartScheduler+0xa0>)
 80035ce:	2201      	movs	r2, #1
 80035d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80035d2:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <vTaskStartScheduler+0xa4>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035d8:	f000 ffd6 	bl	8004588 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80035dc:	e004      	b.n	80035e8 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	3301      	adds	r3, #1
 80035e2:	d101      	bne.n	80035e8 <vTaskStartScheduler+0x88>
 80035e4:	b672      	cpsid	i
 80035e6:	e7fe      	b.n	80035e6 <vTaskStartScheduler+0x86>
}
 80035e8:	46c0      	nop			; (mov r8, r8)
 80035ea:	46bd      	mov	sp, r7
 80035ec:	b005      	add	sp, #20
 80035ee:	bd90      	pop	{r4, r7, pc}
 80035f0:	08004b14 	.word	0x08004b14
 80035f4:	08003b75 	.word	0x08003b75
 80035f8:	20000cb8 	.word	0x20000cb8
 80035fc:	20000cb4 	.word	0x20000cb4
 8003600:	20000ca0 	.word	0x20000ca0
 8003604:	20000c98 	.word	0x20000c98

08003608 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800360c:	4b03      	ldr	r3, [pc, #12]	; (800361c <vTaskSuspendAll+0x14>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	4b02      	ldr	r3, [pc, #8]	; (800361c <vTaskSuspendAll+0x14>)
 8003614:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	20000cbc 	.word	0x20000cbc

08003620 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800362a:	2300      	movs	r3, #0
 800362c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800362e:	4b3a      	ldr	r3, [pc, #232]	; (8003718 <xTaskResumeAll+0xf8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <xTaskResumeAll+0x1a>
 8003636:	b672      	cpsid	i
 8003638:	e7fe      	b.n	8003638 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800363a:	f000 ffd9 	bl	80045f0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800363e:	4b36      	ldr	r3, [pc, #216]	; (8003718 <xTaskResumeAll+0xf8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	1e5a      	subs	r2, r3, #1
 8003644:	4b34      	ldr	r3, [pc, #208]	; (8003718 <xTaskResumeAll+0xf8>)
 8003646:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003648:	4b33      	ldr	r3, [pc, #204]	; (8003718 <xTaskResumeAll+0xf8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d15b      	bne.n	8003708 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003650:	4b32      	ldr	r3, [pc, #200]	; (800371c <xTaskResumeAll+0xfc>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d057      	beq.n	8003708 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003658:	e02f      	b.n	80036ba <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800365a:	4b31      	ldr	r3, [pc, #196]	; (8003720 <xTaskResumeAll+0x100>)
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	3318      	adds	r3, #24
 8003666:	0018      	movs	r0, r3
 8003668:	f7ff f97f 	bl	800296a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	3304      	adds	r3, #4
 8003670:	0018      	movs	r0, r3
 8003672:	f7ff f97a 	bl	800296a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800367a:	4b2a      	ldr	r3, [pc, #168]	; (8003724 <xTaskResumeAll+0x104>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d903      	bls.n	800368a <xTaskResumeAll+0x6a>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003686:	4b27      	ldr	r3, [pc, #156]	; (8003724 <xTaskResumeAll+0x104>)
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800368e:	0013      	movs	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	189b      	adds	r3, r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4a24      	ldr	r2, [pc, #144]	; (8003728 <xTaskResumeAll+0x108>)
 8003698:	189a      	adds	r2, r3, r2
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	3304      	adds	r3, #4
 800369e:	0019      	movs	r1, r3
 80036a0:	0010      	movs	r0, r2
 80036a2:	f7ff f90a 	bl	80028ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036aa:	4b20      	ldr	r3, [pc, #128]	; (800372c <xTaskResumeAll+0x10c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d302      	bcc.n	80036ba <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80036b4:	4b1e      	ldr	r3, [pc, #120]	; (8003730 <xTaskResumeAll+0x110>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036ba:	4b19      	ldr	r3, [pc, #100]	; (8003720 <xTaskResumeAll+0x100>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1cb      	bne.n	800365a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80036c8:	f000 fafe 	bl	8003cc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80036cc:	4b19      	ldr	r3, [pc, #100]	; (8003734 <xTaskResumeAll+0x114>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00f      	beq.n	80036f8 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80036d8:	f000 f83c 	bl	8003754 <xTaskIncrementTick>
 80036dc:	1e03      	subs	r3, r0, #0
 80036de:	d002      	beq.n	80036e6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80036e0:	4b13      	ldr	r3, [pc, #76]	; (8003730 <xTaskResumeAll+0x110>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f2      	bne.n	80036d8 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80036f2:	4b10      	ldr	r3, [pc, #64]	; (8003734 <xTaskResumeAll+0x114>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80036f8:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <xTaskResumeAll+0x110>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003700:	2301      	movs	r3, #1
 8003702:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003704:	f000 ff64 	bl	80045d0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003708:	f000 ff84 	bl	8004614 <vPortExitCritical>

	return xAlreadyYielded;
 800370c:	68bb      	ldr	r3, [r7, #8]
}
 800370e:	0018      	movs	r0, r3
 8003710:	46bd      	mov	sp, r7
 8003712:	b004      	add	sp, #16
 8003714:	bd80      	pop	{r7, pc}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	20000cbc 	.word	0x20000cbc
 800371c:	20000c94 	.word	0x20000c94
 8003720:	20000c54 	.word	0x20000c54
 8003724:	20000c9c 	.word	0x20000c9c
 8003728:	200007c4 	.word	0x200007c4
 800372c:	200007c0 	.word	0x200007c0
 8003730:	20000ca8 	.word	0x20000ca8
 8003734:	20000ca4 	.word	0x20000ca4

08003738 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800373e:	4b04      	ldr	r3, [pc, #16]	; (8003750 <xTaskGetTickCount+0x18>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003744:	687b      	ldr	r3, [r7, #4]
}
 8003746:	0018      	movs	r0, r3
 8003748:	46bd      	mov	sp, r7
 800374a:	b002      	add	sp, #8
 800374c:	bd80      	pop	{r7, pc}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	20000c98 	.word	0x20000c98

08003754 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800375e:	4b4a      	ldr	r3, [pc, #296]	; (8003888 <xTaskIncrementTick+0x134>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d000      	beq.n	8003768 <xTaskIncrementTick+0x14>
 8003766:	e07e      	b.n	8003866 <xTaskIncrementTick+0x112>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003768:	4b48      	ldr	r3, [pc, #288]	; (800388c <xTaskIncrementTick+0x138>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3301      	adds	r3, #1
 800376e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003770:	4b46      	ldr	r3, [pc, #280]	; (800388c <xTaskIncrementTick+0x138>)
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d117      	bne.n	80037ac <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800377c:	4b44      	ldr	r3, [pc, #272]	; (8003890 <xTaskIncrementTick+0x13c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <xTaskIncrementTick+0x36>
 8003786:	b672      	cpsid	i
 8003788:	e7fe      	b.n	8003788 <xTaskIncrementTick+0x34>
 800378a:	4b41      	ldr	r3, [pc, #260]	; (8003890 <xTaskIncrementTick+0x13c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	4b40      	ldr	r3, [pc, #256]	; (8003894 <xTaskIncrementTick+0x140>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	4b3e      	ldr	r3, [pc, #248]	; (8003890 <xTaskIncrementTick+0x13c>)
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	4b3e      	ldr	r3, [pc, #248]	; (8003894 <xTaskIncrementTick+0x140>)
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	4b3e      	ldr	r3, [pc, #248]	; (8003898 <xTaskIncrementTick+0x144>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	4b3c      	ldr	r3, [pc, #240]	; (8003898 <xTaskIncrementTick+0x144>)
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	f000 fa8e 	bl	8003cc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80037ac:	4b3b      	ldr	r3, [pc, #236]	; (800389c <xTaskIncrementTick+0x148>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d349      	bcc.n	800384a <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037b6:	4b36      	ldr	r3, [pc, #216]	; (8003890 <xTaskIncrementTick+0x13c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d104      	bne.n	80037ca <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037c0:	4b36      	ldr	r3, [pc, #216]	; (800389c <xTaskIncrementTick+0x148>)
 80037c2:	2201      	movs	r2, #1
 80037c4:	4252      	negs	r2, r2
 80037c6:	601a      	str	r2, [r3, #0]
					break;
 80037c8:	e03f      	b.n	800384a <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037ca:	4b31      	ldr	r3, [pc, #196]	; (8003890 <xTaskIncrementTick+0x13c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d203      	bcs.n	80037ea <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80037e2:	4b2e      	ldr	r3, [pc, #184]	; (800389c <xTaskIncrementTick+0x148>)
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80037e8:	e02f      	b.n	800384a <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	3304      	adds	r3, #4
 80037ee:	0018      	movs	r0, r3
 80037f0:	f7ff f8bb 	bl	800296a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d004      	beq.n	8003806 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	3318      	adds	r3, #24
 8003800:	0018      	movs	r0, r3
 8003802:	f7ff f8b2 	bl	800296a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380a:	4b25      	ldr	r3, [pc, #148]	; (80038a0 <xTaskIncrementTick+0x14c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d903      	bls.n	800381a <xTaskIncrementTick+0xc6>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003816:	4b22      	ldr	r3, [pc, #136]	; (80038a0 <xTaskIncrementTick+0x14c>)
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381e:	0013      	movs	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	189b      	adds	r3, r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4a1f      	ldr	r2, [pc, #124]	; (80038a4 <xTaskIncrementTick+0x150>)
 8003828:	189a      	adds	r2, r3, r2
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	3304      	adds	r3, #4
 800382e:	0019      	movs	r1, r3
 8003830:	0010      	movs	r0, r2
 8003832:	f7ff f842 	bl	80028ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800383a:	4b1b      	ldr	r3, [pc, #108]	; (80038a8 <xTaskIncrementTick+0x154>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003840:	429a      	cmp	r2, r3
 8003842:	d3b8      	bcc.n	80037b6 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8003844:	2301      	movs	r3, #1
 8003846:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003848:	e7b5      	b.n	80037b6 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800384a:	4b17      	ldr	r3, [pc, #92]	; (80038a8 <xTaskIncrementTick+0x154>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003850:	4914      	ldr	r1, [pc, #80]	; (80038a4 <xTaskIncrementTick+0x150>)
 8003852:	0013      	movs	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	189b      	adds	r3, r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	585b      	ldr	r3, [r3, r1]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d907      	bls.n	8003870 <xTaskIncrementTick+0x11c>
			{
				xSwitchRequired = pdTRUE;
 8003860:	2301      	movs	r3, #1
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	e004      	b.n	8003870 <xTaskIncrementTick+0x11c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003866:	4b11      	ldr	r3, [pc, #68]	; (80038ac <xTaskIncrementTick+0x158>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <xTaskIncrementTick+0x158>)
 800386e:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003870:	4b0f      	ldr	r3, [pc, #60]	; (80038b0 <xTaskIncrementTick+0x15c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <xTaskIncrementTick+0x128>
		{
			xSwitchRequired = pdTRUE;
 8003878:	2301      	movs	r3, #1
 800387a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800387c:	697b      	ldr	r3, [r7, #20]
}
 800387e:	0018      	movs	r0, r3
 8003880:	46bd      	mov	sp, r7
 8003882:	b006      	add	sp, #24
 8003884:	bd80      	pop	{r7, pc}
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	20000cbc 	.word	0x20000cbc
 800388c:	20000c98 	.word	0x20000c98
 8003890:	20000c4c 	.word	0x20000c4c
 8003894:	20000c50 	.word	0x20000c50
 8003898:	20000cac 	.word	0x20000cac
 800389c:	20000cb4 	.word	0x20000cb4
 80038a0:	20000c9c 	.word	0x20000c9c
 80038a4:	200007c4 	.word	0x200007c4
 80038a8:	200007c0 	.word	0x200007c0
 80038ac:	20000ca4 	.word	0x20000ca4
 80038b0:	20000ca8 	.word	0x20000ca8

080038b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038ba:	4b22      	ldr	r3, [pc, #136]	; (8003944 <vTaskSwitchContext+0x90>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80038c2:	4b21      	ldr	r3, [pc, #132]	; (8003948 <vTaskSwitchContext+0x94>)
 80038c4:	2201      	movs	r2, #1
 80038c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80038c8:	e037      	b.n	800393a <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80038ca:	4b1f      	ldr	r3, [pc, #124]	; (8003948 <vTaskSwitchContext+0x94>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038d0:	4b1e      	ldr	r3, [pc, #120]	; (800394c <vTaskSwitchContext+0x98>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	607b      	str	r3, [r7, #4]
 80038d6:	e007      	b.n	80038e8 <vTaskSwitchContext+0x34>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <vTaskSwitchContext+0x2e>
 80038de:	b672      	cpsid	i
 80038e0:	e7fe      	b.n	80038e0 <vTaskSwitchContext+0x2c>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3b01      	subs	r3, #1
 80038e6:	607b      	str	r3, [r7, #4]
 80038e8:	4919      	ldr	r1, [pc, #100]	; (8003950 <vTaskSwitchContext+0x9c>)
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	0013      	movs	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	189b      	adds	r3, r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	585b      	ldr	r3, [r3, r1]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0ee      	beq.n	80038d8 <vTaskSwitchContext+0x24>
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	0013      	movs	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	189b      	adds	r3, r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4a12      	ldr	r2, [pc, #72]	; (8003950 <vTaskSwitchContext+0x9c>)
 8003906:	189b      	adds	r3, r3, r2
 8003908:	603b      	str	r3, [r7, #0]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	605a      	str	r2, [r3, #4]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	3308      	adds	r3, #8
 800391c:	429a      	cmp	r2, r3
 800391e:	d104      	bne.n	800392a <vTaskSwitchContext+0x76>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	605a      	str	r2, [r3, #4]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	4b08      	ldr	r3, [pc, #32]	; (8003954 <vTaskSwitchContext+0xa0>)
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	4b05      	ldr	r3, [pc, #20]	; (800394c <vTaskSwitchContext+0x98>)
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	601a      	str	r2, [r3, #0]
}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	46bd      	mov	sp, r7
 800393e:	b002      	add	sp, #8
 8003940:	bd80      	pop	{r7, pc}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	20000cbc 	.word	0x20000cbc
 8003948:	20000ca8 	.word	0x20000ca8
 800394c:	20000c9c 	.word	0x20000c9c
 8003950:	200007c4 	.word	0x200007c4
 8003954:	200007c0 	.word	0x200007c0

08003958 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <vTaskPlaceOnEventList+0x14>
 8003968:	b672      	cpsid	i
 800396a:	e7fe      	b.n	800396a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800396c:	4b08      	ldr	r3, [pc, #32]	; (8003990 <vTaskPlaceOnEventList+0x38>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3318      	adds	r3, #24
 8003972:	001a      	movs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	0011      	movs	r1, r2
 8003978:	0018      	movs	r0, r3
 800397a:	f7fe ffc0 	bl	80028fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2101      	movs	r1, #1
 8003982:	0018      	movs	r0, r3
 8003984:	f000 fa36 	bl	8003df4 <prvAddCurrentTaskToDelayedList>
}
 8003988:	46c0      	nop			; (mov r8, r8)
 800398a:	46bd      	mov	sp, r7
 800398c:	b002      	add	sp, #8
 800398e:	bd80      	pop	{r7, pc}
 8003990:	200007c0 	.word	0x200007c0

08003994 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <vTaskPlaceOnEventListRestricted+0x16>
 80039a6:	b672      	cpsid	i
 80039a8:	e7fe      	b.n	80039a8 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039aa:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <vTaskPlaceOnEventListRestricted+0x48>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3318      	adds	r3, #24
 80039b0:	001a      	movs	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	0011      	movs	r1, r2
 80039b6:	0018      	movs	r0, r3
 80039b8:	f7fe ff7f 	bl	80028ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 80039c2:	2301      	movs	r3, #1
 80039c4:	425b      	negs	r3, r3
 80039c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	0011      	movs	r1, r2
 80039ce:	0018      	movs	r0, r3
 80039d0:	f000 fa10 	bl	8003df4 <prvAddCurrentTaskToDelayedList>
	}
 80039d4:	46c0      	nop			; (mov r8, r8)
 80039d6:	46bd      	mov	sp, r7
 80039d8:	b004      	add	sp, #16
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	200007c0 	.word	0x200007c0

080039e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <xTaskRemoveFromEventList+0x1a>
 80039f6:	b672      	cpsid	i
 80039f8:	e7fe      	b.n	80039f8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	3318      	adds	r3, #24
 80039fe:	0018      	movs	r0, r3
 8003a00:	f7fe ffb3 	bl	800296a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a04:	4b1e      	ldr	r3, [pc, #120]	; (8003a80 <xTaskRemoveFromEventList+0xa0>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d11d      	bne.n	8003a48 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	3304      	adds	r3, #4
 8003a10:	0018      	movs	r0, r3
 8003a12:	f7fe ffaa 	bl	800296a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a1a:	4b1a      	ldr	r3, [pc, #104]	; (8003a84 <xTaskRemoveFromEventList+0xa4>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d903      	bls.n	8003a2a <xTaskRemoveFromEventList+0x4a>
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a26:	4b17      	ldr	r3, [pc, #92]	; (8003a84 <xTaskRemoveFromEventList+0xa4>)
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2e:	0013      	movs	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	189b      	adds	r3, r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4a14      	ldr	r2, [pc, #80]	; (8003a88 <xTaskRemoveFromEventList+0xa8>)
 8003a38:	189a      	adds	r2, r3, r2
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	0019      	movs	r1, r3
 8003a40:	0010      	movs	r0, r2
 8003a42:	f7fe ff3a 	bl	80028ba <vListInsertEnd>
 8003a46:	e007      	b.n	8003a58 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	3318      	adds	r3, #24
 8003a4c:	001a      	movs	r2, r3
 8003a4e:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <xTaskRemoveFromEventList+0xac>)
 8003a50:	0011      	movs	r1, r2
 8003a52:	0018      	movs	r0, r3
 8003a54:	f7fe ff31 	bl	80028ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <xTaskRemoveFromEventList+0xb0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d905      	bls.n	8003a72 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a66:	2301      	movs	r3, #1
 8003a68:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <xTaskRemoveFromEventList+0xb4>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	e001      	b.n	8003a76 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8003a76:	68fb      	ldr	r3, [r7, #12]
}
 8003a78:	0018      	movs	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b004      	add	sp, #16
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	20000cbc 	.word	0x20000cbc
 8003a84:	20000c9c 	.word	0x20000c9c
 8003a88:	200007c4 	.word	0x200007c4
 8003a8c:	20000c54 	.word	0x20000c54
 8003a90:	200007c0 	.word	0x200007c0
 8003a94:	20000ca8 	.word	0x20000ca8

08003a98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003aa0:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <vTaskInternalSetTimeOutState+0x20>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003aa8:	4b04      	ldr	r3, [pc, #16]	; (8003abc <vTaskInternalSetTimeOutState+0x24>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	605a      	str	r2, [r3, #4]
}
 8003ab0:	46c0      	nop			; (mov r8, r8)
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b002      	add	sp, #8
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20000cac 	.word	0x20000cac
 8003abc:	20000c98 	.word	0x20000c98

08003ac0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <xTaskCheckForTimeOut+0x14>
 8003ad0:	b672      	cpsid	i
 8003ad2:	e7fe      	b.n	8003ad2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <xTaskCheckForTimeOut+0x1e>
 8003ada:	b672      	cpsid	i
 8003adc:	e7fe      	b.n	8003adc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8003ade:	f000 fd87 	bl	80045f0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ae2:	4b1d      	ldr	r3, [pc, #116]	; (8003b58 <xTaskCheckForTimeOut+0x98>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3301      	adds	r3, #1
 8003af8:	d102      	bne.n	8003b00 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
 8003afe:	e024      	b.n	8003b4a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <xTaskCheckForTimeOut+0x9c>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d007      	beq.n	8003b1c <xTaskCheckForTimeOut+0x5c>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d302      	bcc.n	8003b1c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003b16:	2301      	movs	r3, #1
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	e016      	b.n	8003b4a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d20c      	bcs.n	8003b40 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1ad2      	subs	r2, r2, r3
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	0018      	movs	r0, r3
 8003b36:	f7ff ffaf 	bl	8003a98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	e004      	b.n	8003b4a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b46:	2301      	movs	r3, #1
 8003b48:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8003b4a:	f000 fd63 	bl	8004614 <vPortExitCritical>

	return xReturn;
 8003b4e:	697b      	ldr	r3, [r7, #20]
}
 8003b50:	0018      	movs	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	b006      	add	sp, #24
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	20000c98 	.word	0x20000c98
 8003b5c:	20000cac 	.word	0x20000cac

08003b60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b64:	4b02      	ldr	r3, [pc, #8]	; (8003b70 <vTaskMissedYield+0x10>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	601a      	str	r2, [r3, #0]
}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	20000ca8 	.word	0x20000ca8

08003b74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b7c:	f000 f84e 	bl	8003c1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b80:	4b03      	ldr	r3, [pc, #12]	; (8003b90 <prvIdleTask+0x1c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d9f9      	bls.n	8003b7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b88:	f000 fd22 	bl	80045d0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8003b8c:	e7f6      	b.n	8003b7c <prvIdleTask+0x8>
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	200007c4 	.word	0x200007c4

08003b94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	607b      	str	r3, [r7, #4]
 8003b9e:	e00c      	b.n	8003bba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	0013      	movs	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	189b      	adds	r3, r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4a14      	ldr	r2, [pc, #80]	; (8003bfc <prvInitialiseTaskLists+0x68>)
 8003bac:	189b      	adds	r3, r3, r2
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f7fe fe5a 	bl	8002868 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	607b      	str	r3, [r7, #4]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b37      	cmp	r3, #55	; 0x37
 8003bbe:	d9ef      	bls.n	8003ba0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003bc0:	4b0f      	ldr	r3, [pc, #60]	; (8003c00 <prvInitialiseTaskLists+0x6c>)
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f7fe fe50 	bl	8002868 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003bc8:	4b0e      	ldr	r3, [pc, #56]	; (8003c04 <prvInitialiseTaskLists+0x70>)
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f7fe fe4c 	bl	8002868 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003bd0:	4b0d      	ldr	r3, [pc, #52]	; (8003c08 <prvInitialiseTaskLists+0x74>)
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f7fe fe48 	bl	8002868 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003bd8:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <prvInitialiseTaskLists+0x78>)
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f7fe fe44 	bl	8002868 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003be0:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <prvInitialiseTaskLists+0x7c>)
 8003be2:	0018      	movs	r0, r3
 8003be4:	f7fe fe40 	bl	8002868 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003be8:	4b0a      	ldr	r3, [pc, #40]	; (8003c14 <prvInitialiseTaskLists+0x80>)
 8003bea:	4a05      	ldr	r2, [pc, #20]	; (8003c00 <prvInitialiseTaskLists+0x6c>)
 8003bec:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bee:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <prvInitialiseTaskLists+0x84>)
 8003bf0:	4a04      	ldr	r2, [pc, #16]	; (8003c04 <prvInitialiseTaskLists+0x70>)
 8003bf2:	601a      	str	r2, [r3, #0]
}
 8003bf4:	46c0      	nop			; (mov r8, r8)
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	b002      	add	sp, #8
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	200007c4 	.word	0x200007c4
 8003c00:	20000c24 	.word	0x20000c24
 8003c04:	20000c38 	.word	0x20000c38
 8003c08:	20000c54 	.word	0x20000c54
 8003c0c:	20000c68 	.word	0x20000c68
 8003c10:	20000c80 	.word	0x20000c80
 8003c14:	20000c4c 	.word	0x20000c4c
 8003c18:	20000c50 	.word	0x20000c50

08003c1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c22:	e01a      	b.n	8003c5a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8003c24:	f000 fce4 	bl	80045f0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c28:	4b10      	ldr	r3, [pc, #64]	; (8003c6c <prvCheckTasksWaitingTermination+0x50>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3304      	adds	r3, #4
 8003c34:	0018      	movs	r0, r3
 8003c36:	f7fe fe98 	bl	800296a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c3a:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <prvCheckTasksWaitingTermination+0x54>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	1e5a      	subs	r2, r3, #1
 8003c40:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <prvCheckTasksWaitingTermination+0x54>)
 8003c42:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c44:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <prvCheckTasksWaitingTermination+0x58>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	1e5a      	subs	r2, r3, #1
 8003c4a:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <prvCheckTasksWaitingTermination+0x58>)
 8003c4c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8003c4e:	f000 fce1 	bl	8004614 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	0018      	movs	r0, r3
 8003c56:	f000 f80f 	bl	8003c78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c5a:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <prvCheckTasksWaitingTermination+0x58>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e0      	bne.n	8003c24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	46c0      	nop			; (mov r8, r8)
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b002      	add	sp, #8
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	20000c68 	.word	0x20000c68
 8003c70:	20000c94 	.word	0x20000c94
 8003c74:	20000c7c 	.word	0x20000c7c

08003c78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2259      	movs	r2, #89	; 0x59
 8003c84:	5c9b      	ldrb	r3, [r3, r2]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d109      	bne.n	8003c9e <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f000 fdec 	bl	800486c <vPortFree>
				vPortFree( pxTCB );
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	0018      	movs	r0, r3
 8003c98:	f000 fde8 	bl	800486c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c9c:	e010      	b.n	8003cc0 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2259      	movs	r2, #89	; 0x59
 8003ca2:	5c9b      	ldrb	r3, [r3, r2]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d104      	bne.n	8003cb2 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	0018      	movs	r0, r3
 8003cac:	f000 fdde 	bl	800486c <vPortFree>
	}
 8003cb0:	e006      	b.n	8003cc0 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2259      	movs	r2, #89	; 0x59
 8003cb6:	5c9b      	ldrb	r3, [r3, r2]
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d001      	beq.n	8003cc0 <prvDeleteTCB+0x48>
 8003cbc:	b672      	cpsid	i
 8003cbe:	e7fe      	b.n	8003cbe <prvDeleteTCB+0x46>
	}
 8003cc0:	46c0      	nop			; (mov r8, r8)
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b002      	add	sp, #8
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cce:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <prvResetNextTaskUnblockTime+0x34>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d104      	bne.n	8003ce2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003cd8:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <prvResetNextTaskUnblockTime+0x38>)
 8003cda:	2201      	movs	r2, #1
 8003cdc:	4252      	negs	r2, r2
 8003cde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ce0:	e008      	b.n	8003cf4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ce2:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <prvResetNextTaskUnblockTime+0x34>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	4b03      	ldr	r3, [pc, #12]	; (8003d00 <prvResetNextTaskUnblockTime+0x38>)
 8003cf2:	601a      	str	r2, [r3, #0]
}
 8003cf4:	46c0      	nop			; (mov r8, r8)
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	b002      	add	sp, #8
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	20000c4c 	.word	0x20000c4c
 8003d00:	20000cb4 	.word	0x20000cb4

08003d04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d0a:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <xTaskGetSchedulerState+0x30>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d102      	bne.n	8003d18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d12:	2301      	movs	r3, #1
 8003d14:	607b      	str	r3, [r7, #4]
 8003d16:	e008      	b.n	8003d2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d18:	4b07      	ldr	r3, [pc, #28]	; (8003d38 <xTaskGetSchedulerState+0x34>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d102      	bne.n	8003d26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d20:	2302      	movs	r3, #2
 8003d22:	607b      	str	r3, [r7, #4]
 8003d24:	e001      	b.n	8003d2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d26:	2300      	movs	r3, #0
 8003d28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d2a:	687b      	ldr	r3, [r7, #4]
	}
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	b002      	add	sp, #8
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	20000ca0 	.word	0x20000ca0
 8003d38:	20000cbc 	.word	0x20000cbc

08003d3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d044      	beq.n	8003ddc <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d52:	4b25      	ldr	r3, [pc, #148]	; (8003de8 <xTaskPriorityDisinherit+0xac>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d001      	beq.n	8003d60 <xTaskPriorityDisinherit+0x24>
 8003d5c:	b672      	cpsid	i
 8003d5e:	e7fe      	b.n	8003d5e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <xTaskPriorityDisinherit+0x30>
 8003d68:	b672      	cpsid	i
 8003d6a:	e7fe      	b.n	8003d6a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d70:	1e5a      	subs	r2, r3, #1
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d02c      	beq.n	8003ddc <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d128      	bne.n	8003ddc <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f7fe fdeb 	bl	800296a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	2238      	movs	r2, #56	; 0x38
 8003da2:	1ad2      	subs	r2, r2, r3
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dac:	4b0f      	ldr	r3, [pc, #60]	; (8003dec <xTaskPriorityDisinherit+0xb0>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d903      	bls.n	8003dbc <xTaskPriorityDisinherit+0x80>
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db8:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <xTaskPriorityDisinherit+0xb0>)
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc0:	0013      	movs	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	189b      	adds	r3, r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4a09      	ldr	r2, [pc, #36]	; (8003df0 <xTaskPriorityDisinherit+0xb4>)
 8003dca:	189a      	adds	r2, r3, r2
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	3304      	adds	r3, #4
 8003dd0:	0019      	movs	r1, r3
 8003dd2:	0010      	movs	r0, r2
 8003dd4:	f7fe fd71 	bl	80028ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
	}
 8003dde:	0018      	movs	r0, r3
 8003de0:	46bd      	mov	sp, r7
 8003de2:	b004      	add	sp, #16
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	200007c0 	.word	0x200007c0
 8003dec:	20000c9c 	.word	0x20000c9c
 8003df0:	200007c4 	.word	0x200007c4

08003df4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003dfe:	4b21      	ldr	r3, [pc, #132]	; (8003e84 <prvAddCurrentTaskToDelayedList+0x90>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e04:	4b20      	ldr	r3, [pc, #128]	; (8003e88 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f7fe fdad 	bl	800296a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3301      	adds	r3, #1
 8003e14:	d10b      	bne.n	8003e2e <prvAddCurrentTaskToDelayedList+0x3a>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d008      	beq.n	8003e2e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e1c:	4b1a      	ldr	r3, [pc, #104]	; (8003e88 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	1d1a      	adds	r2, r3, #4
 8003e22:	4b1a      	ldr	r3, [pc, #104]	; (8003e8c <prvAddCurrentTaskToDelayedList+0x98>)
 8003e24:	0011      	movs	r1, r2
 8003e26:	0018      	movs	r0, r3
 8003e28:	f7fe fd47 	bl	80028ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e2c:	e026      	b.n	8003e7c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	18d3      	adds	r3, r2, r3
 8003e34:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e36:	4b14      	ldr	r3, [pc, #80]	; (8003e88 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d209      	bcs.n	8003e5a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e46:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	4b0f      	ldr	r3, [pc, #60]	; (8003e88 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3304      	adds	r3, #4
 8003e50:	0019      	movs	r1, r3
 8003e52:	0010      	movs	r0, r2
 8003e54:	f7fe fd53 	bl	80028fe <vListInsert>
}
 8003e58:	e010      	b.n	8003e7c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e5a:	4b0e      	ldr	r3, [pc, #56]	; (8003e94 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3304      	adds	r3, #4
 8003e64:	0019      	movs	r1, r3
 8003e66:	0010      	movs	r0, r2
 8003e68:	f7fe fd49 	bl	80028fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e6c:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d202      	bcs.n	8003e7c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003e76:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	601a      	str	r2, [r3, #0]
}
 8003e7c:	46c0      	nop			; (mov r8, r8)
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	b004      	add	sp, #16
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	20000c98 	.word	0x20000c98
 8003e88:	200007c0 	.word	0x200007c0
 8003e8c:	20000c80 	.word	0x20000c80
 8003e90:	20000c50 	.word	0x20000c50
 8003e94:	20000c4c 	.word	0x20000c4c
 8003e98:	20000cb4 	.word	0x20000cb4

08003e9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003e9c:	b590      	push	{r4, r7, lr}
 8003e9e:	b089      	sub	sp, #36	; 0x24
 8003ea0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003ea6:	f000 fac9 	bl	800443c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003eaa:	4b17      	ldr	r3, [pc, #92]	; (8003f08 <xTimerCreateTimerTask+0x6c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d020      	beq.n	8003ef4 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003eba:	003a      	movs	r2, r7
 8003ebc:	1d39      	adds	r1, r7, #4
 8003ebe:	2308      	movs	r3, #8
 8003ec0:	18fb      	adds	r3, r7, r3
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f7fe fcb8 	bl	8002838 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003ec8:	683c      	ldr	r4, [r7, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	490f      	ldr	r1, [pc, #60]	; (8003f0c <xTimerCreateTimerTask+0x70>)
 8003ed0:	480f      	ldr	r0, [pc, #60]	; (8003f10 <xTimerCreateTimerTask+0x74>)
 8003ed2:	9202      	str	r2, [sp, #8]
 8003ed4:	9301      	str	r3, [sp, #4]
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	2300      	movs	r3, #0
 8003edc:	0022      	movs	r2, r4
 8003ede:	f7ff f996 	bl	800320e <xTaskCreateStatic>
 8003ee2:	0002      	movs	r2, r0
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <xTimerCreateTimerTask+0x78>)
 8003ee6:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003ee8:	4b0a      	ldr	r3, [pc, #40]	; (8003f14 <xTimerCreateTimerTask+0x78>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <xTimerCreateTimerTask+0x62>
 8003efa:	b672      	cpsid	i
 8003efc:	e7fe      	b.n	8003efc <xTimerCreateTimerTask+0x60>
	return xReturn;
 8003efe:	68fb      	ldr	r3, [r7, #12]
}
 8003f00:	0018      	movs	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	b005      	add	sp, #20
 8003f06:	bd90      	pop	{r4, r7, pc}
 8003f08:	20000cf0 	.word	0x20000cf0
 8003f0c:	08004b1c 	.word	0x08004b1c
 8003f10:	08004035 	.word	0x08004035
 8003f14:	20000cf4 	.word	0x20000cf4

08003f18 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f18:	b590      	push	{r4, r7, lr}
 8003f1a:	b08b      	sub	sp, #44	; 0x2c
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <xTimerGenericCommand+0x1c>
 8003f30:	b672      	cpsid	i
 8003f32:	e7fe      	b.n	8003f32 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003f34:	4b1c      	ldr	r3, [pc, #112]	; (8003fa8 <xTimerGenericCommand+0x90>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d030      	beq.n	8003f9e <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003f3c:	2414      	movs	r4, #20
 8003f3e:	193b      	adds	r3, r7, r4
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f44:	193b      	adds	r3, r7, r4
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003f4a:	193b      	adds	r3, r7, r4
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b05      	cmp	r3, #5
 8003f54:	dc19      	bgt.n	8003f8a <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f56:	f7ff fed5 	bl	8003d04 <xTaskGetSchedulerState>
 8003f5a:	0003      	movs	r3, r0
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d109      	bne.n	8003f74 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f60:	4b11      	ldr	r3, [pc, #68]	; (8003fa8 <xTimerGenericCommand+0x90>)
 8003f62:	6818      	ldr	r0, [r3, #0]
 8003f64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f66:	1939      	adds	r1, r7, r4
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f7fe fded 	bl	8002b48 <xQueueGenericSend>
 8003f6e:	0003      	movs	r3, r0
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
 8003f72:	e014      	b.n	8003f9e <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003f74:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <xTimerGenericCommand+0x90>)
 8003f76:	6818      	ldr	r0, [r3, #0]
 8003f78:	2314      	movs	r3, #20
 8003f7a:	18f9      	adds	r1, r7, r3
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f7fe fde2 	bl	8002b48 <xQueueGenericSend>
 8003f84:	0003      	movs	r3, r0
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
 8003f88:	e009      	b.n	8003f9e <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003f8a:	4b07      	ldr	r3, [pc, #28]	; (8003fa8 <xTimerGenericCommand+0x90>)
 8003f8c:	6818      	ldr	r0, [r3, #0]
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	2314      	movs	r3, #20
 8003f92:	18f9      	adds	r1, r7, r3
 8003f94:	2300      	movs	r3, #0
 8003f96:	f7fe fe9b 	bl	8002cd0 <xQueueGenericSendFromISR>
 8003f9a:	0003      	movs	r3, r0
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b00b      	add	sp, #44	; 0x2c
 8003fa6:	bd90      	pop	{r4, r7, pc}
 8003fa8:	20000cf0 	.word	0x20000cf0

08003fac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fb6:	4b1e      	ldr	r3, [pc, #120]	; (8004030 <prvProcessExpiredTimer+0x84>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f7fe fcd0 	bl	800296a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2228      	movs	r2, #40	; 0x28
 8003fce:	5c9b      	ldrb	r3, [r3, r2]
 8003fd0:	001a      	movs	r2, r3
 8003fd2:	2304      	movs	r3, #4
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	d019      	beq.n	800400c <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	699a      	ldr	r2, [r3, #24]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	18d1      	adds	r1, r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 f8c3 	bl	8004170 <prvInsertTimerInActiveList>
 8003fea:	1e03      	subs	r3, r0, #0
 8003fec:	d017      	beq.n	800401e <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	f7ff ff8d 	bl	8003f18 <xTimerGenericCommand>
 8003ffe:	0003      	movs	r3, r0
 8004000:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10a      	bne.n	800401e <prvProcessExpiredTimer+0x72>
 8004008:	b672      	cpsid	i
 800400a:	e7fe      	b.n	800400a <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2228      	movs	r2, #40	; 0x28
 8004010:	5c9b      	ldrb	r3, [r3, r2]
 8004012:	2201      	movs	r2, #1
 8004014:	4393      	bics	r3, r2
 8004016:	b2d9      	uxtb	r1, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2228      	movs	r2, #40	; 0x28
 800401c:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	0010      	movs	r0, r2
 8004026:	4798      	blx	r3
}
 8004028:	46c0      	nop			; (mov r8, r8)
 800402a:	46bd      	mov	sp, r7
 800402c:	b004      	add	sp, #16
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20000ce8 	.word	0x20000ce8

08004034 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800403c:	2308      	movs	r3, #8
 800403e:	18fb      	adds	r3, r7, r3
 8004040:	0018      	movs	r0, r3
 8004042:	f000 f853 	bl	80040ec <prvGetNextExpireTime>
 8004046:	0003      	movs	r3, r0
 8004048:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	0011      	movs	r1, r2
 8004050:	0018      	movs	r0, r3
 8004052:	f000 f803 	bl	800405c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004056:	f000 f8cd 	bl	80041f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800405a:	e7ef      	b.n	800403c <prvTimerTask+0x8>

0800405c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004066:	f7ff facf 	bl	8003608 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800406a:	2308      	movs	r3, #8
 800406c:	18fb      	adds	r3, r7, r3
 800406e:	0018      	movs	r0, r3
 8004070:	f000 f85e 	bl	8004130 <prvSampleTimeNow>
 8004074:	0003      	movs	r3, r0
 8004076:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d12b      	bne.n	80040d6 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10c      	bne.n	800409e <prvProcessTimerOrBlockTask+0x42>
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	429a      	cmp	r2, r3
 800408a:	d808      	bhi.n	800409e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800408c:	f7ff fac8 	bl	8003620 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	0011      	movs	r1, r2
 8004096:	0018      	movs	r0, r3
 8004098:	f7ff ff88 	bl	8003fac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800409c:	e01d      	b.n	80040da <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d008      	beq.n	80040b6 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80040a4:	4b0f      	ldr	r3, [pc, #60]	; (80040e4 <prvProcessTimerOrBlockTask+0x88>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <prvProcessTimerOrBlockTask+0x56>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <prvProcessTimerOrBlockTask+0x58>
 80040b2:	2300      	movs	r3, #0
 80040b4:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80040b6:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <prvProcessTimerOrBlockTask+0x8c>)
 80040b8:	6818      	ldr	r0, [r3, #0]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	0019      	movs	r1, r3
 80040c4:	f7ff f870 	bl	80031a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80040c8:	f7ff faaa 	bl	8003620 <xTaskResumeAll>
 80040cc:	1e03      	subs	r3, r0, #0
 80040ce:	d104      	bne.n	80040da <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 80040d0:	f000 fa7e 	bl	80045d0 <vPortYield>
}
 80040d4:	e001      	b.n	80040da <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 80040d6:	f7ff faa3 	bl	8003620 <xTaskResumeAll>
}
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	46bd      	mov	sp, r7
 80040de:	b004      	add	sp, #16
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	20000cec 	.word	0x20000cec
 80040e8:	20000cf0 	.word	0x20000cf0

080040ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80040f4:	4b0d      	ldr	r3, [pc, #52]	; (800412c <prvGetNextExpireTime+0x40>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <prvGetNextExpireTime+0x16>
 80040fe:	2201      	movs	r2, #1
 8004100:	e000      	b.n	8004104 <prvGetNextExpireTime+0x18>
 8004102:	2200      	movs	r2, #0
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d105      	bne.n	800411c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004110:	4b06      	ldr	r3, [pc, #24]	; (800412c <prvGetNextExpireTime+0x40>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	e001      	b.n	8004120 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004120:	68fb      	ldr	r3, [r7, #12]
}
 8004122:	0018      	movs	r0, r3
 8004124:	46bd      	mov	sp, r7
 8004126:	b004      	add	sp, #16
 8004128:	bd80      	pop	{r7, pc}
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	20000ce8 	.word	0x20000ce8

08004130 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004138:	f7ff fafe 	bl	8003738 <xTaskGetTickCount>
 800413c:	0003      	movs	r3, r0
 800413e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8004140:	4b0a      	ldr	r3, [pc, #40]	; (800416c <prvSampleTimeNow+0x3c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	429a      	cmp	r2, r3
 8004148:	d205      	bcs.n	8004156 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800414a:	f000 f919 	bl	8004380 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	e002      	b.n	800415c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800415c:	4b03      	ldr	r3, [pc, #12]	; (800416c <prvSampleTimeNow+0x3c>)
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8004162:	68fb      	ldr	r3, [r7, #12]
}
 8004164:	0018      	movs	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	b004      	add	sp, #16
 800416a:	bd80      	pop	{r7, pc}
 800416c:	20000cf8 	.word	0x20000cf8

08004170 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800417e:	2300      	movs	r3, #0
 8004180:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	429a      	cmp	r2, r3
 8004194:	d812      	bhi.n	80041bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	1ad2      	subs	r2, r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d302      	bcc.n	80041aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80041a4:	2301      	movs	r3, #1
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	e01b      	b.n	80041e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80041aa:	4b10      	ldr	r3, [pc, #64]	; (80041ec <prvInsertTimerInActiveList+0x7c>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	3304      	adds	r3, #4
 80041b2:	0019      	movs	r1, r3
 80041b4:	0010      	movs	r0, r2
 80041b6:	f7fe fba2 	bl	80028fe <vListInsert>
 80041ba:	e012      	b.n	80041e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d206      	bcs.n	80041d2 <prvInsertTimerInActiveList+0x62>
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d302      	bcc.n	80041d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80041cc:	2301      	movs	r3, #1
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	e007      	b.n	80041e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041d2:	4b07      	ldr	r3, [pc, #28]	; (80041f0 <prvInsertTimerInActiveList+0x80>)
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	3304      	adds	r3, #4
 80041da:	0019      	movs	r1, r3
 80041dc:	0010      	movs	r0, r2
 80041de:	f7fe fb8e 	bl	80028fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 80041e2:	697b      	ldr	r3, [r7, #20]
}
 80041e4:	0018      	movs	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b006      	add	sp, #24
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	20000cec 	.word	0x20000cec
 80041f0:	20000ce8 	.word	0x20000ce8

080041f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80041f4:	b590      	push	{r4, r7, lr}
 80041f6:	b08d      	sub	sp, #52	; 0x34
 80041f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041fa:	e0ac      	b.n	8004356 <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80041fc:	2208      	movs	r2, #8
 80041fe:	18bb      	adds	r3, r7, r2
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	da0f      	bge.n	8004226 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004206:	18bb      	adds	r3, r7, r2
 8004208:	3304      	adds	r3, #4
 800420a:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <prvProcessReceivedCommands+0x22>
 8004212:	b672      	cpsid	i
 8004214:	e7fe      	b.n	8004214 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	6858      	ldr	r0, [r3, #4]
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	0019      	movs	r1, r3
 8004224:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004226:	2208      	movs	r2, #8
 8004228:	18bb      	adds	r3, r7, r2
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	da00      	bge.n	8004232 <prvProcessReceivedCommands+0x3e>
 8004230:	e090      	b.n	8004354 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004232:	18bb      	adds	r3, r7, r2
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d004      	beq.n	800424a <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	3304      	adds	r3, #4
 8004244:	0018      	movs	r0, r3
 8004246:	f7fe fb90 	bl	800296a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800424a:	1d3b      	adds	r3, r7, #4
 800424c:	0018      	movs	r0, r3
 800424e:	f7ff ff6f 	bl	8004130 <prvSampleTimeNow>
 8004252:	0003      	movs	r3, r0
 8004254:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8004256:	2308      	movs	r3, #8
 8004258:	18fb      	adds	r3, r7, r3
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b09      	cmp	r3, #9
 800425e:	d900      	bls.n	8004262 <prvProcessReceivedCommands+0x6e>
 8004260:	e079      	b.n	8004356 <prvProcessReceivedCommands+0x162>
 8004262:	009a      	lsls	r2, r3, #2
 8004264:	4b44      	ldr	r3, [pc, #272]	; (8004378 <prvProcessReceivedCommands+0x184>)
 8004266:	18d3      	adds	r3, r2, r3
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	2228      	movs	r2, #40	; 0x28
 8004270:	5c9b      	ldrb	r3, [r3, r2]
 8004272:	2201      	movs	r2, #1
 8004274:	4313      	orrs	r3, r2
 8004276:	b2d9      	uxtb	r1, r3
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	2228      	movs	r2, #40	; 0x28
 800427c:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800427e:	2408      	movs	r4, #8
 8004280:	193b      	adds	r3, r7, r4
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	18d1      	adds	r1, r2, r3
 800428a:	193b      	adds	r3, r7, r4
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	69fa      	ldr	r2, [r7, #28]
 8004290:	6a38      	ldr	r0, [r7, #32]
 8004292:	f7ff ff6d 	bl	8004170 <prvInsertTimerInActiveList>
 8004296:	1e03      	subs	r3, r0, #0
 8004298:	d05d      	beq.n	8004356 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	6a3a      	ldr	r2, [r7, #32]
 80042a0:	0010      	movs	r0, r2
 80042a2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	2228      	movs	r2, #40	; 0x28
 80042a8:	5c9b      	ldrb	r3, [r3, r2]
 80042aa:	001a      	movs	r2, r3
 80042ac:	2304      	movs	r3, #4
 80042ae:	4013      	ands	r3, r2
 80042b0:	d051      	beq.n	8004356 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80042b2:	193b      	adds	r3, r7, r4
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	18d2      	adds	r2, r2, r3
 80042bc:	6a38      	ldr	r0, [r7, #32]
 80042be:	2300      	movs	r3, #0
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	2300      	movs	r3, #0
 80042c4:	2100      	movs	r1, #0
 80042c6:	f7ff fe27 	bl	8003f18 <xTimerGenericCommand>
 80042ca:	0003      	movs	r3, r0
 80042cc:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d140      	bne.n	8004356 <prvProcessReceivedCommands+0x162>
 80042d4:	b672      	cpsid	i
 80042d6:	e7fe      	b.n	80042d6 <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	2228      	movs	r2, #40	; 0x28
 80042dc:	5c9b      	ldrb	r3, [r3, r2]
 80042de:	2201      	movs	r2, #1
 80042e0:	4393      	bics	r3, r2
 80042e2:	b2d9      	uxtb	r1, r3
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	2228      	movs	r2, #40	; 0x28
 80042e8:	5499      	strb	r1, [r3, r2]
					break;
 80042ea:	e034      	b.n	8004356 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	2228      	movs	r2, #40	; 0x28
 80042f0:	5c9b      	ldrb	r3, [r3, r2]
 80042f2:	2201      	movs	r2, #1
 80042f4:	4313      	orrs	r3, r2
 80042f6:	b2d9      	uxtb	r1, r3
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	2228      	movs	r2, #40	; 0x28
 80042fc:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80042fe:	2308      	movs	r3, #8
 8004300:	18fb      	adds	r3, r7, r3
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <prvProcessReceivedCommands+0x120>
 8004310:	b672      	cpsid	i
 8004312:	e7fe      	b.n	8004312 <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	699a      	ldr	r2, [r3, #24]
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	18d1      	adds	r1, r2, r3
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	6a38      	ldr	r0, [r7, #32]
 8004322:	f7ff ff25 	bl	8004170 <prvInsertTimerInActiveList>
					break;
 8004326:	e016      	b.n	8004356 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	2228      	movs	r2, #40	; 0x28
 800432c:	5c9b      	ldrb	r3, [r3, r2]
 800432e:	001a      	movs	r2, r3
 8004330:	2302      	movs	r3, #2
 8004332:	4013      	ands	r3, r2
 8004334:	d104      	bne.n	8004340 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	0018      	movs	r0, r3
 800433a:	f000 fa97 	bl	800486c <vPortFree>
 800433e:	e00a      	b.n	8004356 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	2228      	movs	r2, #40	; 0x28
 8004344:	5c9b      	ldrb	r3, [r3, r2]
 8004346:	2201      	movs	r2, #1
 8004348:	4393      	bics	r3, r2
 800434a:	b2d9      	uxtb	r1, r3
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	2228      	movs	r2, #40	; 0x28
 8004350:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004352:	e000      	b.n	8004356 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004354:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004356:	4b09      	ldr	r3, [pc, #36]	; (800437c <prvProcessReceivedCommands+0x188>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2208      	movs	r2, #8
 800435c:	18b9      	adds	r1, r7, r2
 800435e:	2200      	movs	r2, #0
 8004360:	0018      	movs	r0, r3
 8004362:	f7fe fd26 	bl	8002db2 <xQueueReceive>
 8004366:	1e03      	subs	r3, r0, #0
 8004368:	d000      	beq.n	800436c <prvProcessReceivedCommands+0x178>
 800436a:	e747      	b.n	80041fc <prvProcessReceivedCommands+0x8>
	}
}
 800436c:	46c0      	nop			; (mov r8, r8)
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	46bd      	mov	sp, r7
 8004372:	b00b      	add	sp, #44	; 0x2c
 8004374:	bd90      	pop	{r4, r7, pc}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	08004c04 	.word	0x08004c04
 800437c:	20000cf0 	.word	0x20000cf0

08004380 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b088      	sub	sp, #32
 8004384:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004386:	e041      	b.n	800440c <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004388:	4b2a      	ldr	r3, [pc, #168]	; (8004434 <prvSwitchTimerLists+0xb4>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004392:	4b28      	ldr	r3, [pc, #160]	; (8004434 <prvSwitchTimerLists+0xb4>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3304      	adds	r3, #4
 80043a0:	0018      	movs	r0, r3
 80043a2:	f7fe fae2 	bl	800296a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	0010      	movs	r0, r2
 80043ae:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2228      	movs	r2, #40	; 0x28
 80043b4:	5c9b      	ldrb	r3, [r3, r2]
 80043b6:	001a      	movs	r2, r3
 80043b8:	2304      	movs	r3, #4
 80043ba:	4013      	ands	r3, r2
 80043bc:	d026      	beq.n	800440c <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	18d3      	adds	r3, r2, r3
 80043c6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d90e      	bls.n	80043ee <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043dc:	4b15      	ldr	r3, [pc, #84]	; (8004434 <prvSwitchTimerLists+0xb4>)
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	3304      	adds	r3, #4
 80043e4:	0019      	movs	r1, r3
 80043e6:	0010      	movs	r0, r2
 80043e8:	f7fe fa89 	bl	80028fe <vListInsert>
 80043ec:	e00e      	b.n	800440c <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	2300      	movs	r3, #0
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	2300      	movs	r3, #0
 80043f8:	2100      	movs	r1, #0
 80043fa:	f7ff fd8d 	bl	8003f18 <xTimerGenericCommand>
 80043fe:	0003      	movs	r3, r0
 8004400:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <prvSwitchTimerLists+0x8c>
 8004408:	b672      	cpsid	i
 800440a:	e7fe      	b.n	800440a <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800440c:	4b09      	ldr	r3, [pc, #36]	; (8004434 <prvSwitchTimerLists+0xb4>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1b8      	bne.n	8004388 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004416:	4b07      	ldr	r3, [pc, #28]	; (8004434 <prvSwitchTimerLists+0xb4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800441c:	4b06      	ldr	r3, [pc, #24]	; (8004438 <prvSwitchTimerLists+0xb8>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	4b04      	ldr	r3, [pc, #16]	; (8004434 <prvSwitchTimerLists+0xb4>)
 8004422:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8004424:	4b04      	ldr	r3, [pc, #16]	; (8004438 <prvSwitchTimerLists+0xb8>)
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	601a      	str	r2, [r3, #0]
}
 800442a:	46c0      	nop			; (mov r8, r8)
 800442c:	46bd      	mov	sp, r7
 800442e:	b006      	add	sp, #24
 8004430:	bd80      	pop	{r7, pc}
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	20000ce8 	.word	0x20000ce8
 8004438:	20000cec 	.word	0x20000cec

0800443c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004442:	f000 f8d5 	bl	80045f0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004446:	4b16      	ldr	r3, [pc, #88]	; (80044a0 <prvCheckForValidListAndQueue+0x64>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d123      	bne.n	8004496 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800444e:	4b15      	ldr	r3, [pc, #84]	; (80044a4 <prvCheckForValidListAndQueue+0x68>)
 8004450:	0018      	movs	r0, r3
 8004452:	f7fe fa09 	bl	8002868 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004456:	4b14      	ldr	r3, [pc, #80]	; (80044a8 <prvCheckForValidListAndQueue+0x6c>)
 8004458:	0018      	movs	r0, r3
 800445a:	f7fe fa05 	bl	8002868 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800445e:	4b13      	ldr	r3, [pc, #76]	; (80044ac <prvCheckForValidListAndQueue+0x70>)
 8004460:	4a10      	ldr	r2, [pc, #64]	; (80044a4 <prvCheckForValidListAndQueue+0x68>)
 8004462:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004464:	4b12      	ldr	r3, [pc, #72]	; (80044b0 <prvCheckForValidListAndQueue+0x74>)
 8004466:	4a10      	ldr	r2, [pc, #64]	; (80044a8 <prvCheckForValidListAndQueue+0x6c>)
 8004468:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800446a:	4b12      	ldr	r3, [pc, #72]	; (80044b4 <prvCheckForValidListAndQueue+0x78>)
 800446c:	4a12      	ldr	r2, [pc, #72]	; (80044b8 <prvCheckForValidListAndQueue+0x7c>)
 800446e:	2100      	movs	r1, #0
 8004470:	9100      	str	r1, [sp, #0]
 8004472:	2110      	movs	r1, #16
 8004474:	200a      	movs	r0, #10
 8004476:	f7fe faf4 	bl	8002a62 <xQueueGenericCreateStatic>
 800447a:	0002      	movs	r2, r0
 800447c:	4b08      	ldr	r3, [pc, #32]	; (80044a0 <prvCheckForValidListAndQueue+0x64>)
 800447e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004480:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <prvCheckForValidListAndQueue+0x64>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d006      	beq.n	8004496 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004488:	4b05      	ldr	r3, [pc, #20]	; (80044a0 <prvCheckForValidListAndQueue+0x64>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a0b      	ldr	r2, [pc, #44]	; (80044bc <prvCheckForValidListAndQueue+0x80>)
 800448e:	0011      	movs	r1, r2
 8004490:	0018      	movs	r0, r3
 8004492:	f7fe fe61 	bl	8003158 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004496:	f000 f8bd 	bl	8004614 <vPortExitCritical>
}
 800449a:	46c0      	nop			; (mov r8, r8)
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20000cf0 	.word	0x20000cf0
 80044a4:	20000cc0 	.word	0x20000cc0
 80044a8:	20000cd4 	.word	0x20000cd4
 80044ac:	20000ce8 	.word	0x20000ce8
 80044b0:	20000cec 	.word	0x20000cec
 80044b4:	20000d9c 	.word	0x20000d9c
 80044b8:	20000cfc 	.word	0x20000cfc
 80044bc:	08004b24 	.word	0x08004b24

080044c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	3b04      	subs	r3, #4
 80044d0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2280      	movs	r2, #128	; 0x80
 80044d6:	0452      	lsls	r2, r2, #17
 80044d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3b04      	subs	r3, #4
 80044de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	3b04      	subs	r3, #4
 80044ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044ec:	4a08      	ldr	r2, [pc, #32]	; (8004510 <pxPortInitialiseStack+0x50>)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	3b14      	subs	r3, #20
 80044f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	3b20      	subs	r3, #32
 8004502:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004504:	68fb      	ldr	r3, [r7, #12]
}
 8004506:	0018      	movs	r0, r3
 8004508:	46bd      	mov	sp, r7
 800450a:	b004      	add	sp, #16
 800450c:	bd80      	pop	{r7, pc}
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	08004515 	.word	0x08004515

08004514 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800451a:	2300      	movs	r3, #0
 800451c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800451e:	4b08      	ldr	r3, [pc, #32]	; (8004540 <prvTaskExitError+0x2c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3301      	adds	r3, #1
 8004524:	d001      	beq.n	800452a <prvTaskExitError+0x16>
 8004526:	b672      	cpsid	i
 8004528:	e7fe      	b.n	8004528 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800452a:	b672      	cpsid	i
	while( ulDummy == 0 )
 800452c:	46c0      	nop			; (mov r8, r8)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0fc      	beq.n	800452e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004534:	46c0      	nop			; (mov r8, r8)
 8004536:	46c0      	nop			; (mov r8, r8)
 8004538:	46bd      	mov	sp, r7
 800453a:	b002      	add	sp, #8
 800453c:	bd80      	pop	{r7, pc}
 800453e:	46c0      	nop			; (mov r8, r8)
 8004540:	2000000c 	.word	0x2000000c

08004544 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8004548:	46c0      	nop			; (mov r8, r8)
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004550:	4a0b      	ldr	r2, [pc, #44]	; (8004580 <pxCurrentTCBConst2>)
 8004552:	6813      	ldr	r3, [r2, #0]
 8004554:	6818      	ldr	r0, [r3, #0]
 8004556:	3020      	adds	r0, #32
 8004558:	f380 8809 	msr	PSP, r0
 800455c:	2002      	movs	r0, #2
 800455e:	f380 8814 	msr	CONTROL, r0
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004568:	46ae      	mov	lr, r5
 800456a:	bc08      	pop	{r3}
 800456c:	bc04      	pop	{r2}
 800456e:	b662      	cpsie	i
 8004570:	4718      	bx	r3
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	46c0      	nop			; (mov r8, r8)
 8004576:	46c0      	nop			; (mov r8, r8)
 8004578:	46c0      	nop			; (mov r8, r8)
 800457a:	46c0      	nop			; (mov r8, r8)
 800457c:	46c0      	nop			; (mov r8, r8)
 800457e:	46c0      	nop			; (mov r8, r8)

08004580 <pxCurrentTCBConst2>:
 8004580:	200007c0 	.word	0x200007c0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8004584:	46c0      	nop			; (mov r8, r8)
 8004586:	46c0      	nop			; (mov r8, r8)

08004588 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800458c:	4b0e      	ldr	r3, [pc, #56]	; (80045c8 <xPortStartScheduler+0x40>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <xPortStartScheduler+0x40>)
 8004592:	21ff      	movs	r1, #255	; 0xff
 8004594:	0409      	lsls	r1, r1, #16
 8004596:	430a      	orrs	r2, r1
 8004598:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800459a:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <xPortStartScheduler+0x40>)
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	4b0a      	ldr	r3, [pc, #40]	; (80045c8 <xPortStartScheduler+0x40>)
 80045a0:	21ff      	movs	r1, #255	; 0xff
 80045a2:	0609      	lsls	r1, r1, #24
 80045a4:	430a      	orrs	r2, r1
 80045a6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80045a8:	f000 f898 	bl	80046dc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80045ac:	4b07      	ldr	r3, [pc, #28]	; (80045cc <xPortStartScheduler+0x44>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80045b2:	f7ff ffcd 	bl	8004550 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80045b6:	f7ff f97d 	bl	80038b4 <vTaskSwitchContext>
	prvTaskExitError();
 80045ba:	f7ff ffab 	bl	8004514 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	0018      	movs	r0, r3
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	e000ed20 	.word	0xe000ed20
 80045cc:	2000000c 	.word	0x2000000c

080045d0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80045d4:	4b05      	ldr	r3, [pc, #20]	; (80045ec <vPortYield+0x1c>)
 80045d6:	2280      	movs	r2, #128	; 0x80
 80045d8:	0552      	lsls	r2, r2, #21
 80045da:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80045dc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80045e0:	f3bf 8f6f 	isb	sy
}
 80045e4:	46c0      	nop			; (mov r8, r8)
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	e000ed04 	.word	0xe000ed04

080045f0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80045f4:	b672      	cpsid	i
    uxCriticalNesting++;
 80045f6:	4b06      	ldr	r3, [pc, #24]	; (8004610 <vPortEnterCritical+0x20>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	4b04      	ldr	r3, [pc, #16]	; (8004610 <vPortEnterCritical+0x20>)
 80045fe:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004600:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004604:	f3bf 8f6f 	isb	sy
}
 8004608:	46c0      	nop			; (mov r8, r8)
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	2000000c 	.word	0x2000000c

08004614 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004618:	4b09      	ldr	r3, [pc, #36]	; (8004640 <vPortExitCritical+0x2c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <vPortExitCritical+0x10>
 8004620:	b672      	cpsid	i
 8004622:	e7fe      	b.n	8004622 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004624:	4b06      	ldr	r3, [pc, #24]	; (8004640 <vPortExitCritical+0x2c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	1e5a      	subs	r2, r3, #1
 800462a:	4b05      	ldr	r3, [pc, #20]	; (8004640 <vPortExitCritical+0x2c>)
 800462c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800462e:	4b04      	ldr	r3, [pc, #16]	; (8004640 <vPortExitCritical+0x2c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d100      	bne.n	8004638 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8004636:	b662      	cpsie	i
    }
}
 8004638:	46c0      	nop			; (mov r8, r8)
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	46c0      	nop			; (mov r8, r8)
 8004640:	2000000c 	.word	0x2000000c

08004644 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004644:	f3ef 8010 	mrs	r0, PRIMASK
 8004648:	b672      	cpsid	i
 800464a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800464c:	46c0      	nop			; (mov r8, r8)
 800464e:	0018      	movs	r0, r3

08004650 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8004650:	f380 8810 	msr	PRIMASK, r0
 8004654:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8004656:	46c0      	nop			; (mov r8, r8)
	...

08004660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004660:	f3ef 8009 	mrs	r0, PSP
 8004664:	4b0e      	ldr	r3, [pc, #56]	; (80046a0 <pxCurrentTCBConst>)
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	3820      	subs	r0, #32
 800466a:	6010      	str	r0, [r2, #0]
 800466c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800466e:	4644      	mov	r4, r8
 8004670:	464d      	mov	r5, r9
 8004672:	4656      	mov	r6, sl
 8004674:	465f      	mov	r7, fp
 8004676:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004678:	b508      	push	{r3, lr}
 800467a:	b672      	cpsid	i
 800467c:	f7ff f91a 	bl	80038b4 <vTaskSwitchContext>
 8004680:	b662      	cpsie	i
 8004682:	bc0c      	pop	{r2, r3}
 8004684:	6811      	ldr	r1, [r2, #0]
 8004686:	6808      	ldr	r0, [r1, #0]
 8004688:	3010      	adds	r0, #16
 800468a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800468c:	46a0      	mov	r8, r4
 800468e:	46a9      	mov	r9, r5
 8004690:	46b2      	mov	sl, r6
 8004692:	46bb      	mov	fp, r7
 8004694:	f380 8809 	msr	PSP, r0
 8004698:	3820      	subs	r0, #32
 800469a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800469c:	4718      	bx	r3
 800469e:	46c0      	nop			; (mov r8, r8)

080046a0 <pxCurrentTCBConst>:
 80046a0:	200007c0 	.word	0x200007c0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80046a4:	46c0      	nop			; (mov r8, r8)
 80046a6:	46c0      	nop			; (mov r8, r8)

080046a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80046ae:	f7ff ffc9 	bl	8004644 <ulSetInterruptMaskFromISR>
 80046b2:	0003      	movs	r3, r0
 80046b4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80046b6:	f7ff f84d 	bl	8003754 <xTaskIncrementTick>
 80046ba:	1e03      	subs	r3, r0, #0
 80046bc:	d003      	beq.n	80046c6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80046be:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <xPortSysTickHandler+0x30>)
 80046c0:	2280      	movs	r2, #128	; 0x80
 80046c2:	0552      	lsls	r2, r2, #21
 80046c4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	0018      	movs	r0, r3
 80046ca:	f7ff ffc1 	bl	8004650 <vClearInterruptMaskFromISR>
}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	46bd      	mov	sp, r7
 80046d2:	b002      	add	sp, #8
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	e000ed04 	.word	0xe000ed04

080046dc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80046e0:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <prvSetupTimerInterrupt+0x34>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80046e6:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <prvSetupTimerInterrupt+0x38>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046ec:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <prvSetupTimerInterrupt+0x3c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	22fa      	movs	r2, #250	; 0xfa
 80046f2:	0091      	lsls	r1, r2, #2
 80046f4:	0018      	movs	r0, r3
 80046f6:	f7fb fd07 	bl	8000108 <__udivsi3>
 80046fa:	0003      	movs	r3, r0
 80046fc:	001a      	movs	r2, r3
 80046fe:	4b07      	ldr	r3, [pc, #28]	; (800471c <prvSetupTimerInterrupt+0x40>)
 8004700:	3a01      	subs	r2, #1
 8004702:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8004704:	4b02      	ldr	r3, [pc, #8]	; (8004710 <prvSetupTimerInterrupt+0x34>)
 8004706:	2207      	movs	r2, #7
 8004708:	601a      	str	r2, [r3, #0]
}
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	e000e010 	.word	0xe000e010
 8004714:	e000e018 	.word	0xe000e018
 8004718:	20000000 	.word	0x20000000
 800471c:	e000e014 	.word	0xe000e014

08004720 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004728:	2300      	movs	r3, #0
 800472a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800472c:	f7fe ff6c 	bl	8003608 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004730:	4b49      	ldr	r3, [pc, #292]	; (8004858 <pvPortMalloc+0x138>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004738:	f000 f8e0 	bl	80048fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800473c:	4b47      	ldr	r3, [pc, #284]	; (800485c <pvPortMalloc+0x13c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	4013      	ands	r3, r2
 8004744:	d000      	beq.n	8004748 <pvPortMalloc+0x28>
 8004746:	e079      	b.n	800483c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d012      	beq.n	8004774 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800474e:	2208      	movs	r2, #8
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	189b      	adds	r3, r3, r2
 8004754:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2207      	movs	r2, #7
 800475a:	4013      	ands	r3, r2
 800475c:	d00a      	beq.n	8004774 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2207      	movs	r2, #7
 8004762:	4393      	bics	r3, r2
 8004764:	3308      	adds	r3, #8
 8004766:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2207      	movs	r2, #7
 800476c:	4013      	ands	r3, r2
 800476e:	d001      	beq.n	8004774 <pvPortMalloc+0x54>
 8004770:	b672      	cpsid	i
 8004772:	e7fe      	b.n	8004772 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d060      	beq.n	800483c <pvPortMalloc+0x11c>
 800477a:	4b39      	ldr	r3, [pc, #228]	; (8004860 <pvPortMalloc+0x140>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	429a      	cmp	r2, r3
 8004782:	d85b      	bhi.n	800483c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004784:	4b37      	ldr	r3, [pc, #220]	; (8004864 <pvPortMalloc+0x144>)
 8004786:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8004788:	4b36      	ldr	r3, [pc, #216]	; (8004864 <pvPortMalloc+0x144>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800478e:	e004      	b.n	800479a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d903      	bls.n	80047ac <pvPortMalloc+0x8c>
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1f1      	bne.n	8004790 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80047ac:	4b2a      	ldr	r3, [pc, #168]	; (8004858 <pvPortMalloc+0x138>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d042      	beq.n	800483c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2208      	movs	r2, #8
 80047bc:	189b      	adds	r3, r3, r2
 80047be:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	1ad2      	subs	r2, r2, r3
 80047d0:	2308      	movs	r3, #8
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d916      	bls.n	8004806 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	18d3      	adds	r3, r2, r3
 80047de:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2207      	movs	r2, #7
 80047e4:	4013      	ands	r3, r2
 80047e6:	d001      	beq.n	80047ec <pvPortMalloc+0xcc>
 80047e8:	b672      	cpsid	i
 80047ea:	e7fe      	b.n	80047ea <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	1ad2      	subs	r2, r2, r3
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	0018      	movs	r0, r3
 8004802:	f000 f8db 	bl	80049bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004806:	4b16      	ldr	r3, [pc, #88]	; (8004860 <pvPortMalloc+0x140>)
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	1ad2      	subs	r2, r2, r3
 8004810:	4b13      	ldr	r3, [pc, #76]	; (8004860 <pvPortMalloc+0x140>)
 8004812:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004814:	4b12      	ldr	r3, [pc, #72]	; (8004860 <pvPortMalloc+0x140>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	4b13      	ldr	r3, [pc, #76]	; (8004868 <pvPortMalloc+0x148>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d203      	bcs.n	8004828 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004820:	4b0f      	ldr	r3, [pc, #60]	; (8004860 <pvPortMalloc+0x140>)
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	4b10      	ldr	r3, [pc, #64]	; (8004868 <pvPortMalloc+0x148>)
 8004826:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	4b0b      	ldr	r3, [pc, #44]	; (800485c <pvPortMalloc+0x13c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	431a      	orrs	r2, r3
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800483c:	f7fe fef0 	bl	8003620 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2207      	movs	r2, #7
 8004844:	4013      	ands	r3, r2
 8004846:	d001      	beq.n	800484c <pvPortMalloc+0x12c>
 8004848:	b672      	cpsid	i
 800484a:	e7fe      	b.n	800484a <pvPortMalloc+0x12a>
	return pvReturn;
 800484c:	68fb      	ldr	r3, [r7, #12]
}
 800484e:	0018      	movs	r0, r3
 8004850:	46bd      	mov	sp, r7
 8004852:	b006      	add	sp, #24
 8004854:	bd80      	pop	{r7, pc}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	200019f4 	.word	0x200019f4
 800485c:	20001a00 	.word	0x20001a00
 8004860:	200019f8 	.word	0x200019f8
 8004864:	200019ec 	.word	0x200019ec
 8004868:	200019fc 	.word	0x200019fc

0800486c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d035      	beq.n	80048ea <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800487e:	2308      	movs	r3, #8
 8004880:	425b      	negs	r3, r3
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	18d3      	adds	r3, r2, r3
 8004886:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	4b18      	ldr	r3, [pc, #96]	; (80048f4 <vPortFree+0x88>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4013      	ands	r3, r2
 8004896:	d101      	bne.n	800489c <vPortFree+0x30>
 8004898:	b672      	cpsid	i
 800489a:	e7fe      	b.n	800489a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <vPortFree+0x3c>
 80048a4:	b672      	cpsid	i
 80048a6:	e7fe      	b.n	80048a6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	4b11      	ldr	r3, [pc, #68]	; (80048f4 <vPortFree+0x88>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4013      	ands	r3, r2
 80048b2:	d01a      	beq.n	80048ea <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d116      	bne.n	80048ea <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <vPortFree+0x88>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	43db      	mvns	r3, r3
 80048c6:	401a      	ands	r2, r3
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80048cc:	f7fe fe9c 	bl	8003608 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	4b08      	ldr	r3, [pc, #32]	; (80048f8 <vPortFree+0x8c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	18d2      	adds	r2, r2, r3
 80048da:	4b07      	ldr	r3, [pc, #28]	; (80048f8 <vPortFree+0x8c>)
 80048dc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	0018      	movs	r0, r3
 80048e2:	f000 f86b 	bl	80049bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80048e6:	f7fe fe9b 	bl	8003620 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	46bd      	mov	sp, r7
 80048ee:	b004      	add	sp, #16
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	20001a00 	.word	0x20001a00
 80048f8:	200019f8 	.word	0x200019f8

080048fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004902:	23c0      	movs	r3, #192	; 0xc0
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004908:	4b26      	ldr	r3, [pc, #152]	; (80049a4 <prvHeapInit+0xa8>)
 800490a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2207      	movs	r2, #7
 8004910:	4013      	ands	r3, r2
 8004912:	d00c      	beq.n	800492e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	3307      	adds	r3, #7
 8004918:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2207      	movs	r2, #7
 800491e:	4393      	bics	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	1ad2      	subs	r2, r2, r3
 8004928:	4b1e      	ldr	r3, [pc, #120]	; (80049a4 <prvHeapInit+0xa8>)
 800492a:	18d3      	adds	r3, r2, r3
 800492c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004932:	4b1d      	ldr	r3, [pc, #116]	; (80049a8 <prvHeapInit+0xac>)
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004938:	4b1b      	ldr	r3, [pc, #108]	; (80049a8 <prvHeapInit+0xac>)
 800493a:	2200      	movs	r2, #0
 800493c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	18d3      	adds	r3, r2, r3
 8004944:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004946:	2208      	movs	r2, #8
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	1a9b      	subs	r3, r3, r2
 800494c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2207      	movs	r2, #7
 8004952:	4393      	bics	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	4b14      	ldr	r3, [pc, #80]	; (80049ac <prvHeapInit+0xb0>)
 800495a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800495c:	4b13      	ldr	r3, [pc, #76]	; (80049ac <prvHeapInit+0xb0>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2200      	movs	r2, #0
 8004962:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004964:	4b11      	ldr	r3, [pc, #68]	; (80049ac <prvHeapInit+0xb0>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	1ad2      	subs	r2, r2, r3
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800497a:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <prvHeapInit+0xb0>)
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	4b0a      	ldr	r3, [pc, #40]	; (80049b0 <prvHeapInit+0xb4>)
 8004988:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	4b09      	ldr	r3, [pc, #36]	; (80049b4 <prvHeapInit+0xb8>)
 8004990:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004992:	4b09      	ldr	r3, [pc, #36]	; (80049b8 <prvHeapInit+0xbc>)
 8004994:	2280      	movs	r2, #128	; 0x80
 8004996:	0612      	lsls	r2, r2, #24
 8004998:	601a      	str	r2, [r3, #0]
}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	46bd      	mov	sp, r7
 800499e:	b004      	add	sp, #16
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	20000dec 	.word	0x20000dec
 80049a8:	200019ec 	.word	0x200019ec
 80049ac:	200019f4 	.word	0x200019f4
 80049b0:	200019fc 	.word	0x200019fc
 80049b4:	200019f8 	.word	0x200019f8
 80049b8:	20001a00 	.word	0x20001a00

080049bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049c4:	4b27      	ldr	r3, [pc, #156]	; (8004a64 <prvInsertBlockIntoFreeList+0xa8>)
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	e002      	b.n	80049d0 <prvInsertBlockIntoFreeList+0x14>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d8f7      	bhi.n	80049ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	18d3      	adds	r3, r2, r3
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d108      	bne.n	80049fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	18d2      	adds	r2, r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	18d2      	adds	r2, r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d118      	bne.n	8004a44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	4b14      	ldr	r3, [pc, #80]	; (8004a68 <prvInsertBlockIntoFreeList+0xac>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d00d      	beq.n	8004a3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	18d2      	adds	r2, r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	e008      	b.n	8004a4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <prvInsertBlockIntoFreeList+0xac>)
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	e003      	b.n	8004a4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d002      	beq.n	8004a5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a5a:	46c0      	nop			; (mov r8, r8)
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	b004      	add	sp, #16
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	200019ec 	.word	0x200019ec
 8004a68:	200019f4 	.word	0x200019f4

08004a6c <__libc_init_array>:
 8004a6c:	b570      	push	{r4, r5, r6, lr}
 8004a6e:	2600      	movs	r6, #0
 8004a70:	4d0c      	ldr	r5, [pc, #48]	; (8004aa4 <__libc_init_array+0x38>)
 8004a72:	4c0d      	ldr	r4, [pc, #52]	; (8004aa8 <__libc_init_array+0x3c>)
 8004a74:	1b64      	subs	r4, r4, r5
 8004a76:	10a4      	asrs	r4, r4, #2
 8004a78:	42a6      	cmp	r6, r4
 8004a7a:	d109      	bne.n	8004a90 <__libc_init_array+0x24>
 8004a7c:	2600      	movs	r6, #0
 8004a7e:	f000 f82b 	bl	8004ad8 <_init>
 8004a82:	4d0a      	ldr	r5, [pc, #40]	; (8004aac <__libc_init_array+0x40>)
 8004a84:	4c0a      	ldr	r4, [pc, #40]	; (8004ab0 <__libc_init_array+0x44>)
 8004a86:	1b64      	subs	r4, r4, r5
 8004a88:	10a4      	asrs	r4, r4, #2
 8004a8a:	42a6      	cmp	r6, r4
 8004a8c:	d105      	bne.n	8004a9a <__libc_init_array+0x2e>
 8004a8e:	bd70      	pop	{r4, r5, r6, pc}
 8004a90:	00b3      	lsls	r3, r6, #2
 8004a92:	58eb      	ldr	r3, [r5, r3]
 8004a94:	4798      	blx	r3
 8004a96:	3601      	adds	r6, #1
 8004a98:	e7ee      	b.n	8004a78 <__libc_init_array+0xc>
 8004a9a:	00b3      	lsls	r3, r6, #2
 8004a9c:	58eb      	ldr	r3, [r5, r3]
 8004a9e:	4798      	blx	r3
 8004aa0:	3601      	adds	r6, #1
 8004aa2:	e7f2      	b.n	8004a8a <__libc_init_array+0x1e>
 8004aa4:	08004c34 	.word	0x08004c34
 8004aa8:	08004c34 	.word	0x08004c34
 8004aac:	08004c34 	.word	0x08004c34
 8004ab0:	08004c38 	.word	0x08004c38

08004ab4 <memcpy>:
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	b510      	push	{r4, lr}
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d100      	bne.n	8004abe <memcpy+0xa>
 8004abc:	bd10      	pop	{r4, pc}
 8004abe:	5ccc      	ldrb	r4, [r1, r3]
 8004ac0:	54c4      	strb	r4, [r0, r3]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	e7f8      	b.n	8004ab8 <memcpy+0x4>

08004ac6 <memset>:
 8004ac6:	0003      	movs	r3, r0
 8004ac8:	1882      	adds	r2, r0, r2
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d100      	bne.n	8004ad0 <memset+0xa>
 8004ace:	4770      	bx	lr
 8004ad0:	7019      	strb	r1, [r3, #0]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	e7f9      	b.n	8004aca <memset+0x4>
	...

08004ad8 <_init>:
 8004ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ada:	46c0      	nop			; (mov r8, r8)
 8004adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ade:	bc08      	pop	{r3}
 8004ae0:	469e      	mov	lr, r3
 8004ae2:	4770      	bx	lr

08004ae4 <_fini>:
 8004ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aea:	bc08      	pop	{r3}
 8004aec:	469e      	mov	lr, r3
 8004aee:	4770      	bx	lr
