
LAB1 Interrupt Priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038f0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080039b0  080039b0  000139b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a28  08003a28  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a28  08003a28  00013a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a30  08003a30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a30  08003a30  00013a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a34  08003a34  00013a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000000c  08003a44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08003a44  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d694  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d9c  00000000  00000000  0002d6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  0002f468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  0002ffc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010c84  00000000  00000000  00030a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3f7  00000000  00000000  000416f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000688b6  00000000  00000000  0004eaeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b73a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028b4  00000000  00000000  000b73f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003998 	.word	0x08003998

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003998 	.word	0x08003998

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 faac 	bl	8000a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f81c 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f910 	bl	80006d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004b8:	f000 f8de 	bl	8000678 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004bc:	f000 f888 	bl	80005d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim2);
 80004c0:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <main+0x38>)
 80004c2:	0018      	movs	r0, r3
 80004c4:	f001 fd96 	bl	8001ff4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		HAL_Delay(1000);
 80004c8:	23fa      	movs	r3, #250	; 0xfa
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 fb0b 	bl	8000ae8 <HAL_Delay>
		HAL_UART_Transmit_IT(&huart2, MSG, 5);
 80004d2:	4904      	ldr	r1, [pc, #16]	; (80004e4 <main+0x3c>)
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <main+0x40>)
 80004d6:	2205      	movs	r2, #5
 80004d8:	0018      	movs	r0, r3
 80004da:	f002 f94d 	bl	8002778 <HAL_UART_Transmit_IT>
		HAL_Delay(1000);
 80004de:	e7f3      	b.n	80004c8 <main+0x20>
 80004e0:	20000028 	.word	0x20000028
 80004e4:	080039b0 	.word	0x080039b0
 80004e8:	20000068 	.word	0x20000068

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b099      	sub	sp, #100	; 0x64
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	242c      	movs	r4, #44	; 0x2c
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	0018      	movs	r0, r3
 80004f8:	2334      	movs	r3, #52	; 0x34
 80004fa:	001a      	movs	r2, r3
 80004fc:	2100      	movs	r1, #0
 80004fe:	f003 fa43 	bl	8003988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000502:	2318      	movs	r3, #24
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	0018      	movs	r0, r3
 8000508:	2314      	movs	r3, #20
 800050a:	001a      	movs	r2, r3
 800050c:	2100      	movs	r1, #0
 800050e:	f003 fa3b 	bl	8003988 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000512:	003b      	movs	r3, r7
 8000514:	0018      	movs	r0, r3
 8000516:	2318      	movs	r3, #24
 8000518:	001a      	movs	r2, r3
 800051a:	2100      	movs	r1, #0
 800051c:	f003 fa34 	bl	8003988 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000520:	4b29      	ldr	r3, [pc, #164]	; (80005c8 <SystemClock_Config+0xdc>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a29      	ldr	r2, [pc, #164]	; (80005cc <SystemClock_Config+0xe0>)
 8000526:	401a      	ands	r2, r3
 8000528:	4b27      	ldr	r3, [pc, #156]	; (80005c8 <SystemClock_Config+0xdc>)
 800052a:	2180      	movs	r1, #128	; 0x80
 800052c:	0109      	lsls	r1, r1, #4
 800052e:	430a      	orrs	r2, r1
 8000530:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000532:	0021      	movs	r1, r4
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2201      	movs	r2, #1
 8000538:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800053a:	187b      	adds	r3, r7, r1
 800053c:	22a0      	movs	r2, #160	; 0xa0
 800053e:	02d2      	lsls	r2, r2, #11
 8000540:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2202      	movs	r2, #2
 8000546:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2280      	movs	r2, #128	; 0x80
 800054c:	0252      	lsls	r2, r2, #9
 800054e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	22c0      	movs	r2, #192	; 0xc0
 8000554:	0312      	lsls	r2, r2, #12
 8000556:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2280      	movs	r2, #128	; 0x80
 800055c:	03d2      	lsls	r2, r2, #15
 800055e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000560:	187b      	adds	r3, r7, r1
 8000562:	0018      	movs	r0, r3
 8000564:	f000 fe3a 	bl	80011dc <HAL_RCC_OscConfig>
 8000568:	1e03      	subs	r3, r0, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800056c:	f000 f946 	bl	80007fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000570:	2118      	movs	r1, #24
 8000572:	187b      	adds	r3, r7, r1
 8000574:	220f      	movs	r2, #15
 8000576:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2203      	movs	r2, #3
 800057c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2101      	movs	r1, #1
 8000594:	0018      	movs	r0, r3
 8000596:	f001 f99d 	bl	80018d4 <HAL_RCC_ClockConfig>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800059e:	f000 f92d 	bl	80007fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005a2:	003b      	movs	r3, r7
 80005a4:	2202      	movs	r2, #2
 80005a6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005a8:	003b      	movs	r3, r7
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ae:	003b      	movs	r3, r7
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 fbb3 	bl	8001d1c <HAL_RCCEx_PeriphCLKConfig>
 80005b6:	1e03      	subs	r3, r0, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005ba:	f000 f91f 	bl	80007fc <Error_Handler>
  }
}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b019      	add	sp, #100	; 0x64
 80005c4:	bd90      	pop	{r4, r7, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	40007000 	.word	0x40007000
 80005cc:	ffffe7ff 	.word	0xffffe7ff

080005d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005d6:	2308      	movs	r3, #8
 80005d8:	18fb      	adds	r3, r7, r3
 80005da:	0018      	movs	r0, r3
 80005dc:	2310      	movs	r3, #16
 80005de:	001a      	movs	r2, r3
 80005e0:	2100      	movs	r1, #0
 80005e2:	f003 f9d1 	bl	8003988 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e6:	003b      	movs	r3, r7
 80005e8:	0018      	movs	r0, r3
 80005ea:	2308      	movs	r3, #8
 80005ec:	001a      	movs	r2, r3
 80005ee:	2100      	movs	r1, #0
 80005f0:	f003 f9ca 	bl	8003988 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005f4:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <MX_TIM2_Init+0xa0>)
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	05d2      	lsls	r2, r2, #23
 80005fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 80005fc:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <MX_TIM2_Init+0xa0>)
 80005fe:	221f      	movs	r2, #31
 8000600:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000602:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <MX_TIM2_Init+0xa0>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000608:	4b19      	ldr	r3, [pc, #100]	; (8000670 <MX_TIM2_Init+0xa0>)
 800060a:	4a1a      	ldr	r2, [pc, #104]	; (8000674 <MX_TIM2_Init+0xa4>)
 800060c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <MX_TIM2_Init+0xa0>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <MX_TIM2_Init+0xa0>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <MX_TIM2_Init+0xa0>)
 800061c:	0018      	movs	r0, r3
 800061e:	f001 fca9 	bl	8001f74 <HAL_TIM_Base_Init>
 8000622:	1e03      	subs	r3, r0, #0
 8000624:	d001      	beq.n	800062a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000626:	f000 f8e9 	bl	80007fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800062a:	2108      	movs	r1, #8
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2280      	movs	r2, #128	; 0x80
 8000630:	0152      	lsls	r2, r2, #5
 8000632:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000634:	187a      	adds	r2, r7, r1
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_TIM2_Init+0xa0>)
 8000638:	0011      	movs	r1, r2
 800063a:	0018      	movs	r0, r3
 800063c:	f001 fe0e 	bl	800225c <HAL_TIM_ConfigClockSource>
 8000640:	1e03      	subs	r3, r0, #0
 8000642:	d001      	beq.n	8000648 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000644:	f000 f8da 	bl	80007fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000648:	003b      	movs	r3, r7
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800064e:	003b      	movs	r3, r7
 8000650:	2200      	movs	r2, #0
 8000652:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000654:	003a      	movs	r2, r7
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_TIM2_Init+0xa0>)
 8000658:	0011      	movs	r1, r2
 800065a:	0018      	movs	r0, r3
 800065c:	f001 ffe0 	bl	8002620 <HAL_TIMEx_MasterConfigSynchronization>
 8000660:	1e03      	subs	r3, r0, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000664:	f000 f8ca 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	b006      	add	sp, #24
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000028 	.word	0x20000028
 8000674:	0000ffff 	.word	0x0000ffff

08000678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 800067e:	4a15      	ldr	r2, [pc, #84]	; (80006d4 <MX_USART2_UART_Init+0x5c>)
 8000680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 8000684:	22e1      	movs	r2, #225	; 0xe1
 8000686:	0252      	lsls	r2, r2, #9
 8000688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006bc:	0018      	movs	r0, r3
 80006be:	f002 f807 	bl	80026d0 <HAL_UART_Init>
 80006c2:	1e03      	subs	r3, r0, #0
 80006c4:	d001      	beq.n	80006ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006c6:	f000 f899 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000068 	.word	0x20000068
 80006d4:	40004400 	.word	0x40004400

080006d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b089      	sub	sp, #36	; 0x24
 80006dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	240c      	movs	r4, #12
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	0018      	movs	r0, r3
 80006e4:	2314      	movs	r3, #20
 80006e6:	001a      	movs	r2, r3
 80006e8:	2100      	movs	r1, #0
 80006ea:	f003 f94d 	bl	8003988 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	4b2e      	ldr	r3, [pc, #184]	; (80007a8 <MX_GPIO_Init+0xd0>)
 80006f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006f2:	4b2d      	ldr	r3, [pc, #180]	; (80007a8 <MX_GPIO_Init+0xd0>)
 80006f4:	2104      	movs	r1, #4
 80006f6:	430a      	orrs	r2, r1
 80006f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80006fa:	4b2b      	ldr	r3, [pc, #172]	; (80007a8 <MX_GPIO_Init+0xd0>)
 80006fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006fe:	2204      	movs	r2, #4
 8000700:	4013      	ands	r3, r2
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000706:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <MX_GPIO_Init+0xd0>)
 8000708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800070a:	4b27      	ldr	r3, [pc, #156]	; (80007a8 <MX_GPIO_Init+0xd0>)
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	430a      	orrs	r2, r1
 8000710:	62da      	str	r2, [r3, #44]	; 0x2c
 8000712:	4b25      	ldr	r3, [pc, #148]	; (80007a8 <MX_GPIO_Init+0xd0>)
 8000714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	4013      	ands	r3, r2
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <MX_GPIO_Init+0xd0>)
 8000720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000722:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <MX_GPIO_Init+0xd0>)
 8000724:	2101      	movs	r1, #1
 8000726:	430a      	orrs	r2, r1
 8000728:	62da      	str	r2, [r3, #44]	; 0x2c
 800072a:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_GPIO_Init+0xd0>)
 800072c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072e:	2201      	movs	r2, #1
 8000730:	4013      	ands	r3, r2
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000736:	23a0      	movs	r3, #160	; 0xa0
 8000738:	05db      	lsls	r3, r3, #23
 800073a:	2200      	movs	r2, #0
 800073c:	2120      	movs	r1, #32
 800073e:	0018      	movs	r0, r3
 8000740:	f000 fcf7 	bl	8001132 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000744:	193b      	adds	r3, r7, r4
 8000746:	2280      	movs	r2, #128	; 0x80
 8000748:	0192      	lsls	r2, r2, #6
 800074a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800074c:	193b      	adds	r3, r7, r4
 800074e:	2284      	movs	r2, #132	; 0x84
 8000750:	0392      	lsls	r2, r2, #14
 8000752:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	193b      	adds	r3, r7, r4
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800075a:	193b      	adds	r3, r7, r4
 800075c:	4a13      	ldr	r2, [pc, #76]	; (80007ac <MX_GPIO_Init+0xd4>)
 800075e:	0019      	movs	r1, r3
 8000760:	0010      	movs	r0, r2
 8000762:	f000 fb4b 	bl	8000dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000766:	0021      	movs	r1, r4
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2220      	movs	r2, #32
 800076c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2201      	movs	r2, #1
 8000772:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000780:	187a      	adds	r2, r7, r1
 8000782:	23a0      	movs	r3, #160	; 0xa0
 8000784:	05db      	lsls	r3, r3, #23
 8000786:	0011      	movs	r1, r2
 8000788:	0018      	movs	r0, r3
 800078a:	f000 fb37 	bl	8000dfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2102      	movs	r1, #2
 8000792:	2007      	movs	r0, #7
 8000794:	f000 fa78 	bl	8000c88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000798:	2007      	movs	r0, #7
 800079a:	f000 fa8a 	bl	8000cb2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b009      	add	sp, #36	; 0x24
 80007a4:	bd90      	pop	{r4, r7, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	40021000 	.word	0x40021000
 80007ac:	50000800 	.word	0x50000800

080007b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007b8:	23a0      	movs	r3, #160	; 0xa0
 80007ba:	05db      	lsls	r3, r3, #23
 80007bc:	2120      	movs	r1, #32
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 fcd4 	bl	800116c <HAL_GPIO_TogglePin>
}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b002      	add	sp, #8
 80007ca:	bd80      	pop	{r7, pc}

080007cc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	0002      	movs	r2, r0
 80007d4:	1dbb      	adds	r3, r7, #6
 80007d6:	801a      	strh	r2, [r3, #0]
	while(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	2380      	movs	r3, #128	; 0x80
 80007dc:	019b      	lsls	r3, r3, #6
 80007de:	4a06      	ldr	r2, [pc, #24]	; (80007f8 <HAL_GPIO_EXTI_Callback+0x2c>)
 80007e0:	0019      	movs	r1, r3
 80007e2:	0010      	movs	r0, r2
 80007e4:	f000 fc88 	bl	80010f8 <HAL_GPIO_ReadPin>
 80007e8:	1e03      	subs	r3, r0, #0
 80007ea:	d0f6      	beq.n	80007da <HAL_GPIO_EXTI_Callback+0xe>
}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b002      	add	sp, #8
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	50000800 	.word	0x50000800

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000804:	e7fe      	b.n	8000804 <Error_Handler+0x8>
	...

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080c:	4b07      	ldr	r3, [pc, #28]	; (800082c <HAL_MspInit+0x24>)
 800080e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_MspInit+0x24>)
 8000812:	2101      	movs	r1, #1
 8000814:	430a      	orrs	r2, r1
 8000816:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <HAL_MspInit+0x24>)
 800081a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800081c:	4b03      	ldr	r3, [pc, #12]	; (800082c <HAL_MspInit+0x24>)
 800081e:	2180      	movs	r1, #128	; 0x80
 8000820:	0549      	lsls	r1, r1, #21
 8000822:	430a      	orrs	r2, r1
 8000824:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40021000 	.word	0x40021000

08000830 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	2380      	movs	r3, #128	; 0x80
 800083e:	05db      	lsls	r3, r3, #23
 8000840:	429a      	cmp	r2, r3
 8000842:	d10d      	bne.n	8000860 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <HAL_TIM_Base_MspInit+0x38>)
 8000846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <HAL_TIM_Base_MspInit+0x38>)
 800084a:	2101      	movs	r1, #1
 800084c:	430a      	orrs	r2, r1
 800084e:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2101      	movs	r1, #1
 8000854:	200f      	movs	r0, #15
 8000856:	f000 fa17 	bl	8000c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800085a:	200f      	movs	r0, #15
 800085c:	f000 fa29 	bl	8000cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	b002      	add	sp, #8
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40021000 	.word	0x40021000

0800086c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b089      	sub	sp, #36	; 0x24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	240c      	movs	r4, #12
 8000876:	193b      	adds	r3, r7, r4
 8000878:	0018      	movs	r0, r3
 800087a:	2314      	movs	r3, #20
 800087c:	001a      	movs	r2, r3
 800087e:	2100      	movs	r1, #0
 8000880:	f003 f882 	bl	8003988 <memset>
  if(huart->Instance==USART2)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a1c      	ldr	r2, [pc, #112]	; (80008fc <HAL_UART_MspInit+0x90>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d131      	bne.n	80008f2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <HAL_UART_MspInit+0x94>)
 8000890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <HAL_UART_MspInit+0x94>)
 8000894:	2180      	movs	r1, #128	; 0x80
 8000896:	0289      	lsls	r1, r1, #10
 8000898:	430a      	orrs	r2, r1
 800089a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <HAL_UART_MspInit+0x94>)
 800089e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <HAL_UART_MspInit+0x94>)
 80008a2:	2101      	movs	r1, #1
 80008a4:	430a      	orrs	r2, r1
 80008a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <HAL_UART_MspInit+0x94>)
 80008aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ac:	2201      	movs	r2, #1
 80008ae:	4013      	ands	r3, r2
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008b4:	0021      	movs	r1, r4
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	220c      	movs	r2, #12
 80008ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2202      	movs	r2, #2
 80008c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2203      	movs	r2, #3
 80008cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	2204      	movs	r2, #4
 80008d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	187a      	adds	r2, r7, r1
 80008d6:	23a0      	movs	r3, #160	; 0xa0
 80008d8:	05db      	lsls	r3, r3, #23
 80008da:	0011      	movs	r1, r2
 80008dc:	0018      	movs	r0, r3
 80008de:	f000 fa8d 	bl	8000dfc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2100      	movs	r1, #0
 80008e6:	201c      	movs	r0, #28
 80008e8:	f000 f9ce 	bl	8000c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008ec:	201c      	movs	r0, #28
 80008ee:	f000 f9e0 	bl	8000cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b009      	add	sp, #36	; 0x24
 80008f8:	bd90      	pop	{r4, r7, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	40004400 	.word	0x40004400
 8000900:	40021000 	.word	0x40021000

08000904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <NMI_Handler+0x4>

0800090a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <HardFault_Handler+0x4>

08000910 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000928:	f000 f8c2 	bl	8000ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000936:	2380      	movs	r3, #128	; 0x80
 8000938:	019b      	lsls	r3, r3, #6
 800093a:	0018      	movs	r0, r3
 800093c:	f000 fc32 	bl	80011a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <TIM2_IRQHandler+0x14>)
 800094e:	0018      	movs	r0, r3
 8000950:	f001 fb9c 	bl	800208c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	20000028 	.word	0x20000028

08000960 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000964:	4b03      	ldr	r3, [pc, #12]	; (8000974 <USART2_IRQHandler+0x14>)
 8000966:	0018      	movs	r0, r3
 8000968:	f001 ff76 	bl	8002858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	20000068 	.word	0x20000068

08000978 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000984:	4813      	ldr	r0, [pc, #76]	; (80009d4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000986:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000988:	f7ff fff6 	bl	8000978 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 800098c:	4812      	ldr	r0, [pc, #72]	; (80009d8 <LoopForever+0x6>)
    LDR R1, [R0]
 800098e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000990:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <LoopForever+0xa>)
    CMP R1, R2
 8000994:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000996:	d105      	bne.n	80009a4 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000998:	4811      	ldr	r0, [pc, #68]	; (80009e0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800099a:	4912      	ldr	r1, [pc, #72]	; (80009e4 <LoopForever+0x12>)
    STR R1, [R0]
 800099c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800099e:	4812      	ldr	r0, [pc, #72]	; (80009e8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80009a0:	4912      	ldr	r1, [pc, #72]	; (80009ec <LoopForever+0x1a>)
    STR R1, [R0]
 80009a2:	6001      	str	r1, [r0, #0]

080009a4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a4:	4812      	ldr	r0, [pc, #72]	; (80009f0 <LoopForever+0x1e>)
  ldr r1, =_edata
 80009a6:	4913      	ldr	r1, [pc, #76]	; (80009f4 <LoopForever+0x22>)
  ldr r2, =_sidata
 80009a8:	4a13      	ldr	r2, [pc, #76]	; (80009f8 <LoopForever+0x26>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ac:	e002      	b.n	80009b4 <LoopCopyDataInit>

080009ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b2:	3304      	adds	r3, #4

080009b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b8:	d3f9      	bcc.n	80009ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ba:	4a10      	ldr	r2, [pc, #64]	; (80009fc <LoopForever+0x2a>)
  ldr r4, =_ebss
 80009bc:	4c10      	ldr	r4, [pc, #64]	; (8000a00 <LoopForever+0x2e>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c0:	e001      	b.n	80009c6 <LoopFillZerobss>

080009c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c4:	3204      	adds	r2, #4

080009c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c8:	d3fb      	bcc.n	80009c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ca:	f002 ffb9 	bl	8003940 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ce:	f7ff fd6b 	bl	80004a8 <main>

080009d2 <LoopForever>:

LoopForever:
    b LoopForever
 80009d2:	e7fe      	b.n	80009d2 <LoopForever>
   ldr   r0, =_estack
 80009d4:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 80009d8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80009dc:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80009e0:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80009e4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80009e8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80009ec:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009f8:	08003a38 	.word	0x08003a38
  ldr r2, =_sbss
 80009fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a00:	200000f4 	.word	0x200000f4

08000a04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC1_IRQHandler>
	...

08000a08 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a0e:	1dfb      	adds	r3, r7, #7
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <HAL_Init+0x3c>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <HAL_Init+0x3c>)
 8000a1a:	2140      	movs	r1, #64	; 0x40
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a20:	2000      	movs	r0, #0
 8000a22:	f000 f811 	bl	8000a48 <HAL_InitTick>
 8000a26:	1e03      	subs	r3, r0, #0
 8000a28:	d003      	beq.n	8000a32 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	701a      	strb	r2, [r3, #0]
 8000a30:	e001      	b.n	8000a36 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a32:	f7ff fee9 	bl	8000808 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	781b      	ldrb	r3, [r3, #0]
}
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b002      	add	sp, #8
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	40022000 	.word	0x40022000

08000a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <HAL_InitTick+0x5c>)
 8000a52:	681c      	ldr	r4, [r3, #0]
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <HAL_InitTick+0x60>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	0019      	movs	r1, r3
 8000a5a:	23fa      	movs	r3, #250	; 0xfa
 8000a5c:	0098      	lsls	r0, r3, #2
 8000a5e:	f7ff fb53 	bl	8000108 <__udivsi3>
 8000a62:	0003      	movs	r3, r0
 8000a64:	0019      	movs	r1, r3
 8000a66:	0020      	movs	r0, r4
 8000a68:	f7ff fb4e 	bl	8000108 <__udivsi3>
 8000a6c:	0003      	movs	r3, r0
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f000 f92f 	bl	8000cd2 <HAL_SYSTICK_Config>
 8000a74:	1e03      	subs	r3, r0, #0
 8000a76:	d001      	beq.n	8000a7c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	e00f      	b.n	8000a9c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2b03      	cmp	r3, #3
 8000a80:	d80b      	bhi.n	8000a9a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	2301      	movs	r3, #1
 8000a86:	425b      	negs	r3, r3
 8000a88:	2200      	movs	r2, #0
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f000 f8fc 	bl	8000c88 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_InitTick+0x64>)
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	e000      	b.n	8000a9c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
}
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b003      	add	sp, #12
 8000aa2:	bd90      	pop	{r4, r7, pc}
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	20000004 	.word	0x20000004

08000ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_IncTick+0x1c>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	001a      	movs	r2, r3
 8000aba:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_IncTick+0x20>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	18d2      	adds	r2, r2, r3
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <HAL_IncTick+0x20>)
 8000ac2:	601a      	str	r2, [r3, #0]
}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	200000f0 	.word	0x200000f0

08000ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b02      	ldr	r3, [pc, #8]	; (8000ae4 <HAL_GetTick+0x10>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	0018      	movs	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	200000f0 	.word	0x200000f0

08000ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af0:	f7ff fff0 	bl	8000ad4 <HAL_GetTick>
 8000af4:	0003      	movs	r3, r0
 8000af6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	3301      	adds	r3, #1
 8000b00:	d005      	beq.n	8000b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <HAL_Delay+0x44>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	001a      	movs	r2, r3
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	189b      	adds	r3, r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	f7ff ffe0 	bl	8000ad4 <HAL_GetTick>
 8000b14:	0002      	movs	r2, r0
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d8f7      	bhi.n	8000b10 <HAL_Delay+0x28>
  {
  }
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b004      	add	sp, #16
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	20000008 	.word	0x20000008

08000b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	0002      	movs	r2, r0
 8000b38:	1dfb      	adds	r3, r7, #7
 8000b3a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b3c:	1dfb      	adds	r3, r7, #7
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b7f      	cmp	r3, #127	; 0x7f
 8000b42:	d809      	bhi.n	8000b58 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b44:	1dfb      	adds	r3, r7, #7
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	001a      	movs	r2, r3
 8000b4a:	231f      	movs	r3, #31
 8000b4c:	401a      	ands	r2, r3
 8000b4e:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <__NVIC_EnableIRQ+0x30>)
 8000b50:	2101      	movs	r1, #1
 8000b52:	4091      	lsls	r1, r2
 8000b54:	000a      	movs	r2, r1
 8000b56:	601a      	str	r2, [r3, #0]
  }
}
 8000b58:	46c0      	nop			; (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b002      	add	sp, #8
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	e000e100 	.word	0xe000e100

08000b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	0002      	movs	r2, r0
 8000b6c:	6039      	str	r1, [r7, #0]
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b7f      	cmp	r3, #127	; 0x7f
 8000b78:	d828      	bhi.n	8000bcc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b7a:	4a2f      	ldr	r2, [pc, #188]	; (8000c38 <__NVIC_SetPriority+0xd4>)
 8000b7c:	1dfb      	adds	r3, r7, #7
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b25b      	sxtb	r3, r3
 8000b82:	089b      	lsrs	r3, r3, #2
 8000b84:	33c0      	adds	r3, #192	; 0xc0
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	589b      	ldr	r3, [r3, r2]
 8000b8a:	1dfa      	adds	r2, r7, #7
 8000b8c:	7812      	ldrb	r2, [r2, #0]
 8000b8e:	0011      	movs	r1, r2
 8000b90:	2203      	movs	r2, #3
 8000b92:	400a      	ands	r2, r1
 8000b94:	00d2      	lsls	r2, r2, #3
 8000b96:	21ff      	movs	r1, #255	; 0xff
 8000b98:	4091      	lsls	r1, r2
 8000b9a:	000a      	movs	r2, r1
 8000b9c:	43d2      	mvns	r2, r2
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	019b      	lsls	r3, r3, #6
 8000ba6:	22ff      	movs	r2, #255	; 0xff
 8000ba8:	401a      	ands	r2, r3
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	0018      	movs	r0, r3
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	4003      	ands	r3, r0
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb8:	481f      	ldr	r0, [pc, #124]	; (8000c38 <__NVIC_SetPriority+0xd4>)
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b25b      	sxtb	r3, r3
 8000bc0:	089b      	lsrs	r3, r3, #2
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	33c0      	adds	r3, #192	; 0xc0
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bca:	e031      	b.n	8000c30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	; (8000c3c <__NVIC_SetPriority+0xd8>)
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	0019      	movs	r1, r3
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	400b      	ands	r3, r1
 8000bd8:	3b08      	subs	r3, #8
 8000bda:	089b      	lsrs	r3, r3, #2
 8000bdc:	3306      	adds	r3, #6
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	18d3      	adds	r3, r2, r3
 8000be2:	3304      	adds	r3, #4
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	1dfa      	adds	r2, r7, #7
 8000be8:	7812      	ldrb	r2, [r2, #0]
 8000bea:	0011      	movs	r1, r2
 8000bec:	2203      	movs	r2, #3
 8000bee:	400a      	ands	r2, r1
 8000bf0:	00d2      	lsls	r2, r2, #3
 8000bf2:	21ff      	movs	r1, #255	; 0xff
 8000bf4:	4091      	lsls	r1, r2
 8000bf6:	000a      	movs	r2, r1
 8000bf8:	43d2      	mvns	r2, r2
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	019b      	lsls	r3, r3, #6
 8000c02:	22ff      	movs	r2, #255	; 0xff
 8000c04:	401a      	ands	r2, r3
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	4003      	ands	r3, r0
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c14:	4809      	ldr	r0, [pc, #36]	; (8000c3c <__NVIC_SetPriority+0xd8>)
 8000c16:	1dfb      	adds	r3, r7, #7
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	001c      	movs	r4, r3
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	4023      	ands	r3, r4
 8000c20:	3b08      	subs	r3, #8
 8000c22:	089b      	lsrs	r3, r3, #2
 8000c24:	430a      	orrs	r2, r1
 8000c26:	3306      	adds	r3, #6
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	18c3      	adds	r3, r0, r3
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	601a      	str	r2, [r3, #0]
}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b003      	add	sp, #12
 8000c36:	bd90      	pop	{r4, r7, pc}
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	1e5a      	subs	r2, r3, #1
 8000c4c:	2380      	movs	r3, #128	; 0x80
 8000c4e:	045b      	lsls	r3, r3, #17
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d301      	bcc.n	8000c58 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c54:	2301      	movs	r3, #1
 8000c56:	e010      	b.n	8000c7a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <SysTick_Config+0x44>)
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	3a01      	subs	r2, #1
 8000c5e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c60:	2301      	movs	r3, #1
 8000c62:	425b      	negs	r3, r3
 8000c64:	2103      	movs	r1, #3
 8000c66:	0018      	movs	r0, r3
 8000c68:	f7ff ff7c 	bl	8000b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <SysTick_Config+0x44>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <SysTick_Config+0x44>)
 8000c74:	2207      	movs	r2, #7
 8000c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b002      	add	sp, #8
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	e000e010 	.word	0xe000e010

08000c88 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	210f      	movs	r1, #15
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	1c02      	adds	r2, r0, #0
 8000c98:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b25b      	sxtb	r3, r3
 8000ca2:	0011      	movs	r1, r2
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f7ff ff5d 	bl	8000b64 <__NVIC_SetPriority>
}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b004      	add	sp, #16
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	0002      	movs	r2, r0
 8000cba:	1dfb      	adds	r3, r7, #7
 8000cbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	b25b      	sxtb	r3, r3
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f7ff ff33 	bl	8000b30 <__NVIC_EnableIRQ>
}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b002      	add	sp, #8
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f7ff ffaf 	bl	8000c40 <SysTick_Config>
 8000ce2:	0003      	movs	r3, r0
}
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b002      	add	sp, #8
 8000cea:	bd80      	pop	{r7, pc}

08000cec <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2225      	movs	r2, #37	; 0x25
 8000d00:	5c9b      	ldrb	r3, [r3, r2]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d008      	beq.n	8000d1a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2204      	movs	r2, #4
 8000d0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2224      	movs	r2, #36	; 0x24
 8000d12:	2100      	movs	r1, #0
 8000d14:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e024      	b.n	8000d64 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	210e      	movs	r1, #14
 8000d26:	438a      	bics	r2, r1
 8000d28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2101      	movs	r1, #1
 8000d36:	438a      	bics	r2, r1
 8000d38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	221c      	movs	r2, #28
 8000d40:	401a      	ands	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	2101      	movs	r1, #1
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	000a      	movs	r2, r1
 8000d4c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2225      	movs	r2, #37	; 0x25
 8000d52:	2101      	movs	r1, #1
 8000d54:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2224      	movs	r2, #36	; 0x24
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	5499      	strb	r1, [r3, r2]

    return status;
 8000d5e:	230f      	movs	r3, #15
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000d64:	0018      	movs	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b004      	add	sp, #16
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d74:	210f      	movs	r1, #15
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2225      	movs	r2, #37	; 0x25
 8000d80:	5c9b      	ldrb	r3, [r3, r2]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d006      	beq.n	8000d96 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2204      	movs	r2, #4
 8000d8c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	2201      	movs	r2, #1
 8000d92:	701a      	strb	r2, [r3, #0]
 8000d94:	e02a      	b.n	8000dec <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	210e      	movs	r1, #14
 8000da2:	438a      	bics	r2, r1
 8000da4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2101      	movs	r1, #1
 8000db2:	438a      	bics	r2, r1
 8000db4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	221c      	movs	r2, #28
 8000dbc:	401a      	ands	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	4091      	lsls	r1, r2
 8000dc6:	000a      	movs	r2, r1
 8000dc8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2225      	movs	r2, #37	; 0x25
 8000dce:	2101      	movs	r1, #1
 8000dd0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2224      	movs	r2, #36	; 0x24
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d004      	beq.n	8000dec <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	0010      	movs	r0, r2
 8000dea:	4798      	blx	r3
    }
  }
  return status;
 8000dec:	230f      	movs	r3, #15
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	781b      	ldrb	r3, [r3, #0]
}
 8000df2:	0018      	movs	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b004      	add	sp, #16
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e12:	e155      	b.n	80010c0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2101      	movs	r1, #1
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	4091      	lsls	r1, r2
 8000e1e:	000a      	movs	r2, r1
 8000e20:	4013      	ands	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d100      	bne.n	8000e2c <HAL_GPIO_Init+0x30>
 8000e2a:	e146      	b.n	80010ba <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2203      	movs	r2, #3
 8000e32:	4013      	ands	r3, r2
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d005      	beq.n	8000e44 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d130      	bne.n	8000ea6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	409a      	lsls	r2, r3
 8000e52:	0013      	movs	r3, r2
 8000e54:	43da      	mvns	r2, r3
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	68da      	ldr	r2, [r3, #12]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	409a      	lsls	r2, r3
 8000e66:	0013      	movs	r3, r2
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	43da      	mvns	r2, r3
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	091b      	lsrs	r3, r3, #4
 8000e90:	2201      	movs	r2, #1
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
 8000e98:	0013      	movs	r3, r2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2203      	movs	r2, #3
 8000eac:	4013      	ands	r3, r2
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d017      	beq.n	8000ee2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	409a      	lsls	r2, r3
 8000ec0:	0013      	movs	r3, r2
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	4013      	ands	r3, r2
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d123      	bne.n	8000f36 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	08da      	lsrs	r2, r3, #3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3208      	adds	r2, #8
 8000ef6:	0092      	lsls	r2, r2, #2
 8000ef8:	58d3      	ldr	r3, [r2, r3]
 8000efa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	2207      	movs	r2, #7
 8000f00:	4013      	ands	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	220f      	movs	r2, #15
 8000f06:	409a      	lsls	r2, r3
 8000f08:	0013      	movs	r3, r2
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	691a      	ldr	r2, [r3, #16]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	2107      	movs	r1, #7
 8000f1a:	400b      	ands	r3, r1
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	0013      	movs	r3, r2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	08da      	lsrs	r2, r3, #3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3208      	adds	r2, #8
 8000f30:	0092      	lsls	r2, r2, #2
 8000f32:	6939      	ldr	r1, [r7, #16]
 8000f34:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	409a      	lsls	r2, r3
 8000f44:	0013      	movs	r3, r2
 8000f46:	43da      	mvns	r2, r3
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2203      	movs	r2, #3
 8000f54:	401a      	ands	r2, r3
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	409a      	lsls	r2, r3
 8000f5c:	0013      	movs	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685a      	ldr	r2, [r3, #4]
 8000f6e:	23c0      	movs	r3, #192	; 0xc0
 8000f70:	029b      	lsls	r3, r3, #10
 8000f72:	4013      	ands	r3, r2
 8000f74:	d100      	bne.n	8000f78 <HAL_GPIO_Init+0x17c>
 8000f76:	e0a0      	b.n	80010ba <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f78:	4b57      	ldr	r3, [pc, #348]	; (80010d8 <HAL_GPIO_Init+0x2dc>)
 8000f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f7c:	4b56      	ldr	r3, [pc, #344]	; (80010d8 <HAL_GPIO_Init+0x2dc>)
 8000f7e:	2101      	movs	r1, #1
 8000f80:	430a      	orrs	r2, r1
 8000f82:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f84:	4a55      	ldr	r2, [pc, #340]	; (80010dc <HAL_GPIO_Init+0x2e0>)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	589b      	ldr	r3, [r3, r2]
 8000f90:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	2203      	movs	r2, #3
 8000f96:	4013      	ands	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	220f      	movs	r2, #15
 8000f9c:	409a      	lsls	r2, r3
 8000f9e:	0013      	movs	r3, r2
 8000fa0:	43da      	mvns	r2, r3
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	23a0      	movs	r3, #160	; 0xa0
 8000fac:	05db      	lsls	r3, r3, #23
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d01f      	beq.n	8000ff2 <HAL_GPIO_Init+0x1f6>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4a      	ldr	r2, [pc, #296]	; (80010e0 <HAL_GPIO_Init+0x2e4>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d019      	beq.n	8000fee <HAL_GPIO_Init+0x1f2>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a49      	ldr	r2, [pc, #292]	; (80010e4 <HAL_GPIO_Init+0x2e8>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d013      	beq.n	8000fea <HAL_GPIO_Init+0x1ee>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a48      	ldr	r2, [pc, #288]	; (80010e8 <HAL_GPIO_Init+0x2ec>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d00d      	beq.n	8000fe6 <HAL_GPIO_Init+0x1ea>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a47      	ldr	r2, [pc, #284]	; (80010ec <HAL_GPIO_Init+0x2f0>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d007      	beq.n	8000fe2 <HAL_GPIO_Init+0x1e6>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a46      	ldr	r2, [pc, #280]	; (80010f0 <HAL_GPIO_Init+0x2f4>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d101      	bne.n	8000fde <HAL_GPIO_Init+0x1e2>
 8000fda:	2305      	movs	r3, #5
 8000fdc:	e00a      	b.n	8000ff4 <HAL_GPIO_Init+0x1f8>
 8000fde:	2306      	movs	r3, #6
 8000fe0:	e008      	b.n	8000ff4 <HAL_GPIO_Init+0x1f8>
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	e006      	b.n	8000ff4 <HAL_GPIO_Init+0x1f8>
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e004      	b.n	8000ff4 <HAL_GPIO_Init+0x1f8>
 8000fea:	2302      	movs	r3, #2
 8000fec:	e002      	b.n	8000ff4 <HAL_GPIO_Init+0x1f8>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e000      	b.n	8000ff4 <HAL_GPIO_Init+0x1f8>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	697a      	ldr	r2, [r7, #20]
 8000ff6:	2103      	movs	r1, #3
 8000ff8:	400a      	ands	r2, r1
 8000ffa:	0092      	lsls	r2, r2, #2
 8000ffc:	4093      	lsls	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001004:	4935      	ldr	r1, [pc, #212]	; (80010dc <HAL_GPIO_Init+0x2e0>)
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	089b      	lsrs	r3, r3, #2
 800100a:	3302      	adds	r3, #2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001012:	4b38      	ldr	r3, [pc, #224]	; (80010f4 <HAL_GPIO_Init+0x2f8>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	43da      	mvns	r2, r3
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	2380      	movs	r3, #128	; 0x80
 8001028:	035b      	lsls	r3, r3, #13
 800102a:	4013      	ands	r3, r2
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4313      	orrs	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001036:	4b2f      	ldr	r3, [pc, #188]	; (80010f4 <HAL_GPIO_Init+0x2f8>)
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800103c:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <HAL_GPIO_Init+0x2f8>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	43da      	mvns	r2, r3
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	039b      	lsls	r3, r3, #14
 8001054:	4013      	ands	r3, r2
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001060:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <HAL_GPIO_Init+0x2f8>)
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001066:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <HAL_GPIO_Init+0x2f8>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	43da      	mvns	r2, r3
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	2380      	movs	r3, #128	; 0x80
 800107c:	029b      	lsls	r3, r3, #10
 800107e:	4013      	ands	r3, r2
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <HAL_GPIO_Init+0x2f8>)
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <HAL_GPIO_Init+0x2f8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	43da      	mvns	r2, r3
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	025b      	lsls	r3, r3, #9
 80010a8:	4013      	ands	r3, r2
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_GPIO_Init+0x2f8>)
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	3301      	adds	r3, #1
 80010be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	40da      	lsrs	r2, r3
 80010c8:	1e13      	subs	r3, r2, #0
 80010ca:	d000      	beq.n	80010ce <HAL_GPIO_Init+0x2d2>
 80010cc:	e6a2      	b.n	8000e14 <HAL_GPIO_Init+0x18>
  }
}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	46c0      	nop			; (mov r8, r8)
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b006      	add	sp, #24
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40010000 	.word	0x40010000
 80010e0:	50000400 	.word	0x50000400
 80010e4:	50000800 	.word	0x50000800
 80010e8:	50000c00 	.word	0x50000c00
 80010ec:	50001000 	.word	0x50001000
 80010f0:	50001c00 	.word	0x50001c00
 80010f4:	40010400 	.word	0x40010400

080010f8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	000a      	movs	r2, r1
 8001102:	1cbb      	adds	r3, r7, #2
 8001104:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	1cba      	adds	r2, r7, #2
 800110c:	8812      	ldrh	r2, [r2, #0]
 800110e:	4013      	ands	r3, r2
 8001110:	d004      	beq.n	800111c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001112:	230f      	movs	r3, #15
 8001114:	18fb      	adds	r3, r7, r3
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
 800111a:	e003      	b.n	8001124 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800111c:	230f      	movs	r3, #15
 800111e:	18fb      	adds	r3, r7, r3
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001124:	230f      	movs	r3, #15
 8001126:	18fb      	adds	r3, r7, r3
 8001128:	781b      	ldrb	r3, [r3, #0]
}
 800112a:	0018      	movs	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	b004      	add	sp, #16
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	0008      	movs	r0, r1
 800113c:	0011      	movs	r1, r2
 800113e:	1cbb      	adds	r3, r7, #2
 8001140:	1c02      	adds	r2, r0, #0
 8001142:	801a      	strh	r2, [r3, #0]
 8001144:	1c7b      	adds	r3, r7, #1
 8001146:	1c0a      	adds	r2, r1, #0
 8001148:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800114a:	1c7b      	adds	r3, r7, #1
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001152:	1cbb      	adds	r3, r7, #2
 8001154:	881a      	ldrh	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800115a:	e003      	b.n	8001164 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800115c:	1cbb      	adds	r3, r7, #2
 800115e:	881a      	ldrh	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001164:	46c0      	nop			; (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	b002      	add	sp, #8
 800116a:	bd80      	pop	{r7, pc}

0800116c <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	000a      	movs	r2, r1
 8001176:	1cbb      	adds	r3, r7, #2
 8001178:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001180:	1cbb      	adds	r3, r7, #2
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	4013      	ands	r3, r2
 8001188:	041a      	lsls	r2, r3, #16
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	43db      	mvns	r3, r3
 800118e:	1cb9      	adds	r1, r7, #2
 8001190:	8809      	ldrh	r1, [r1, #0]
 8001192:	400b      	ands	r3, r1
 8001194:	431a      	orrs	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	619a      	str	r2, [r3, #24]
}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	b004      	add	sp, #16
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	0002      	movs	r2, r0
 80011ac:	1dbb      	adds	r3, r7, #6
 80011ae:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	1dba      	adds	r2, r7, #6
 80011b6:	8812      	ldrh	r2, [r2, #0]
 80011b8:	4013      	ands	r3, r2
 80011ba:	d008      	beq.n	80011ce <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80011be:	1dba      	adds	r2, r7, #6
 80011c0:	8812      	ldrh	r2, [r2, #0]
 80011c2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011c4:	1dbb      	adds	r3, r7, #6
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	0018      	movs	r0, r3
 80011ca:	f7ff faff 	bl	80007cc <HAL_GPIO_EXTI_Callback>
  }
}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b002      	add	sp, #8
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	40010400 	.word	0x40010400

080011dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011dc:	b5b0      	push	{r4, r5, r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d102      	bne.n	80011f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	f000 fb6c 	bl	80018c8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011f0:	4bc8      	ldr	r3, [pc, #800]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	220c      	movs	r2, #12
 80011f6:	4013      	ands	r3, r2
 80011f8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011fa:	4bc6      	ldr	r3, [pc, #792]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	025b      	lsls	r3, r3, #9
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2201      	movs	r2, #1
 800120c:	4013      	ands	r3, r2
 800120e:	d100      	bne.n	8001212 <HAL_RCC_OscConfig+0x36>
 8001210:	e07d      	b.n	800130e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	2b08      	cmp	r3, #8
 8001216:	d007      	beq.n	8001228 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	2b0c      	cmp	r3, #12
 800121c:	d112      	bne.n	8001244 <HAL_RCC_OscConfig+0x68>
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	025b      	lsls	r3, r3, #9
 8001224:	429a      	cmp	r2, r3
 8001226:	d10d      	bne.n	8001244 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001228:	4bba      	ldr	r3, [pc, #744]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	029b      	lsls	r3, r3, #10
 8001230:	4013      	ands	r3, r2
 8001232:	d100      	bne.n	8001236 <HAL_RCC_OscConfig+0x5a>
 8001234:	e06a      	b.n	800130c <HAL_RCC_OscConfig+0x130>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d166      	bne.n	800130c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	f000 fb42 	bl	80018c8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	025b      	lsls	r3, r3, #9
 800124c:	429a      	cmp	r2, r3
 800124e:	d107      	bne.n	8001260 <HAL_RCC_OscConfig+0x84>
 8001250:	4bb0      	ldr	r3, [pc, #704]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4baf      	ldr	r3, [pc, #700]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001256:	2180      	movs	r1, #128	; 0x80
 8001258:	0249      	lsls	r1, r1, #9
 800125a:	430a      	orrs	r2, r1
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	e027      	b.n	80012b0 <HAL_RCC_OscConfig+0xd4>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	23a0      	movs	r3, #160	; 0xa0
 8001266:	02db      	lsls	r3, r3, #11
 8001268:	429a      	cmp	r2, r3
 800126a:	d10e      	bne.n	800128a <HAL_RCC_OscConfig+0xae>
 800126c:	4ba9      	ldr	r3, [pc, #676]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4ba8      	ldr	r3, [pc, #672]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001272:	2180      	movs	r1, #128	; 0x80
 8001274:	02c9      	lsls	r1, r1, #11
 8001276:	430a      	orrs	r2, r1
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	4ba6      	ldr	r3, [pc, #664]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	4ba5      	ldr	r3, [pc, #660]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001280:	2180      	movs	r1, #128	; 0x80
 8001282:	0249      	lsls	r1, r1, #9
 8001284:	430a      	orrs	r2, r1
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	e012      	b.n	80012b0 <HAL_RCC_OscConfig+0xd4>
 800128a:	4ba2      	ldr	r3, [pc, #648]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4ba1      	ldr	r3, [pc, #644]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001290:	49a1      	ldr	r1, [pc, #644]	; (8001518 <HAL_RCC_OscConfig+0x33c>)
 8001292:	400a      	ands	r2, r1
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	4b9f      	ldr	r3, [pc, #636]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	2380      	movs	r3, #128	; 0x80
 800129c:	025b      	lsls	r3, r3, #9
 800129e:	4013      	ands	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4b9b      	ldr	r3, [pc, #620]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b9a      	ldr	r3, [pc, #616]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 80012aa:	499c      	ldr	r1, [pc, #624]	; (800151c <HAL_RCC_OscConfig+0x340>)
 80012ac:	400a      	ands	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d014      	beq.n	80012e2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fc0c 	bl	8000ad4 <HAL_GetTick>
 80012bc:	0003      	movs	r3, r0
 80012be:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c2:	f7ff fc07 	bl	8000ad4 <HAL_GetTick>
 80012c6:	0002      	movs	r2, r0
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b64      	cmp	r3, #100	; 0x64
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e2f9      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012d4:	4b8f      	ldr	r3, [pc, #572]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	2380      	movs	r3, #128	; 0x80
 80012da:	029b      	lsls	r3, r3, #10
 80012dc:	4013      	ands	r3, r2
 80012de:	d0f0      	beq.n	80012c2 <HAL_RCC_OscConfig+0xe6>
 80012e0:	e015      	b.n	800130e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e2:	f7ff fbf7 	bl	8000ad4 <HAL_GetTick>
 80012e6:	0003      	movs	r3, r0
 80012e8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ec:	f7ff fbf2 	bl	8000ad4 <HAL_GetTick>
 80012f0:	0002      	movs	r2, r0
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b64      	cmp	r3, #100	; 0x64
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e2e4      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012fe:	4b85      	ldr	r3, [pc, #532]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	029b      	lsls	r3, r3, #10
 8001306:	4013      	ands	r3, r2
 8001308:	d1f0      	bne.n	80012ec <HAL_RCC_OscConfig+0x110>
 800130a:	e000      	b.n	800130e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2202      	movs	r2, #2
 8001314:	4013      	ands	r3, r2
 8001316:	d100      	bne.n	800131a <HAL_RCC_OscConfig+0x13e>
 8001318:	e099      	b.n	800144e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	2220      	movs	r2, #32
 8001324:	4013      	ands	r3, r2
 8001326:	d009      	beq.n	800133c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001328:	4b7a      	ldr	r3, [pc, #488]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b79      	ldr	r3, [pc, #484]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 800132e:	2120      	movs	r1, #32
 8001330:	430a      	orrs	r2, r1
 8001332:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	2220      	movs	r2, #32
 8001338:	4393      	bics	r3, r2
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	2b04      	cmp	r3, #4
 8001340:	d005      	beq.n	800134e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	2b0c      	cmp	r3, #12
 8001346:	d13e      	bne.n	80013c6 <HAL_RCC_OscConfig+0x1ea>
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d13b      	bne.n	80013c6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800134e:	4b71      	ldr	r3, [pc, #452]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2204      	movs	r2, #4
 8001354:	4013      	ands	r3, r2
 8001356:	d004      	beq.n	8001362 <HAL_RCC_OscConfig+0x186>
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e2b2      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001362:	4b6c      	ldr	r3, [pc, #432]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	4a6e      	ldr	r2, [pc, #440]	; (8001520 <HAL_RCC_OscConfig+0x344>)
 8001368:	4013      	ands	r3, r2
 800136a:	0019      	movs	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	021a      	lsls	r2, r3, #8
 8001372:	4b68      	ldr	r3, [pc, #416]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001374:	430a      	orrs	r2, r1
 8001376:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001378:	4b66      	ldr	r3, [pc, #408]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2209      	movs	r2, #9
 800137e:	4393      	bics	r3, r2
 8001380:	0019      	movs	r1, r3
 8001382:	4b64      	ldr	r3, [pc, #400]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001386:	430a      	orrs	r2, r1
 8001388:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800138a:	f000 fbeb 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 800138e:	0001      	movs	r1, r0
 8001390:	4b60      	ldr	r3, [pc, #384]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	091b      	lsrs	r3, r3, #4
 8001396:	220f      	movs	r2, #15
 8001398:	4013      	ands	r3, r2
 800139a:	4a62      	ldr	r2, [pc, #392]	; (8001524 <HAL_RCC_OscConfig+0x348>)
 800139c:	5cd3      	ldrb	r3, [r2, r3]
 800139e:	000a      	movs	r2, r1
 80013a0:	40da      	lsrs	r2, r3
 80013a2:	4b61      	ldr	r3, [pc, #388]	; (8001528 <HAL_RCC_OscConfig+0x34c>)
 80013a4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80013a6:	4b61      	ldr	r3, [pc, #388]	; (800152c <HAL_RCC_OscConfig+0x350>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2513      	movs	r5, #19
 80013ac:	197c      	adds	r4, r7, r5
 80013ae:	0018      	movs	r0, r3
 80013b0:	f7ff fb4a 	bl	8000a48 <HAL_InitTick>
 80013b4:	0003      	movs	r3, r0
 80013b6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80013b8:	197b      	adds	r3, r7, r5
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d046      	beq.n	800144e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80013c0:	197b      	adds	r3, r7, r5
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	e280      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d027      	beq.n	800141c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013cc:	4b51      	ldr	r3, [pc, #324]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2209      	movs	r2, #9
 80013d2:	4393      	bics	r3, r2
 80013d4:	0019      	movs	r1, r3
 80013d6:	4b4f      	ldr	r3, [pc, #316]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 80013d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013da:	430a      	orrs	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013de:	f7ff fb79 	bl	8000ad4 <HAL_GetTick>
 80013e2:	0003      	movs	r3, r0
 80013e4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e8:	f7ff fb74 	bl	8000ad4 <HAL_GetTick>
 80013ec:	0002      	movs	r2, r0
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e266      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013fa:	4b46      	ldr	r3, [pc, #280]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2204      	movs	r2, #4
 8001400:	4013      	ands	r3, r2
 8001402:	d0f1      	beq.n	80013e8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001404:	4b43      	ldr	r3, [pc, #268]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	4a45      	ldr	r2, [pc, #276]	; (8001520 <HAL_RCC_OscConfig+0x344>)
 800140a:	4013      	ands	r3, r2
 800140c:	0019      	movs	r1, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	021a      	lsls	r2, r3, #8
 8001414:	4b3f      	ldr	r3, [pc, #252]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001416:	430a      	orrs	r2, r1
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	e018      	b.n	800144e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800141c:	4b3d      	ldr	r3, [pc, #244]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b3c      	ldr	r3, [pc, #240]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001422:	2101      	movs	r1, #1
 8001424:	438a      	bics	r2, r1
 8001426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fb54 	bl	8000ad4 <HAL_GetTick>
 800142c:	0003      	movs	r3, r0
 800142e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001432:	f7ff fb4f 	bl	8000ad4 <HAL_GetTick>
 8001436:	0002      	movs	r2, r0
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e241      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001444:	4b33      	ldr	r3, [pc, #204]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2204      	movs	r2, #4
 800144a:	4013      	ands	r3, r2
 800144c:	d1f1      	bne.n	8001432 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2210      	movs	r2, #16
 8001454:	4013      	ands	r3, r2
 8001456:	d100      	bne.n	800145a <HAL_RCC_OscConfig+0x27e>
 8001458:	e0a1      	b.n	800159e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d140      	bne.n	80014e2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001460:	4b2c      	ldr	r3, [pc, #176]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4013      	ands	r3, r2
 800146a:	d005      	beq.n	8001478 <HAL_RCC_OscConfig+0x29c>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e227      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001478:	4b26      	ldr	r3, [pc, #152]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	4a2c      	ldr	r2, [pc, #176]	; (8001530 <HAL_RCC_OscConfig+0x354>)
 800147e:	4013      	ands	r3, r2
 8001480:	0019      	movs	r1, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1a      	ldr	r2, [r3, #32]
 8001486:	4b23      	ldr	r3, [pc, #140]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001488:	430a      	orrs	r2, r1
 800148a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800148c:	4b21      	ldr	r3, [pc, #132]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	021b      	lsls	r3, r3, #8
 8001492:	0a19      	lsrs	r1, r3, #8
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	061a      	lsls	r2, r3, #24
 800149a:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 800149c:	430a      	orrs	r2, r1
 800149e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	0b5b      	lsrs	r3, r3, #13
 80014a6:	3301      	adds	r3, #1
 80014a8:	2280      	movs	r2, #128	; 0x80
 80014aa:	0212      	lsls	r2, r2, #8
 80014ac:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80014ae:	4b19      	ldr	r3, [pc, #100]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	091b      	lsrs	r3, r3, #4
 80014b4:	210f      	movs	r1, #15
 80014b6:	400b      	ands	r3, r1
 80014b8:	491a      	ldr	r1, [pc, #104]	; (8001524 <HAL_RCC_OscConfig+0x348>)
 80014ba:	5ccb      	ldrb	r3, [r1, r3]
 80014bc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014be:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <HAL_RCC_OscConfig+0x34c>)
 80014c0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <HAL_RCC_OscConfig+0x350>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2513      	movs	r5, #19
 80014c8:	197c      	adds	r4, r7, r5
 80014ca:	0018      	movs	r0, r3
 80014cc:	f7ff fabc 	bl	8000a48 <HAL_InitTick>
 80014d0:	0003      	movs	r3, r0
 80014d2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80014d4:	197b      	adds	r3, r7, r5
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d060      	beq.n	800159e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80014dc:	197b      	adds	r3, r7, r5
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	e1f2      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d03f      	beq.n	800156a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 80014f0:	2180      	movs	r1, #128	; 0x80
 80014f2:	0049      	lsls	r1, r1, #1
 80014f4:	430a      	orrs	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff faec 	bl	8000ad4 <HAL_GetTick>
 80014fc:	0003      	movs	r3, r0
 80014fe:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001500:	e018      	b.n	8001534 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001502:	f7ff fae7 	bl	8000ad4 <HAL_GetTick>
 8001506:	0002      	movs	r2, r0
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d911      	bls.n	8001534 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e1d9      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
 8001514:	40021000 	.word	0x40021000
 8001518:	fffeffff 	.word	0xfffeffff
 800151c:	fffbffff 	.word	0xfffbffff
 8001520:	ffffe0ff 	.word	0xffffe0ff
 8001524:	080039bc 	.word	0x080039bc
 8001528:	20000000 	.word	0x20000000
 800152c:	20000004 	.word	0x20000004
 8001530:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001534:	4bc9      	ldr	r3, [pc, #804]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4013      	ands	r3, r2
 800153e:	d0e0      	beq.n	8001502 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001540:	4bc6      	ldr	r3, [pc, #792]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	4ac6      	ldr	r2, [pc, #792]	; (8001860 <HAL_RCC_OscConfig+0x684>)
 8001546:	4013      	ands	r3, r2
 8001548:	0019      	movs	r1, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a1a      	ldr	r2, [r3, #32]
 800154e:	4bc3      	ldr	r3, [pc, #780]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001550:	430a      	orrs	r2, r1
 8001552:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001554:	4bc1      	ldr	r3, [pc, #772]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	0a19      	lsrs	r1, r3, #8
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	061a      	lsls	r2, r3, #24
 8001562:	4bbe      	ldr	r3, [pc, #760]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001564:	430a      	orrs	r2, r1
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	e019      	b.n	800159e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800156a:	4bbc      	ldr	r3, [pc, #752]	; (800185c <HAL_RCC_OscConfig+0x680>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4bbb      	ldr	r3, [pc, #748]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001570:	49bc      	ldr	r1, [pc, #752]	; (8001864 <HAL_RCC_OscConfig+0x688>)
 8001572:	400a      	ands	r2, r1
 8001574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001576:	f7ff faad 	bl	8000ad4 <HAL_GetTick>
 800157a:	0003      	movs	r3, r0
 800157c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001580:	f7ff faa8 	bl	8000ad4 <HAL_GetTick>
 8001584:	0002      	movs	r2, r0
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e19a      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001592:	4bb2      	ldr	r3, [pc, #712]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	2380      	movs	r3, #128	; 0x80
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4013      	ands	r3, r2
 800159c:	d1f0      	bne.n	8001580 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2208      	movs	r2, #8
 80015a4:	4013      	ands	r3, r2
 80015a6:	d036      	beq.n	8001616 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d019      	beq.n	80015e4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015b0:	4baa      	ldr	r3, [pc, #680]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80015b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015b4:	4ba9      	ldr	r3, [pc, #676]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80015b6:	2101      	movs	r1, #1
 80015b8:	430a      	orrs	r2, r1
 80015ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015bc:	f7ff fa8a 	bl	8000ad4 <HAL_GetTick>
 80015c0:	0003      	movs	r3, r0
 80015c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c6:	f7ff fa85 	bl	8000ad4 <HAL_GetTick>
 80015ca:	0002      	movs	r2, r0
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e177      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015d8:	4ba0      	ldr	r3, [pc, #640]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80015da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015dc:	2202      	movs	r2, #2
 80015de:	4013      	ands	r3, r2
 80015e0:	d0f1      	beq.n	80015c6 <HAL_RCC_OscConfig+0x3ea>
 80015e2:	e018      	b.n	8001616 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e4:	4b9d      	ldr	r3, [pc, #628]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80015e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015e8:	4b9c      	ldr	r3, [pc, #624]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80015ea:	2101      	movs	r1, #1
 80015ec:	438a      	bics	r2, r1
 80015ee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f0:	f7ff fa70 	bl	8000ad4 <HAL_GetTick>
 80015f4:	0003      	movs	r3, r0
 80015f6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015fa:	f7ff fa6b 	bl	8000ad4 <HAL_GetTick>
 80015fe:	0002      	movs	r2, r0
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e15d      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800160c:	4b93      	ldr	r3, [pc, #588]	; (800185c <HAL_RCC_OscConfig+0x680>)
 800160e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001610:	2202      	movs	r2, #2
 8001612:	4013      	ands	r3, r2
 8001614:	d1f1      	bne.n	80015fa <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2204      	movs	r2, #4
 800161c:	4013      	ands	r3, r2
 800161e:	d100      	bne.n	8001622 <HAL_RCC_OscConfig+0x446>
 8001620:	e0ae      	b.n	8001780 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001622:	2023      	movs	r0, #35	; 0x23
 8001624:	183b      	adds	r3, r7, r0
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800162a:	4b8c      	ldr	r3, [pc, #560]	; (800185c <HAL_RCC_OscConfig+0x680>)
 800162c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	055b      	lsls	r3, r3, #21
 8001632:	4013      	ands	r3, r2
 8001634:	d109      	bne.n	800164a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	4b89      	ldr	r3, [pc, #548]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800163a:	4b88      	ldr	r3, [pc, #544]	; (800185c <HAL_RCC_OscConfig+0x680>)
 800163c:	2180      	movs	r1, #128	; 0x80
 800163e:	0549      	lsls	r1, r1, #21
 8001640:	430a      	orrs	r2, r1
 8001642:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001644:	183b      	adds	r3, r7, r0
 8001646:	2201      	movs	r2, #1
 8001648:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164a:	4b87      	ldr	r3, [pc, #540]	; (8001868 <HAL_RCC_OscConfig+0x68c>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	2380      	movs	r3, #128	; 0x80
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4013      	ands	r3, r2
 8001654:	d11a      	bne.n	800168c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001656:	4b84      	ldr	r3, [pc, #528]	; (8001868 <HAL_RCC_OscConfig+0x68c>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4b83      	ldr	r3, [pc, #524]	; (8001868 <HAL_RCC_OscConfig+0x68c>)
 800165c:	2180      	movs	r1, #128	; 0x80
 800165e:	0049      	lsls	r1, r1, #1
 8001660:	430a      	orrs	r2, r1
 8001662:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001664:	f7ff fa36 	bl	8000ad4 <HAL_GetTick>
 8001668:	0003      	movs	r3, r0
 800166a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800166e:	f7ff fa31 	bl	8000ad4 <HAL_GetTick>
 8001672:	0002      	movs	r2, r0
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b64      	cmp	r3, #100	; 0x64
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e123      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001680:	4b79      	ldr	r3, [pc, #484]	; (8001868 <HAL_RCC_OscConfig+0x68c>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4013      	ands	r3, r2
 800168a:	d0f0      	beq.n	800166e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	429a      	cmp	r2, r3
 8001696:	d107      	bne.n	80016a8 <HAL_RCC_OscConfig+0x4cc>
 8001698:	4b70      	ldr	r3, [pc, #448]	; (800185c <HAL_RCC_OscConfig+0x680>)
 800169a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800169c:	4b6f      	ldr	r3, [pc, #444]	; (800185c <HAL_RCC_OscConfig+0x680>)
 800169e:	2180      	movs	r1, #128	; 0x80
 80016a0:	0049      	lsls	r1, r1, #1
 80016a2:	430a      	orrs	r2, r1
 80016a4:	651a      	str	r2, [r3, #80]	; 0x50
 80016a6:	e031      	b.n	800170c <HAL_RCC_OscConfig+0x530>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10c      	bne.n	80016ca <HAL_RCC_OscConfig+0x4ee>
 80016b0:	4b6a      	ldr	r3, [pc, #424]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80016b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016b4:	4b69      	ldr	r3, [pc, #420]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80016b6:	496b      	ldr	r1, [pc, #428]	; (8001864 <HAL_RCC_OscConfig+0x688>)
 80016b8:	400a      	ands	r2, r1
 80016ba:	651a      	str	r2, [r3, #80]	; 0x50
 80016bc:	4b67      	ldr	r3, [pc, #412]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80016be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016c0:	4b66      	ldr	r3, [pc, #408]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80016c2:	496a      	ldr	r1, [pc, #424]	; (800186c <HAL_RCC_OscConfig+0x690>)
 80016c4:	400a      	ands	r2, r1
 80016c6:	651a      	str	r2, [r3, #80]	; 0x50
 80016c8:	e020      	b.n	800170c <HAL_RCC_OscConfig+0x530>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	23a0      	movs	r3, #160	; 0xa0
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d10e      	bne.n	80016f4 <HAL_RCC_OscConfig+0x518>
 80016d6:	4b61      	ldr	r3, [pc, #388]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80016d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016da:	4b60      	ldr	r3, [pc, #384]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80016dc:	2180      	movs	r1, #128	; 0x80
 80016de:	00c9      	lsls	r1, r1, #3
 80016e0:	430a      	orrs	r2, r1
 80016e2:	651a      	str	r2, [r3, #80]	; 0x50
 80016e4:	4b5d      	ldr	r3, [pc, #372]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80016e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016e8:	4b5c      	ldr	r3, [pc, #368]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80016ea:	2180      	movs	r1, #128	; 0x80
 80016ec:	0049      	lsls	r1, r1, #1
 80016ee:	430a      	orrs	r2, r1
 80016f0:	651a      	str	r2, [r3, #80]	; 0x50
 80016f2:	e00b      	b.n	800170c <HAL_RCC_OscConfig+0x530>
 80016f4:	4b59      	ldr	r3, [pc, #356]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80016f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016f8:	4b58      	ldr	r3, [pc, #352]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80016fa:	495a      	ldr	r1, [pc, #360]	; (8001864 <HAL_RCC_OscConfig+0x688>)
 80016fc:	400a      	ands	r2, r1
 80016fe:	651a      	str	r2, [r3, #80]	; 0x50
 8001700:	4b56      	ldr	r3, [pc, #344]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001702:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001704:	4b55      	ldr	r3, [pc, #340]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001706:	4959      	ldr	r1, [pc, #356]	; (800186c <HAL_RCC_OscConfig+0x690>)
 8001708:	400a      	ands	r2, r1
 800170a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d015      	beq.n	8001740 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001714:	f7ff f9de 	bl	8000ad4 <HAL_GetTick>
 8001718:	0003      	movs	r3, r0
 800171a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800171c:	e009      	b.n	8001732 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800171e:	f7ff f9d9 	bl	8000ad4 <HAL_GetTick>
 8001722:	0002      	movs	r2, r0
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	4a51      	ldr	r2, [pc, #324]	; (8001870 <HAL_RCC_OscConfig+0x694>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e0ca      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001732:	4b4a      	ldr	r3, [pc, #296]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001734:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001736:	2380      	movs	r3, #128	; 0x80
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4013      	ands	r3, r2
 800173c:	d0ef      	beq.n	800171e <HAL_RCC_OscConfig+0x542>
 800173e:	e014      	b.n	800176a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001740:	f7ff f9c8 	bl	8000ad4 <HAL_GetTick>
 8001744:	0003      	movs	r3, r0
 8001746:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001748:	e009      	b.n	800175e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800174a:	f7ff f9c3 	bl	8000ad4 <HAL_GetTick>
 800174e:	0002      	movs	r2, r0
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	4a46      	ldr	r2, [pc, #280]	; (8001870 <HAL_RCC_OscConfig+0x694>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e0b4      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800175e:	4b3f      	ldr	r3, [pc, #252]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001760:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4013      	ands	r3, r2
 8001768:	d1ef      	bne.n	800174a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800176a:	2323      	movs	r3, #35	; 0x23
 800176c:	18fb      	adds	r3, r7, r3
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d105      	bne.n	8001780 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001774:	4b39      	ldr	r3, [pc, #228]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001778:	4b38      	ldr	r3, [pc, #224]	; (800185c <HAL_RCC_OscConfig+0x680>)
 800177a:	493e      	ldr	r1, [pc, #248]	; (8001874 <HAL_RCC_OscConfig+0x698>)
 800177c:	400a      	ands	r2, r1
 800177e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	2b00      	cmp	r3, #0
 8001786:	d100      	bne.n	800178a <HAL_RCC_OscConfig+0x5ae>
 8001788:	e09d      	b.n	80018c6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	2b0c      	cmp	r3, #12
 800178e:	d100      	bne.n	8001792 <HAL_RCC_OscConfig+0x5b6>
 8001790:	e076      	b.n	8001880 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	2b02      	cmp	r3, #2
 8001798:	d145      	bne.n	8001826 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179a:	4b30      	ldr	r3, [pc, #192]	; (800185c <HAL_RCC_OscConfig+0x680>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4b2f      	ldr	r3, [pc, #188]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80017a0:	4935      	ldr	r1, [pc, #212]	; (8001878 <HAL_RCC_OscConfig+0x69c>)
 80017a2:	400a      	ands	r2, r1
 80017a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a6:	f7ff f995 	bl	8000ad4 <HAL_GetTick>
 80017aa:	0003      	movs	r3, r0
 80017ac:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b0:	f7ff f990 	bl	8000ad4 <HAL_GetTick>
 80017b4:	0002      	movs	r2, r0
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e082      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017c2:	4b26      	ldr	r3, [pc, #152]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	049b      	lsls	r3, r3, #18
 80017ca:	4013      	ands	r3, r2
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ce:	4b23      	ldr	r3, [pc, #140]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	4a2a      	ldr	r2, [pc, #168]	; (800187c <HAL_RCC_OscConfig+0x6a0>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	0019      	movs	r1, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	431a      	orrs	r2, r3
 80017e8:	4b1c      	ldr	r3, [pc, #112]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80017ea:	430a      	orrs	r2, r1
 80017ec:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80017f4:	2180      	movs	r1, #128	; 0x80
 80017f6:	0449      	lsls	r1, r1, #17
 80017f8:	430a      	orrs	r2, r1
 80017fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff f96a 	bl	8000ad4 <HAL_GetTick>
 8001800:	0003      	movs	r3, r0
 8001802:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001806:	f7ff f965 	bl	8000ad4 <HAL_GetTick>
 800180a:	0002      	movs	r2, r0
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e057      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <HAL_RCC_OscConfig+0x680>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	049b      	lsls	r3, r3, #18
 8001820:	4013      	ands	r3, r2
 8001822:	d0f0      	beq.n	8001806 <HAL_RCC_OscConfig+0x62a>
 8001824:	e04f      	b.n	80018c6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001826:	4b0d      	ldr	r3, [pc, #52]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <HAL_RCC_OscConfig+0x680>)
 800182c:	4912      	ldr	r1, [pc, #72]	; (8001878 <HAL_RCC_OscConfig+0x69c>)
 800182e:	400a      	ands	r2, r1
 8001830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001832:	f7ff f94f 	bl	8000ad4 <HAL_GetTick>
 8001836:	0003      	movs	r3, r0
 8001838:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800183c:	f7ff f94a 	bl	8000ad4 <HAL_GetTick>
 8001840:	0002      	movs	r2, r0
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e03c      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800184e:	4b03      	ldr	r3, [pc, #12]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	049b      	lsls	r3, r3, #18
 8001856:	4013      	ands	r3, r2
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0x660>
 800185a:	e034      	b.n	80018c6 <HAL_RCC_OscConfig+0x6ea>
 800185c:	40021000 	.word	0x40021000
 8001860:	ffff1fff 	.word	0xffff1fff
 8001864:	fffffeff 	.word	0xfffffeff
 8001868:	40007000 	.word	0x40007000
 800186c:	fffffbff 	.word	0xfffffbff
 8001870:	00001388 	.word	0x00001388
 8001874:	efffffff 	.word	0xefffffff
 8001878:	feffffff 	.word	0xfeffffff
 800187c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	2b01      	cmp	r3, #1
 8001886:	d101      	bne.n	800188c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e01d      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <HAL_RCC_OscConfig+0x6f4>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	025b      	lsls	r3, r3, #9
 8001898:	401a      	ands	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189e:	429a      	cmp	r2, r3
 80018a0:	d10f      	bne.n	80018c2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	23f0      	movs	r3, #240	; 0xf0
 80018a6:	039b      	lsls	r3, r3, #14
 80018a8:	401a      	ands	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d107      	bne.n	80018c2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	23c0      	movs	r3, #192	; 0xc0
 80018b6:	041b      	lsls	r3, r3, #16
 80018b8:	401a      	ands	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018be:	429a      	cmp	r2, r3
 80018c0:	d001      	beq.n	80018c6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	0018      	movs	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b00a      	add	sp, #40	; 0x28
 80018ce:	bdb0      	pop	{r4, r5, r7, pc}
 80018d0:	40021000 	.word	0x40021000

080018d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d4:	b5b0      	push	{r4, r5, r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e128      	b.n	8001b3a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018e8:	4b96      	ldr	r3, [pc, #600]	; (8001b44 <HAL_RCC_ClockConfig+0x270>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2201      	movs	r2, #1
 80018ee:	4013      	ands	r3, r2
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d91e      	bls.n	8001934 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f6:	4b93      	ldr	r3, [pc, #588]	; (8001b44 <HAL_RCC_ClockConfig+0x270>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2201      	movs	r2, #1
 80018fc:	4393      	bics	r3, r2
 80018fe:	0019      	movs	r1, r3
 8001900:	4b90      	ldr	r3, [pc, #576]	; (8001b44 <HAL_RCC_ClockConfig+0x270>)
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001908:	f7ff f8e4 	bl	8000ad4 <HAL_GetTick>
 800190c:	0003      	movs	r3, r0
 800190e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001910:	e009      	b.n	8001926 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001912:	f7ff f8df 	bl	8000ad4 <HAL_GetTick>
 8001916:	0002      	movs	r2, r0
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	4a8a      	ldr	r2, [pc, #552]	; (8001b48 <HAL_RCC_ClockConfig+0x274>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e109      	b.n	8001b3a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001926:	4b87      	ldr	r3, [pc, #540]	; (8001b44 <HAL_RCC_ClockConfig+0x270>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2201      	movs	r2, #1
 800192c:	4013      	ands	r3, r2
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d1ee      	bne.n	8001912 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2202      	movs	r2, #2
 800193a:	4013      	ands	r3, r2
 800193c:	d009      	beq.n	8001952 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800193e:	4b83      	ldr	r3, [pc, #524]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	22f0      	movs	r2, #240	; 0xf0
 8001944:	4393      	bics	r3, r2
 8001946:	0019      	movs	r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	4b7f      	ldr	r3, [pc, #508]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 800194e:	430a      	orrs	r2, r1
 8001950:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2201      	movs	r2, #1
 8001958:	4013      	ands	r3, r2
 800195a:	d100      	bne.n	800195e <HAL_RCC_ClockConfig+0x8a>
 800195c:	e089      	b.n	8001a72 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b02      	cmp	r3, #2
 8001964:	d107      	bne.n	8001976 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001966:	4b79      	ldr	r3, [pc, #484]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	029b      	lsls	r3, r3, #10
 800196e:	4013      	ands	r3, r2
 8001970:	d120      	bne.n	80019b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e0e1      	b.n	8001b3a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b03      	cmp	r3, #3
 800197c:	d107      	bne.n	800198e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800197e:	4b73      	ldr	r3, [pc, #460]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	2380      	movs	r3, #128	; 0x80
 8001984:	049b      	lsls	r3, r3, #18
 8001986:	4013      	ands	r3, r2
 8001988:	d114      	bne.n	80019b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e0d5      	b.n	8001b3a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d106      	bne.n	80019a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001996:	4b6d      	ldr	r3, [pc, #436]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2204      	movs	r2, #4
 800199c:	4013      	ands	r3, r2
 800199e:	d109      	bne.n	80019b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0ca      	b.n	8001b3a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019a4:	4b69      	ldr	r3, [pc, #420]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4013      	ands	r3, r2
 80019ae:	d101      	bne.n	80019b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0c2      	b.n	8001b3a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019b4:	4b65      	ldr	r3, [pc, #404]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	2203      	movs	r2, #3
 80019ba:	4393      	bics	r3, r2
 80019bc:	0019      	movs	r1, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	4b62      	ldr	r3, [pc, #392]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 80019c4:	430a      	orrs	r2, r1
 80019c6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019c8:	f7ff f884 	bl	8000ad4 <HAL_GetTick>
 80019cc:	0003      	movs	r3, r0
 80019ce:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d111      	bne.n	80019fc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019d8:	e009      	b.n	80019ee <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019da:	f7ff f87b 	bl	8000ad4 <HAL_GetTick>
 80019de:	0002      	movs	r2, r0
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	4a58      	ldr	r2, [pc, #352]	; (8001b48 <HAL_RCC_ClockConfig+0x274>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e0a5      	b.n	8001b3a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019ee:	4b57      	ldr	r3, [pc, #348]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	220c      	movs	r2, #12
 80019f4:	4013      	ands	r3, r2
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d1ef      	bne.n	80019da <HAL_RCC_ClockConfig+0x106>
 80019fa:	e03a      	b.n	8001a72 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	d111      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a04:	e009      	b.n	8001a1a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a06:	f7ff f865 	bl	8000ad4 <HAL_GetTick>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	4a4d      	ldr	r2, [pc, #308]	; (8001b48 <HAL_RCC_ClockConfig+0x274>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e08f      	b.n	8001b3a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a1a:	4b4c      	ldr	r3, [pc, #304]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	220c      	movs	r2, #12
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b0c      	cmp	r3, #12
 8001a24:	d1ef      	bne.n	8001a06 <HAL_RCC_ClockConfig+0x132>
 8001a26:	e024      	b.n	8001a72 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d11b      	bne.n	8001a68 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a30:	e009      	b.n	8001a46 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a32:	f7ff f84f 	bl	8000ad4 <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	4a42      	ldr	r2, [pc, #264]	; (8001b48 <HAL_RCC_ClockConfig+0x274>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e079      	b.n	8001b3a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a46:	4b41      	ldr	r3, [pc, #260]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d1ef      	bne.n	8001a32 <HAL_RCC_ClockConfig+0x15e>
 8001a52:	e00e      	b.n	8001a72 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a54:	f7ff f83e 	bl	8000ad4 <HAL_GetTick>
 8001a58:	0002      	movs	r2, r0
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	4a3a      	ldr	r2, [pc, #232]	; (8001b48 <HAL_RCC_ClockConfig+0x274>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e068      	b.n	8001b3a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a68:	4b38      	ldr	r3, [pc, #224]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	220c      	movs	r2, #12
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a72:	4b34      	ldr	r3, [pc, #208]	; (8001b44 <HAL_RCC_ClockConfig+0x270>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2201      	movs	r2, #1
 8001a78:	4013      	ands	r3, r2
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d21e      	bcs.n	8001abe <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a80:	4b30      	ldr	r3, [pc, #192]	; (8001b44 <HAL_RCC_ClockConfig+0x270>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2201      	movs	r2, #1
 8001a86:	4393      	bics	r3, r2
 8001a88:	0019      	movs	r1, r3
 8001a8a:	4b2e      	ldr	r3, [pc, #184]	; (8001b44 <HAL_RCC_ClockConfig+0x270>)
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a92:	f7ff f81f 	bl	8000ad4 <HAL_GetTick>
 8001a96:	0003      	movs	r3, r0
 8001a98:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9a:	e009      	b.n	8001ab0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9c:	f7ff f81a 	bl	8000ad4 <HAL_GetTick>
 8001aa0:	0002      	movs	r2, r0
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	4a28      	ldr	r2, [pc, #160]	; (8001b48 <HAL_RCC_ClockConfig+0x274>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e044      	b.n	8001b3a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab0:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <HAL_RCC_ClockConfig+0x270>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d1ee      	bne.n	8001a9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d009      	beq.n	8001adc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac8:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	4a20      	ldr	r2, [pc, #128]	; (8001b50 <HAL_RCC_ClockConfig+0x27c>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	0019      	movs	r1, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2208      	movs	r2, #8
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d00a      	beq.n	8001afc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ae6:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	4a1a      	ldr	r2, [pc, #104]	; (8001b54 <HAL_RCC_ClockConfig+0x280>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	0019      	movs	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	00da      	lsls	r2, r3, #3
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 8001af8:	430a      	orrs	r2, r1
 8001afa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001afc:	f000 f832 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 8001b00:	0001      	movs	r1, r0
 8001b02:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	091b      	lsrs	r3, r3, #4
 8001b08:	220f      	movs	r2, #15
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <HAL_RCC_ClockConfig+0x284>)
 8001b0e:	5cd3      	ldrb	r3, [r2, r3]
 8001b10:	000a      	movs	r2, r1
 8001b12:	40da      	lsrs	r2, r3
 8001b14:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <HAL_RCC_ClockConfig+0x288>)
 8001b16:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_RCC_ClockConfig+0x28c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	250b      	movs	r5, #11
 8001b1e:	197c      	adds	r4, r7, r5
 8001b20:	0018      	movs	r0, r3
 8001b22:	f7fe ff91 	bl	8000a48 <HAL_InitTick>
 8001b26:	0003      	movs	r3, r0
 8001b28:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001b2a:	197b      	adds	r3, r7, r5
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d002      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001b32:	197b      	adds	r3, r7, r5
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	e000      	b.n	8001b3a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b004      	add	sp, #16
 8001b40:	bdb0      	pop	{r4, r5, r7, pc}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	40022000 	.word	0x40022000
 8001b48:	00001388 	.word	0x00001388
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	fffff8ff 	.word	0xfffff8ff
 8001b54:	ffffc7ff 	.word	0xffffc7ff
 8001b58:	080039bc 	.word	0x080039bc
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	20000004 	.word	0x20000004

08001b64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b64:	b5b0      	push	{r4, r5, r7, lr}
 8001b66:	b08e      	sub	sp, #56	; 0x38
 8001b68:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001b6a:	4b4c      	ldr	r3, [pc, #304]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x138>)
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b72:	230c      	movs	r3, #12
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b0c      	cmp	r3, #12
 8001b78:	d014      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x40>
 8001b7a:	d900      	bls.n	8001b7e <HAL_RCC_GetSysClockFreq+0x1a>
 8001b7c:	e07b      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0x112>
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d002      	beq.n	8001b88 <HAL_RCC_GetSysClockFreq+0x24>
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d00b      	beq.n	8001b9e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b86:	e076      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b88:	4b44      	ldr	r3, [pc, #272]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x138>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2210      	movs	r2, #16
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d002      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001b92:	4b43      	ldr	r3, [pc, #268]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b94:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001b96:	e07c      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001b98:	4b42      	ldr	r3, [pc, #264]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001b9a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b9c:	e079      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b9e:	4b42      	ldr	r3, [pc, #264]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ba0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ba2:	e076      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba6:	0c9a      	lsrs	r2, r3, #18
 8001ba8:	230f      	movs	r3, #15
 8001baa:	401a      	ands	r2, r3
 8001bac:	4b3f      	ldr	r3, [pc, #252]	; (8001cac <HAL_RCC_GetSysClockFreq+0x148>)
 8001bae:	5c9b      	ldrb	r3, [r3, r2]
 8001bb0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb4:	0d9a      	lsrs	r2, r3, #22
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	4013      	ands	r3, r2
 8001bba:	3301      	adds	r3, #1
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bbe:	4b37      	ldr	r3, [pc, #220]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x138>)
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	2380      	movs	r3, #128	; 0x80
 8001bc4:	025b      	lsls	r3, r3, #9
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d01a      	beq.n	8001c00 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bcc:	61bb      	str	r3, [r7, #24]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
 8001bd2:	4a35      	ldr	r2, [pc, #212]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x144>)
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	69b8      	ldr	r0, [r7, #24]
 8001bd8:	69f9      	ldr	r1, [r7, #28]
 8001bda:	f7fe fb41 	bl	8000260 <__aeabi_lmul>
 8001bde:	0002      	movs	r2, r0
 8001be0:	000b      	movs	r3, r1
 8001be2:	0010      	movs	r0, r2
 8001be4:	0019      	movs	r1, r3
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f7fe fb15 	bl	8000220 <__aeabi_uldivmod>
 8001bf6:	0002      	movs	r2, r0
 8001bf8:	000b      	movs	r3, r1
 8001bfa:	0013      	movs	r3, r2
 8001bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8001bfe:	e037      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c00:	4b26      	ldr	r3, [pc, #152]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x138>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2210      	movs	r2, #16
 8001c06:	4013      	ands	r3, r2
 8001c08:	d01a      	beq.n	8001c40 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4a23      	ldr	r2, [pc, #140]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c14:	2300      	movs	r3, #0
 8001c16:	68b8      	ldr	r0, [r7, #8]
 8001c18:	68f9      	ldr	r1, [r7, #12]
 8001c1a:	f7fe fb21 	bl	8000260 <__aeabi_lmul>
 8001c1e:	0002      	movs	r2, r0
 8001c20:	000b      	movs	r3, r1
 8001c22:	0010      	movs	r0, r2
 8001c24:	0019      	movs	r1, r3
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	603b      	str	r3, [r7, #0]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f7fe faf5 	bl	8000220 <__aeabi_uldivmod>
 8001c36:	0002      	movs	r2, r0
 8001c38:	000b      	movs	r3, r1
 8001c3a:	0013      	movs	r3, r2
 8001c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8001c3e:	e017      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c42:	0018      	movs	r0, r3
 8001c44:	2300      	movs	r3, #0
 8001c46:	0019      	movs	r1, r3
 8001c48:	4a16      	ldr	r2, [pc, #88]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f7fe fb08 	bl	8000260 <__aeabi_lmul>
 8001c50:	0002      	movs	r2, r0
 8001c52:	000b      	movs	r3, r1
 8001c54:	0010      	movs	r0, r2
 8001c56:	0019      	movs	r1, r3
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	001c      	movs	r4, r3
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	001d      	movs	r5, r3
 8001c60:	0022      	movs	r2, r4
 8001c62:	002b      	movs	r3, r5
 8001c64:	f7fe fadc 	bl	8000220 <__aeabi_uldivmod>
 8001c68:	0002      	movs	r2, r0
 8001c6a:	000b      	movs	r3, r1
 8001c6c:	0013      	movs	r3, r2
 8001c6e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c72:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c74:	e00d      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x138>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	0b5b      	lsrs	r3, r3, #13
 8001c7c:	2207      	movs	r2, #7
 8001c7e:	4013      	ands	r3, r2
 8001c80:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	3301      	adds	r3, #1
 8001c86:	2280      	movs	r2, #128	; 0x80
 8001c88:	0212      	lsls	r2, r2, #8
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	0013      	movs	r3, r2
 8001c8e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c90:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c94:	0018      	movs	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b00e      	add	sp, #56	; 0x38
 8001c9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	003d0900 	.word	0x003d0900
 8001ca4:	00f42400 	.word	0x00f42400
 8001ca8:	007a1200 	.word	0x007a1200
 8001cac:	080039d4 	.word	0x080039d4

08001cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb4:	4b02      	ldr	r3, [pc, #8]	; (8001cc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	0018      	movs	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	20000000 	.word	0x20000000

08001cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cc8:	f7ff fff2 	bl	8001cb0 <HAL_RCC_GetHCLKFreq>
 8001ccc:	0001      	movs	r1, r0
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	0a1b      	lsrs	r3, r3, #8
 8001cd4:	2207      	movs	r2, #7
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	4a04      	ldr	r2, [pc, #16]	; (8001cec <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cda:	5cd3      	ldrb	r3, [r2, r3]
 8001cdc:	40d9      	lsrs	r1, r3
 8001cde:	000b      	movs	r3, r1
}
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	080039cc 	.word	0x080039cc

08001cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cf4:	f7ff ffdc 	bl	8001cb0 <HAL_RCC_GetHCLKFreq>
 8001cf8:	0001      	movs	r1, r0
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	0adb      	lsrs	r3, r3, #11
 8001d00:	2207      	movs	r2, #7
 8001d02:	4013      	ands	r3, r2
 8001d04:	4a04      	ldr	r2, [pc, #16]	; (8001d18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d06:	5cd3      	ldrb	r3, [r2, r3]
 8001d08:	40d9      	lsrs	r1, r3
 8001d0a:	000b      	movs	r3, r1
}
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	40021000 	.word	0x40021000
 8001d18:	080039cc 	.word	0x080039cc

08001d1c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001d24:	2017      	movs	r0, #23
 8001d26:	183b      	adds	r3, r7, r0
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2220      	movs	r2, #32
 8001d32:	4013      	ands	r3, r2
 8001d34:	d100      	bne.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001d36:	e0c7      	b.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d38:	4b84      	ldr	r3, [pc, #528]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	055b      	lsls	r3, r3, #21
 8001d40:	4013      	ands	r3, r2
 8001d42:	d109      	bne.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d44:	4b81      	ldr	r3, [pc, #516]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d48:	4b80      	ldr	r3, [pc, #512]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d4a:	2180      	movs	r1, #128	; 0x80
 8001d4c:	0549      	lsls	r1, r1, #21
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001d52:	183b      	adds	r3, r7, r0
 8001d54:	2201      	movs	r2, #1
 8001d56:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d58:	4b7d      	ldr	r3, [pc, #500]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4013      	ands	r3, r2
 8001d62:	d11a      	bne.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d64:	4b7a      	ldr	r3, [pc, #488]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b79      	ldr	r3, [pc, #484]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001d6a:	2180      	movs	r1, #128	; 0x80
 8001d6c:	0049      	lsls	r1, r1, #1
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d72:	f7fe feaf 	bl	8000ad4 <HAL_GetTick>
 8001d76:	0003      	movs	r3, r0
 8001d78:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7a:	e008      	b.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d7c:	f7fe feaa 	bl	8000ad4 <HAL_GetTick>
 8001d80:	0002      	movs	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b64      	cmp	r3, #100	; 0x64
 8001d88:	d901      	bls.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e0d9      	b.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8e:	4b70      	ldr	r3, [pc, #448]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4013      	ands	r3, r2
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001d9a:	4b6c      	ldr	r3, [pc, #432]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	23c0      	movs	r3, #192	; 0xc0
 8001da0:	039b      	lsls	r3, r3, #14
 8001da2:	4013      	ands	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	23c0      	movs	r3, #192	; 0xc0
 8001dac:	039b      	lsls	r3, r3, #14
 8001dae:	4013      	ands	r3, r2
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d013      	beq.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	23c0      	movs	r3, #192	; 0xc0
 8001dbc:	029b      	lsls	r3, r3, #10
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	23c0      	movs	r3, #192	; 0xc0
 8001dc2:	029b      	lsls	r3, r3, #10
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d10a      	bne.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001dc8:	4b60      	ldr	r3, [pc, #384]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	029b      	lsls	r3, r3, #10
 8001dd0:	401a      	ands	r2, r3
 8001dd2:	2380      	movs	r3, #128	; 0x80
 8001dd4:	029b      	lsls	r3, r3, #10
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d101      	bne.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e0b1      	b.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001dde:	4b5b      	ldr	r3, [pc, #364]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001de0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001de2:	23c0      	movs	r3, #192	; 0xc0
 8001de4:	029b      	lsls	r3, r3, #10
 8001de6:	4013      	ands	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d03b      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	23c0      	movs	r3, #192	; 0xc0
 8001df6:	029b      	lsls	r3, r3, #10
 8001df8:	4013      	ands	r3, r2
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d033      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2220      	movs	r2, #32
 8001e06:	4013      	ands	r3, r2
 8001e08:	d02e      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001e0a:	4b50      	ldr	r3, [pc, #320]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e0e:	4a51      	ldr	r2, [pc, #324]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e14:	4b4d      	ldr	r3, [pc, #308]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e18:	4b4c      	ldr	r3, [pc, #304]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e1a:	2180      	movs	r1, #128	; 0x80
 8001e1c:	0309      	lsls	r1, r1, #12
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e22:	4b4a      	ldr	r3, [pc, #296]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e26:	4b49      	ldr	r3, [pc, #292]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e28:	494b      	ldr	r1, [pc, #300]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001e2a:	400a      	ands	r2, r1
 8001e2c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001e2e:	4b47      	ldr	r3, [pc, #284]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	2380      	movs	r3, #128	; 0x80
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d014      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3e:	f7fe fe49 	bl	8000ad4 <HAL_GetTick>
 8001e42:	0003      	movs	r3, r0
 8001e44:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e46:	e009      	b.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e48:	f7fe fe44 	bl	8000ad4 <HAL_GetTick>
 8001e4c:	0002      	movs	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	4a42      	ldr	r2, [pc, #264]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e072      	b.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e5c:	4b3b      	ldr	r3, [pc, #236]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4013      	ands	r3, r2
 8001e66:	d0ef      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d01f      	beq.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	23c0      	movs	r3, #192	; 0xc0
 8001e78:	029b      	lsls	r3, r3, #10
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	23c0      	movs	r3, #192	; 0xc0
 8001e7e:	029b      	lsls	r3, r3, #10
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d10c      	bne.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8001e84:	4b31      	ldr	r3, [pc, #196]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a35      	ldr	r2, [pc, #212]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	23c0      	movs	r3, #192	; 0xc0
 8001e94:	039b      	lsls	r3, r3, #14
 8001e96:	401a      	ands	r2, r3
 8001e98:	4b2c      	ldr	r3, [pc, #176]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	4b2b      	ldr	r3, [pc, #172]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ea0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	23c0      	movs	r3, #192	; 0xc0
 8001ea8:	029b      	lsls	r3, r3, #10
 8001eaa:	401a      	ands	r2, r3
 8001eac:	4b27      	ldr	r3, [pc, #156]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001eb2:	2317      	movs	r3, #23
 8001eb4:	18fb      	adds	r3, r7, r3
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d105      	bne.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ebc:	4b23      	ldr	r3, [pc, #140]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ec0:	4b22      	ldr	r3, [pc, #136]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ec2:	4928      	ldr	r1, [pc, #160]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ec4:	400a      	ands	r2, r1
 8001ec6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2202      	movs	r2, #2
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d009      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ed2:	4b1e      	ldr	r3, [pc, #120]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	4393      	bics	r3, r2
 8001eda:	0019      	movs	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2204      	movs	r2, #4
 8001eec:	4013      	ands	r3, r2
 8001eee:	d009      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ef0:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef4:	4a1c      	ldr	r2, [pc, #112]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	0019      	movs	r1, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f00:	430a      	orrs	r2, r1
 8001f02:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2208      	movs	r2, #8
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d009      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f12:	4a16      	ldr	r2, [pc, #88]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	0019      	movs	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2280      	movs	r2, #128	; 0x80
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d009      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001f2c:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f30:	4a0f      	ldr	r2, [pc, #60]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	0019      	movs	r1, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695a      	ldr	r2, [r3, #20]
 8001f3a:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	0018      	movs	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	b006      	add	sp, #24
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40007000 	.word	0x40007000
 8001f54:	fffcffff 	.word	0xfffcffff
 8001f58:	fff7ffff 	.word	0xfff7ffff
 8001f5c:	00001388 	.word	0x00001388
 8001f60:	ffcfffff 	.word	0xffcfffff
 8001f64:	efffffff 	.word	0xefffffff
 8001f68:	fffff3ff 	.word	0xfffff3ff
 8001f6c:	ffffcfff 	.word	0xffffcfff
 8001f70:	fff3ffff 	.word	0xfff3ffff

08001f74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e032      	b.n	8001fec <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2239      	movs	r2, #57	; 0x39
 8001f8a:	5c9b      	ldrb	r3, [r3, r2]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d107      	bne.n	8001fa2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2238      	movs	r2, #56	; 0x38
 8001f96:	2100      	movs	r1, #0
 8001f98:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f7fe fc47 	bl	8000830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2239      	movs	r2, #57	; 0x39
 8001fa6:	2102      	movs	r1, #2
 8001fa8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	0010      	movs	r0, r2
 8001fb6:	f000 fa45 	bl	8002444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	223e      	movs	r2, #62	; 0x3e
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	223a      	movs	r2, #58	; 0x3a
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	5499      	strb	r1, [r3, r2]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	223b      	movs	r2, #59	; 0x3b
 8001fce:	2101      	movs	r1, #1
 8001fd0:	5499      	strb	r1, [r3, r2]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	223c      	movs	r2, #60	; 0x3c
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	5499      	strb	r1, [r3, r2]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	223d      	movs	r2, #61	; 0x3d
 8001fde:	2101      	movs	r1, #1
 8001fe0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2239      	movs	r2, #57	; 0x39
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	0018      	movs	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b002      	add	sp, #8
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2239      	movs	r2, #57	; 0x39
 8002000:	5c9b      	ldrb	r3, [r3, r2]
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b01      	cmp	r3, #1
 8002006:	d001      	beq.n	800200c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e036      	b.n	800207a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2239      	movs	r2, #57	; 0x39
 8002010:	2102      	movs	r1, #2
 8002012:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2101      	movs	r1, #1
 8002020:	430a      	orrs	r2, r1
 8002022:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	05db      	lsls	r3, r3, #23
 800202c:	429a      	cmp	r2, r3
 800202e:	d009      	beq.n	8002044 <HAL_TIM_Base_Start_IT+0x50>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a13      	ldr	r2, [pc, #76]	; (8002084 <HAL_TIM_Base_Start_IT+0x90>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d004      	beq.n	8002044 <HAL_TIM_Base_Start_IT+0x50>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a12      	ldr	r2, [pc, #72]	; (8002088 <HAL_TIM_Base_Start_IT+0x94>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d111      	bne.n	8002068 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2207      	movs	r2, #7
 800204c:	4013      	ands	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b06      	cmp	r3, #6
 8002054:	d010      	beq.n	8002078 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2101      	movs	r1, #1
 8002062:	430a      	orrs	r2, r1
 8002064:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002066:	e007      	b.n	8002078 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2101      	movs	r1, #1
 8002074:	430a      	orrs	r2, r1
 8002076:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	0018      	movs	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	b004      	add	sp, #16
 8002080:	bd80      	pop	{r7, pc}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	40010800 	.word	0x40010800
 8002088:	40011400 	.word	0x40011400

0800208c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	2202      	movs	r2, #2
 800209c:	4013      	ands	r3, r2
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d124      	bne.n	80020ec <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	2202      	movs	r2, #2
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d11d      	bne.n	80020ec <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2203      	movs	r2, #3
 80020b6:	4252      	negs	r2, r2
 80020b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	2203      	movs	r2, #3
 80020c8:	4013      	ands	r3, r2
 80020ca:	d004      	beq.n	80020d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	0018      	movs	r0, r3
 80020d0:	f000 f9a0 	bl	8002414 <HAL_TIM_IC_CaptureCallback>
 80020d4:	e007      	b.n	80020e6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	0018      	movs	r0, r3
 80020da:	f000 f993 	bl	8002404 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	0018      	movs	r0, r3
 80020e2:	f000 f99f 	bl	8002424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	2204      	movs	r2, #4
 80020f4:	4013      	ands	r3, r2
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d125      	bne.n	8002146 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	2204      	movs	r2, #4
 8002102:	4013      	ands	r3, r2
 8002104:	2b04      	cmp	r3, #4
 8002106:	d11e      	bne.n	8002146 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2205      	movs	r2, #5
 800210e:	4252      	negs	r2, r2
 8002110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2202      	movs	r2, #2
 8002116:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	699a      	ldr	r2, [r3, #24]
 800211e:	23c0      	movs	r3, #192	; 0xc0
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4013      	ands	r3, r2
 8002124:	d004      	beq.n	8002130 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	0018      	movs	r0, r3
 800212a:	f000 f973 	bl	8002414 <HAL_TIM_IC_CaptureCallback>
 800212e:	e007      	b.n	8002140 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	0018      	movs	r0, r3
 8002134:	f000 f966 	bl	8002404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	0018      	movs	r0, r3
 800213c:	f000 f972 	bl	8002424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2208      	movs	r2, #8
 800214e:	4013      	ands	r3, r2
 8002150:	2b08      	cmp	r3, #8
 8002152:	d124      	bne.n	800219e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2208      	movs	r2, #8
 800215c:	4013      	ands	r3, r2
 800215e:	2b08      	cmp	r3, #8
 8002160:	d11d      	bne.n	800219e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2209      	movs	r2, #9
 8002168:	4252      	negs	r2, r2
 800216a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2204      	movs	r2, #4
 8002170:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	2203      	movs	r2, #3
 800217a:	4013      	ands	r3, r2
 800217c:	d004      	beq.n	8002188 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	0018      	movs	r0, r3
 8002182:	f000 f947 	bl	8002414 <HAL_TIM_IC_CaptureCallback>
 8002186:	e007      	b.n	8002198 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	0018      	movs	r0, r3
 800218c:	f000 f93a 	bl	8002404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	0018      	movs	r0, r3
 8002194:	f000 f946 	bl	8002424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	2210      	movs	r2, #16
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b10      	cmp	r3, #16
 80021aa:	d125      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	2210      	movs	r2, #16
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b10      	cmp	r3, #16
 80021b8:	d11e      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2211      	movs	r2, #17
 80021c0:	4252      	negs	r2, r2
 80021c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2208      	movs	r2, #8
 80021c8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	69da      	ldr	r2, [r3, #28]
 80021d0:	23c0      	movs	r3, #192	; 0xc0
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4013      	ands	r3, r2
 80021d6:	d004      	beq.n	80021e2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	0018      	movs	r0, r3
 80021dc:	f000 f91a 	bl	8002414 <HAL_TIM_IC_CaptureCallback>
 80021e0:	e007      	b.n	80021f2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	0018      	movs	r0, r3
 80021e6:	f000 f90d 	bl	8002404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	0018      	movs	r0, r3
 80021ee:	f000 f919 	bl	8002424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	2201      	movs	r2, #1
 8002200:	4013      	ands	r3, r2
 8002202:	2b01      	cmp	r3, #1
 8002204:	d10f      	bne.n	8002226 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	4013      	ands	r3, r2
 8002210:	2b01      	cmp	r3, #1
 8002212:	d108      	bne.n	8002226 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2202      	movs	r2, #2
 800221a:	4252      	negs	r2, r2
 800221c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	0018      	movs	r0, r3
 8002222:	f7fe fac5 	bl	80007b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	2240      	movs	r2, #64	; 0x40
 800222e:	4013      	ands	r3, r2
 8002230:	2b40      	cmp	r3, #64	; 0x40
 8002232:	d10f      	bne.n	8002254 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	2240      	movs	r2, #64	; 0x40
 800223c:	4013      	ands	r3, r2
 800223e:	2b40      	cmp	r3, #64	; 0x40
 8002240:	d108      	bne.n	8002254 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2241      	movs	r2, #65	; 0x41
 8002248:	4252      	negs	r2, r2
 800224a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	0018      	movs	r0, r3
 8002250:	f000 f8f0 	bl	8002434 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002254:	46c0      	nop			; (mov r8, r8)
 8002256:	46bd      	mov	sp, r7
 8002258:	b002      	add	sp, #8
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002266:	230f      	movs	r3, #15
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2238      	movs	r2, #56	; 0x38
 8002272:	5c9b      	ldrb	r3, [r3, r2]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_TIM_ConfigClockSource+0x20>
 8002278:	2302      	movs	r3, #2
 800227a:	e0bc      	b.n	80023f6 <HAL_TIM_ConfigClockSource+0x19a>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2238      	movs	r2, #56	; 0x38
 8002280:	2101      	movs	r1, #1
 8002282:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2239      	movs	r2, #57	; 0x39
 8002288:	2102      	movs	r1, #2
 800228a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2277      	movs	r2, #119	; 0x77
 8002298:	4393      	bics	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	4a58      	ldr	r2, [pc, #352]	; (8002400 <HAL_TIM_ConfigClockSource+0x1a4>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2280      	movs	r2, #128	; 0x80
 80022b2:	0192      	lsls	r2, r2, #6
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d040      	beq.n	800233a <HAL_TIM_ConfigClockSource+0xde>
 80022b8:	2280      	movs	r2, #128	; 0x80
 80022ba:	0192      	lsls	r2, r2, #6
 80022bc:	4293      	cmp	r3, r2
 80022be:	d900      	bls.n	80022c2 <HAL_TIM_ConfigClockSource+0x66>
 80022c0:	e088      	b.n	80023d4 <HAL_TIM_ConfigClockSource+0x178>
 80022c2:	2280      	movs	r2, #128	; 0x80
 80022c4:	0152      	lsls	r2, r2, #5
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d100      	bne.n	80022cc <HAL_TIM_ConfigClockSource+0x70>
 80022ca:	e088      	b.n	80023de <HAL_TIM_ConfigClockSource+0x182>
 80022cc:	2280      	movs	r2, #128	; 0x80
 80022ce:	0152      	lsls	r2, r2, #5
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d900      	bls.n	80022d6 <HAL_TIM_ConfigClockSource+0x7a>
 80022d4:	e07e      	b.n	80023d4 <HAL_TIM_ConfigClockSource+0x178>
 80022d6:	2b70      	cmp	r3, #112	; 0x70
 80022d8:	d018      	beq.n	800230c <HAL_TIM_ConfigClockSource+0xb0>
 80022da:	d900      	bls.n	80022de <HAL_TIM_ConfigClockSource+0x82>
 80022dc:	e07a      	b.n	80023d4 <HAL_TIM_ConfigClockSource+0x178>
 80022de:	2b60      	cmp	r3, #96	; 0x60
 80022e0:	d04f      	beq.n	8002382 <HAL_TIM_ConfigClockSource+0x126>
 80022e2:	d900      	bls.n	80022e6 <HAL_TIM_ConfigClockSource+0x8a>
 80022e4:	e076      	b.n	80023d4 <HAL_TIM_ConfigClockSource+0x178>
 80022e6:	2b50      	cmp	r3, #80	; 0x50
 80022e8:	d03b      	beq.n	8002362 <HAL_TIM_ConfigClockSource+0x106>
 80022ea:	d900      	bls.n	80022ee <HAL_TIM_ConfigClockSource+0x92>
 80022ec:	e072      	b.n	80023d4 <HAL_TIM_ConfigClockSource+0x178>
 80022ee:	2b40      	cmp	r3, #64	; 0x40
 80022f0:	d057      	beq.n	80023a2 <HAL_TIM_ConfigClockSource+0x146>
 80022f2:	d900      	bls.n	80022f6 <HAL_TIM_ConfigClockSource+0x9a>
 80022f4:	e06e      	b.n	80023d4 <HAL_TIM_ConfigClockSource+0x178>
 80022f6:	2b30      	cmp	r3, #48	; 0x30
 80022f8:	d063      	beq.n	80023c2 <HAL_TIM_ConfigClockSource+0x166>
 80022fa:	d86b      	bhi.n	80023d4 <HAL_TIM_ConfigClockSource+0x178>
 80022fc:	2b20      	cmp	r3, #32
 80022fe:	d060      	beq.n	80023c2 <HAL_TIM_ConfigClockSource+0x166>
 8002300:	d868      	bhi.n	80023d4 <HAL_TIM_ConfigClockSource+0x178>
 8002302:	2b00      	cmp	r3, #0
 8002304:	d05d      	beq.n	80023c2 <HAL_TIM_ConfigClockSource+0x166>
 8002306:	2b10      	cmp	r3, #16
 8002308:	d05b      	beq.n	80023c2 <HAL_TIM_ConfigClockSource+0x166>
 800230a:	e063      	b.n	80023d4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6818      	ldr	r0, [r3, #0]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	6899      	ldr	r1, [r3, #8]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f000 f960 	bl	80025e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2277      	movs	r2, #119	; 0x77
 800232c:	4313      	orrs	r3, r2
 800232e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	609a      	str	r2, [r3, #8]
      break;
 8002338:	e052      	b.n	80023e0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	6899      	ldr	r1, [r3, #8]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	f000 f949 	bl	80025e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2180      	movs	r1, #128	; 0x80
 800235a:	01c9      	lsls	r1, r1, #7
 800235c:	430a      	orrs	r2, r1
 800235e:	609a      	str	r2, [r3, #8]
      break;
 8002360:	e03e      	b.n	80023e0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6818      	ldr	r0, [r3, #0]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	6859      	ldr	r1, [r3, #4]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	001a      	movs	r2, r3
 8002370:	f000 f8bc 	bl	80024ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2150      	movs	r1, #80	; 0x50
 800237a:	0018      	movs	r0, r3
 800237c:	f000 f916 	bl	80025ac <TIM_ITRx_SetConfig>
      break;
 8002380:	e02e      	b.n	80023e0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	6859      	ldr	r1, [r3, #4]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	001a      	movs	r2, r3
 8002390:	f000 f8da 	bl	8002548 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2160      	movs	r1, #96	; 0x60
 800239a:	0018      	movs	r0, r3
 800239c:	f000 f906 	bl	80025ac <TIM_ITRx_SetConfig>
      break;
 80023a0:	e01e      	b.n	80023e0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6818      	ldr	r0, [r3, #0]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	6859      	ldr	r1, [r3, #4]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	001a      	movs	r2, r3
 80023b0:	f000 f89c 	bl	80024ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2140      	movs	r1, #64	; 0x40
 80023ba:	0018      	movs	r0, r3
 80023bc:	f000 f8f6 	bl	80025ac <TIM_ITRx_SetConfig>
      break;
 80023c0:	e00e      	b.n	80023e0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	0019      	movs	r1, r3
 80023cc:	0010      	movs	r0, r2
 80023ce:	f000 f8ed 	bl	80025ac <TIM_ITRx_SetConfig>
      break;
 80023d2:	e005      	b.n	80023e0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80023d4:	230f      	movs	r3, #15
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	2201      	movs	r2, #1
 80023da:	701a      	strb	r2, [r3, #0]
      break;
 80023dc:	e000      	b.n	80023e0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80023de:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2239      	movs	r2, #57	; 0x39
 80023e4:	2101      	movs	r1, #1
 80023e6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2238      	movs	r2, #56	; 0x38
 80023ec:	2100      	movs	r1, #0
 80023ee:	5499      	strb	r1, [r3, r2]

  return status;
 80023f0:	230f      	movs	r3, #15
 80023f2:	18fb      	adds	r3, r7, r3
 80023f4:	781b      	ldrb	r3, [r3, #0]
}
 80023f6:	0018      	movs	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b004      	add	sp, #16
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	ffff00ff 	.word	0xffff00ff

08002404 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800240c:	46c0      	nop			; (mov r8, r8)
 800240e:	46bd      	mov	sp, r7
 8002410:	b002      	add	sp, #8
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800241c:	46c0      	nop			; (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	b002      	add	sp, #8
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800242c:	46c0      	nop			; (mov r8, r8)
 800242e:	46bd      	mov	sp, r7
 8002430:	b002      	add	sp, #8
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800243c:	46c0      	nop			; (mov r8, r8)
 800243e:	46bd      	mov	sp, r7
 8002440:	b002      	add	sp, #8
 8002442:	bd80      	pop	{r7, pc}

08002444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	05db      	lsls	r3, r3, #23
 800245a:	429a      	cmp	r2, r3
 800245c:	d007      	beq.n	800246e <TIM_Base_SetConfig+0x2a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a1f      	ldr	r2, [pc, #124]	; (80024e0 <TIM_Base_SetConfig+0x9c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d003      	beq.n	800246e <TIM_Base_SetConfig+0x2a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a1e      	ldr	r2, [pc, #120]	; (80024e4 <TIM_Base_SetConfig+0xa0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d108      	bne.n	8002480 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2270      	movs	r2, #112	; 0x70
 8002472:	4393      	bics	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4313      	orrs	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	05db      	lsls	r3, r3, #23
 8002486:	429a      	cmp	r2, r3
 8002488:	d007      	beq.n	800249a <TIM_Base_SetConfig+0x56>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a14      	ldr	r2, [pc, #80]	; (80024e0 <TIM_Base_SetConfig+0x9c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d003      	beq.n	800249a <TIM_Base_SetConfig+0x56>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a13      	ldr	r2, [pc, #76]	; (80024e4 <TIM_Base_SetConfig+0xa0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d108      	bne.n	80024ac <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4a12      	ldr	r2, [pc, #72]	; (80024e8 <TIM_Base_SetConfig+0xa4>)
 800249e:	4013      	ands	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2280      	movs	r2, #128	; 0x80
 80024b0:	4393      	bics	r3, r2
 80024b2:	001a      	movs	r2, r3
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	615a      	str	r2, [r3, #20]
}
 80024d8:	46c0      	nop			; (mov r8, r8)
 80024da:	46bd      	mov	sp, r7
 80024dc:	b004      	add	sp, #16
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40010800 	.word	0x40010800
 80024e4:	40011400 	.word	0x40011400
 80024e8:	fffffcff 	.word	0xfffffcff

080024ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	2201      	movs	r2, #1
 8002504:	4393      	bics	r3, r2
 8002506:	001a      	movs	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	22f0      	movs	r2, #240	; 0xf0
 8002516:	4393      	bics	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	220a      	movs	r2, #10
 8002528:	4393      	bics	r3, r2
 800252a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	4313      	orrs	r3, r2
 8002532:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	621a      	str	r2, [r3, #32]
}
 8002540:	46c0      	nop			; (mov r8, r8)
 8002542:	46bd      	mov	sp, r7
 8002544:	b006      	add	sp, #24
 8002546:	bd80      	pop	{r7, pc}

08002548 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	2210      	movs	r2, #16
 800255a:	4393      	bics	r3, r2
 800255c:	001a      	movs	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	4a0d      	ldr	r2, [pc, #52]	; (80025a8 <TIM_TI2_ConfigInputStage+0x60>)
 8002572:	4013      	ands	r3, r2
 8002574:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	031b      	lsls	r3, r3, #12
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	4313      	orrs	r3, r2
 800257e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	22a0      	movs	r2, #160	; 0xa0
 8002584:	4393      	bics	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	621a      	str	r2, [r3, #32]
}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b006      	add	sp, #24
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	ffff0fff 	.word	0xffff0fff

080025ac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2270      	movs	r2, #112	; 0x70
 80025c0:	4393      	bics	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	2207      	movs	r2, #7
 80025cc:	4313      	orrs	r3, r2
 80025ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	609a      	str	r2, [r3, #8]
}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	46bd      	mov	sp, r7
 80025da:	b004      	add	sp, #16
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	4a09      	ldr	r2, [pc, #36]	; (800261c <TIM_ETR_SetConfig+0x3c>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	021a      	lsls	r2, r3, #8
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	431a      	orrs	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4313      	orrs	r3, r2
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	4313      	orrs	r3, r2
 800260c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	609a      	str	r2, [r3, #8]
}
 8002614:	46c0      	nop			; (mov r8, r8)
 8002616:	46bd      	mov	sp, r7
 8002618:	b006      	add	sp, #24
 800261a:	bd80      	pop	{r7, pc}
 800261c:	ffff00ff 	.word	0xffff00ff

08002620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2238      	movs	r2, #56	; 0x38
 800262e:	5c9b      	ldrb	r3, [r3, r2]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002634:	2302      	movs	r3, #2
 8002636:	e042      	b.n	80026be <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2238      	movs	r2, #56	; 0x38
 800263c:	2101      	movs	r1, #1
 800263e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2239      	movs	r2, #57	; 0x39
 8002644:	2102      	movs	r1, #2
 8002646:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2270      	movs	r2, #112	; 0x70
 800265c:	4393      	bics	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	2380      	movs	r3, #128	; 0x80
 8002678:	05db      	lsls	r3, r3, #23
 800267a:	429a      	cmp	r2, r3
 800267c:	d009      	beq.n	8002692 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a11      	ldr	r2, [pc, #68]	; (80026c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d004      	beq.n	8002692 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0f      	ldr	r2, [pc, #60]	; (80026cc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d10c      	bne.n	80026ac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2280      	movs	r2, #128	; 0x80
 8002696:	4393      	bics	r3, r2
 8002698:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2239      	movs	r2, #57	; 0x39
 80026b0:	2101      	movs	r1, #1
 80026b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2238      	movs	r2, #56	; 0x38
 80026b8:	2100      	movs	r1, #0
 80026ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	0018      	movs	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	b004      	add	sp, #16
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	40010800 	.word	0x40010800
 80026cc:	40011400 	.word	0x40011400

080026d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e044      	b.n	800276c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d107      	bne.n	80026fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2278      	movs	r2, #120	; 0x78
 80026ee:	2100      	movs	r1, #0
 80026f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	0018      	movs	r0, r3
 80026f6:	f7fe f8b9 	bl	800086c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2224      	movs	r2, #36	; 0x24
 80026fe:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2101      	movs	r1, #1
 800270c:	438a      	bics	r2, r1
 800270e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	0018      	movs	r0, r3
 8002714:	f000 fb9e 	bl	8002e54 <UART_SetConfig>
 8002718:	0003      	movs	r3, r0
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e024      	b.n	800276c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	0018      	movs	r0, r3
 800272e:	f000 fddb 	bl	80032e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	490d      	ldr	r1, [pc, #52]	; (8002774 <HAL_UART_Init+0xa4>)
 800273e:	400a      	ands	r2, r1
 8002740:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	212a      	movs	r1, #42	; 0x2a
 800274e:	438a      	bics	r2, r1
 8002750:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2101      	movs	r1, #1
 800275e:	430a      	orrs	r2, r1
 8002760:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	0018      	movs	r0, r3
 8002766:	f000 fe73 	bl	8003450 <UART_CheckIdleState>
 800276a:	0003      	movs	r3, r0
}
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	b002      	add	sp, #8
 8002772:	bd80      	pop	{r7, pc}
 8002774:	ffffb7ff 	.word	0xffffb7ff

08002778 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	1dbb      	adds	r3, r7, #6
 8002784:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800278a:	2b20      	cmp	r3, #32
 800278c:	d15b      	bne.n	8002846 <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_UART_Transmit_IT+0x24>
 8002794:	1dbb      	adds	r3, r7, #6
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e053      	b.n	8002848 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	2380      	movs	r3, #128	; 0x80
 80027a6:	015b      	lsls	r3, r3, #5
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d109      	bne.n	80027c0 <HAL_UART_Transmit_IT+0x48>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d105      	bne.n	80027c0 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2201      	movs	r2, #1
 80027b8:	4013      	ands	r3, r2
 80027ba:	d001      	beq.n	80027c0 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e043      	b.n	8002848 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1dba      	adds	r2, r7, #6
 80027ca:	2150      	movs	r1, #80	; 0x50
 80027cc:	8812      	ldrh	r2, [r2, #0]
 80027ce:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	1dba      	adds	r2, r7, #6
 80027d4:	2152      	movs	r1, #82	; 0x52
 80027d6:	8812      	ldrh	r2, [r2, #0]
 80027d8:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2284      	movs	r2, #132	; 0x84
 80027e4:	2100      	movs	r1, #0
 80027e6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2221      	movs	r2, #33	; 0x21
 80027ec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	015b      	lsls	r3, r3, #5
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d107      	bne.n	800280a <HAL_UART_Transmit_IT+0x92>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d103      	bne.n	800280a <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4a12      	ldr	r2, [pc, #72]	; (8002850 <HAL_UART_Transmit_IT+0xd8>)
 8002806:	66da      	str	r2, [r3, #108]	; 0x6c
 8002808:	e002      	b.n	8002810 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4a11      	ldr	r2, [pc, #68]	; (8002854 <HAL_UART_Transmit_IT+0xdc>)
 800280e:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002810:	f3ef 8310 	mrs	r3, PRIMASK
 8002814:	613b      	str	r3, [r7, #16]
  return(result);
 8002816:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	2301      	movs	r3, #1
 800281c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f383 8810 	msr	PRIMASK, r3
}
 8002824:	46c0      	nop			; (mov r8, r8)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2180      	movs	r1, #128	; 0x80
 8002832:	430a      	orrs	r2, r1
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	f383 8810 	msr	PRIMASK, r3
}
 8002840:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	e000      	b.n	8002848 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8002846:	2302      	movs	r3, #2
  }
}
 8002848:	0018      	movs	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	b008      	add	sp, #32
 800284e:	bd80      	pop	{r7, pc}
 8002850:	0800381d 	.word	0x0800381d
 8002854:	0800376b 	.word	0x0800376b

08002858 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002858:	b590      	push	{r4, r7, lr}
 800285a:	b0ab      	sub	sp, #172	; 0xac
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	22a4      	movs	r2, #164	; 0xa4
 8002868:	18b9      	adds	r1, r7, r2
 800286a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	20a0      	movs	r0, #160	; 0xa0
 8002874:	1839      	adds	r1, r7, r0
 8002876:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	219c      	movs	r1, #156	; 0x9c
 8002880:	1879      	adds	r1, r7, r1
 8002882:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002884:	0011      	movs	r1, r2
 8002886:	18bb      	adds	r3, r7, r2
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a99      	ldr	r2, [pc, #612]	; (8002af0 <HAL_UART_IRQHandler+0x298>)
 800288c:	4013      	ands	r3, r2
 800288e:	2298      	movs	r2, #152	; 0x98
 8002890:	18bc      	adds	r4, r7, r2
 8002892:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002894:	18bb      	adds	r3, r7, r2
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d114      	bne.n	80028c6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800289c:	187b      	adds	r3, r7, r1
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2220      	movs	r2, #32
 80028a2:	4013      	ands	r3, r2
 80028a4:	d00f      	beq.n	80028c6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80028a6:	183b      	adds	r3, r7, r0
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2220      	movs	r2, #32
 80028ac:	4013      	ands	r3, r2
 80028ae:	d00a      	beq.n	80028c6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d100      	bne.n	80028ba <HAL_UART_IRQHandler+0x62>
 80028b8:	e2a0      	b.n	8002dfc <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	0010      	movs	r0, r2
 80028c2:	4798      	blx	r3
      }
      return;
 80028c4:	e29a      	b.n	8002dfc <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80028c6:	2398      	movs	r3, #152	; 0x98
 80028c8:	18fb      	adds	r3, r7, r3
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d100      	bne.n	80028d2 <HAL_UART_IRQHandler+0x7a>
 80028d0:	e114      	b.n	8002afc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80028d2:	239c      	movs	r3, #156	; 0x9c
 80028d4:	18fb      	adds	r3, r7, r3
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2201      	movs	r2, #1
 80028da:	4013      	ands	r3, r2
 80028dc:	d106      	bne.n	80028ec <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80028de:	23a0      	movs	r3, #160	; 0xa0
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a83      	ldr	r2, [pc, #524]	; (8002af4 <HAL_UART_IRQHandler+0x29c>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	d100      	bne.n	80028ec <HAL_UART_IRQHandler+0x94>
 80028ea:	e107      	b.n	8002afc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80028ec:	23a4      	movs	r3, #164	; 0xa4
 80028ee:	18fb      	adds	r3, r7, r3
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2201      	movs	r2, #1
 80028f4:	4013      	ands	r3, r2
 80028f6:	d012      	beq.n	800291e <HAL_UART_IRQHandler+0xc6>
 80028f8:	23a0      	movs	r3, #160	; 0xa0
 80028fa:	18fb      	adds	r3, r7, r3
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	2380      	movs	r3, #128	; 0x80
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	4013      	ands	r3, r2
 8002904:	d00b      	beq.n	800291e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2201      	movs	r2, #1
 800290c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2284      	movs	r2, #132	; 0x84
 8002912:	589b      	ldr	r3, [r3, r2]
 8002914:	2201      	movs	r2, #1
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2184      	movs	r1, #132	; 0x84
 800291c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800291e:	23a4      	movs	r3, #164	; 0xa4
 8002920:	18fb      	adds	r3, r7, r3
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2202      	movs	r2, #2
 8002926:	4013      	ands	r3, r2
 8002928:	d011      	beq.n	800294e <HAL_UART_IRQHandler+0xf6>
 800292a:	239c      	movs	r3, #156	; 0x9c
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2201      	movs	r2, #1
 8002932:	4013      	ands	r3, r2
 8002934:	d00b      	beq.n	800294e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2202      	movs	r2, #2
 800293c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2284      	movs	r2, #132	; 0x84
 8002942:	589b      	ldr	r3, [r3, r2]
 8002944:	2204      	movs	r2, #4
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2184      	movs	r1, #132	; 0x84
 800294c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800294e:	23a4      	movs	r3, #164	; 0xa4
 8002950:	18fb      	adds	r3, r7, r3
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2204      	movs	r2, #4
 8002956:	4013      	ands	r3, r2
 8002958:	d011      	beq.n	800297e <HAL_UART_IRQHandler+0x126>
 800295a:	239c      	movs	r3, #156	; 0x9c
 800295c:	18fb      	adds	r3, r7, r3
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2201      	movs	r2, #1
 8002962:	4013      	ands	r3, r2
 8002964:	d00b      	beq.n	800297e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2204      	movs	r2, #4
 800296c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2284      	movs	r2, #132	; 0x84
 8002972:	589b      	ldr	r3, [r3, r2]
 8002974:	2202      	movs	r2, #2
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2184      	movs	r1, #132	; 0x84
 800297c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800297e:	23a4      	movs	r3, #164	; 0xa4
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2208      	movs	r2, #8
 8002986:	4013      	ands	r3, r2
 8002988:	d017      	beq.n	80029ba <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800298a:	23a0      	movs	r3, #160	; 0xa0
 800298c:	18fb      	adds	r3, r7, r3
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2220      	movs	r2, #32
 8002992:	4013      	ands	r3, r2
 8002994:	d105      	bne.n	80029a2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002996:	239c      	movs	r3, #156	; 0x9c
 8002998:	18fb      	adds	r3, r7, r3
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2201      	movs	r2, #1
 800299e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80029a0:	d00b      	beq.n	80029ba <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2208      	movs	r2, #8
 80029a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2284      	movs	r2, #132	; 0x84
 80029ae:	589b      	ldr	r3, [r3, r2]
 80029b0:	2208      	movs	r2, #8
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2184      	movs	r1, #132	; 0x84
 80029b8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80029ba:	23a4      	movs	r3, #164	; 0xa4
 80029bc:	18fb      	adds	r3, r7, r3
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	2380      	movs	r3, #128	; 0x80
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	4013      	ands	r3, r2
 80029c6:	d013      	beq.n	80029f0 <HAL_UART_IRQHandler+0x198>
 80029c8:	23a0      	movs	r3, #160	; 0xa0
 80029ca:	18fb      	adds	r3, r7, r3
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	2380      	movs	r3, #128	; 0x80
 80029d0:	04db      	lsls	r3, r3, #19
 80029d2:	4013      	ands	r3, r2
 80029d4:	d00c      	beq.n	80029f0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	0112      	lsls	r2, r2, #4
 80029de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2284      	movs	r2, #132	; 0x84
 80029e4:	589b      	ldr	r3, [r3, r2]
 80029e6:	2220      	movs	r2, #32
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2184      	movs	r1, #132	; 0x84
 80029ee:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2284      	movs	r2, #132	; 0x84
 80029f4:	589b      	ldr	r3, [r3, r2]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d100      	bne.n	80029fc <HAL_UART_IRQHandler+0x1a4>
 80029fa:	e201      	b.n	8002e00 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80029fc:	23a4      	movs	r3, #164	; 0xa4
 80029fe:	18fb      	adds	r3, r7, r3
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2220      	movs	r2, #32
 8002a04:	4013      	ands	r3, r2
 8002a06:	d00e      	beq.n	8002a26 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a08:	23a0      	movs	r3, #160	; 0xa0
 8002a0a:	18fb      	adds	r3, r7, r3
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	4013      	ands	r3, r2
 8002a12:	d008      	beq.n	8002a26 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d004      	beq.n	8002a26 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	0010      	movs	r0, r2
 8002a24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2284      	movs	r2, #132	; 0x84
 8002a2a:	589b      	ldr	r3, [r3, r2]
 8002a2c:	2194      	movs	r1, #148	; 0x94
 8002a2e:	187a      	adds	r2, r7, r1
 8002a30:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2240      	movs	r2, #64	; 0x40
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b40      	cmp	r3, #64	; 0x40
 8002a3e:	d004      	beq.n	8002a4a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a40:	187b      	adds	r3, r7, r1
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2228      	movs	r2, #40	; 0x28
 8002a46:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a48:	d047      	beq.n	8002ada <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f000 fe11 	bl	8003674 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2240      	movs	r2, #64	; 0x40
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	2b40      	cmp	r3, #64	; 0x40
 8002a5e:	d137      	bne.n	8002ad0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a60:	f3ef 8310 	mrs	r3, PRIMASK
 8002a64:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002a66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a68:	2090      	movs	r0, #144	; 0x90
 8002a6a:	183a      	adds	r2, r7, r0
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	2301      	movs	r3, #1
 8002a70:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a74:	f383 8810 	msr	PRIMASK, r3
}
 8002a78:	46c0      	nop			; (mov r8, r8)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2140      	movs	r1, #64	; 0x40
 8002a86:	438a      	bics	r2, r1
 8002a88:	609a      	str	r2, [r3, #8]
 8002a8a:	183b      	adds	r3, r7, r0
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a92:	f383 8810 	msr	PRIMASK, r3
}
 8002a96:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d012      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa4:	4a14      	ldr	r2, [pc, #80]	; (8002af8 <HAL_UART_IRQHandler+0x2a0>)
 8002aa6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aac:	0018      	movs	r0, r3
 8002aae:	f7fe f95d 	bl	8000d6c <HAL_DMA_Abort_IT>
 8002ab2:	1e03      	subs	r3, r0, #0
 8002ab4:	d01a      	beq.n	8002aec <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac4:	e012      	b.n	8002aec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f000 f9af 	bl	8002e2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ace:	e00d      	b.n	8002aec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f000 f9aa 	bl	8002e2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad8:	e008      	b.n	8002aec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	0018      	movs	r0, r3
 8002ade:	f000 f9a5 	bl	8002e2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2284      	movs	r2, #132	; 0x84
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002aea:	e189      	b.n	8002e00 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aec:	46c0      	nop			; (mov r8, r8)
    return;
 8002aee:	e187      	b.n	8002e00 <HAL_UART_IRQHandler+0x5a8>
 8002af0:	0000080f 	.word	0x0000080f
 8002af4:	04000120 	.word	0x04000120
 8002af8:	0800373d 	.word	0x0800373d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d000      	beq.n	8002b06 <HAL_UART_IRQHandler+0x2ae>
 8002b04:	e13b      	b.n	8002d7e <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b06:	23a4      	movs	r3, #164	; 0xa4
 8002b08:	18fb      	adds	r3, r7, r3
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2210      	movs	r2, #16
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d100      	bne.n	8002b14 <HAL_UART_IRQHandler+0x2bc>
 8002b12:	e134      	b.n	8002d7e <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b14:	23a0      	movs	r3, #160	; 0xa0
 8002b16:	18fb      	adds	r3, r7, r3
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2210      	movs	r2, #16
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d100      	bne.n	8002b22 <HAL_UART_IRQHandler+0x2ca>
 8002b20:	e12d      	b.n	8002d7e <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2210      	movs	r2, #16
 8002b28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2240      	movs	r2, #64	; 0x40
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b40      	cmp	r3, #64	; 0x40
 8002b36:	d000      	beq.n	8002b3a <HAL_UART_IRQHandler+0x2e2>
 8002b38:	e0a1      	b.n	8002c7e <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	217e      	movs	r1, #126	; 0x7e
 8002b44:	187b      	adds	r3, r7, r1
 8002b46:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002b48:	187b      	adds	r3, r7, r1
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d100      	bne.n	8002b52 <HAL_UART_IRQHandler+0x2fa>
 8002b50:	e158      	b.n	8002e04 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2258      	movs	r2, #88	; 0x58
 8002b56:	5a9b      	ldrh	r3, [r3, r2]
 8002b58:	187a      	adds	r2, r7, r1
 8002b5a:	8812      	ldrh	r2, [r2, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d300      	bcc.n	8002b62 <HAL_UART_IRQHandler+0x30a>
 8002b60:	e150      	b.n	8002e04 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	187a      	adds	r2, r7, r1
 8002b66:	215a      	movs	r1, #90	; 0x5a
 8002b68:	8812      	ldrh	r2, [r2, #0]
 8002b6a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2220      	movs	r2, #32
 8002b76:	4013      	ands	r3, r2
 8002b78:	d16f      	bne.n	8002c5a <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b7a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b7e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b82:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b84:	2301      	movs	r3, #1
 8002b86:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b8a:	f383 8810 	msr	PRIMASK, r3
}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	499e      	ldr	r1, [pc, #632]	; (8002e14 <HAL_UART_IRQHandler+0x5bc>)
 8002b9c:	400a      	ands	r2, r1
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ba2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba6:	f383 8810 	msr	PRIMASK, r3
}
 8002baa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bac:	f3ef 8310 	mrs	r3, PRIMASK
 8002bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb4:	677b      	str	r3, [r7, #116]	; 0x74
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bbc:	f383 8810 	msr	PRIMASK, r3
}
 8002bc0:	46c0      	nop			; (mov r8, r8)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2101      	movs	r1, #1
 8002bce:	438a      	bics	r2, r1
 8002bd0:	609a      	str	r2, [r3, #8]
 8002bd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bd4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bd8:	f383 8810 	msr	PRIMASK, r3
}
 8002bdc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bde:	f3ef 8310 	mrs	r3, PRIMASK
 8002be2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002be6:	673b      	str	r3, [r7, #112]	; 0x70
 8002be8:	2301      	movs	r3, #1
 8002bea:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bee:	f383 8810 	msr	PRIMASK, r3
}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2140      	movs	r1, #64	; 0x40
 8002c00:	438a      	bics	r2, r1
 8002c02:	609a      	str	r2, [r3, #8]
 8002c04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c06:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c0a:	f383 8810 	msr	PRIMASK, r3
}
 8002c0e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2280      	movs	r2, #128	; 0x80
 8002c14:	2120      	movs	r1, #32
 8002c16:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c1e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c22:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c28:	2301      	movs	r3, #1
 8002c2a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c2e:	f383 8810 	msr	PRIMASK, r3
}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2110      	movs	r1, #16
 8002c40:	438a      	bics	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c46:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c4a:	f383 8810 	msr	PRIMASK, r3
}
 8002c4e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c54:	0018      	movs	r0, r3
 8002c56:	f7fe f849 	bl	8000cec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2258      	movs	r2, #88	; 0x58
 8002c64:	5a9a      	ldrh	r2, [r3, r2]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	215a      	movs	r1, #90	; 0x5a
 8002c6a:	5a5b      	ldrh	r3, [r3, r1]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	0011      	movs	r1, r2
 8002c76:	0018      	movs	r0, r3
 8002c78:	f000 f8e0 	bl	8002e3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c7c:	e0c2      	b.n	8002e04 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2258      	movs	r2, #88	; 0x58
 8002c82:	5a99      	ldrh	r1, [r3, r2]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	225a      	movs	r2, #90	; 0x5a
 8002c88:	5a9b      	ldrh	r3, [r3, r2]
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	208e      	movs	r0, #142	; 0x8e
 8002c8e:	183b      	adds	r3, r7, r0
 8002c90:	1a8a      	subs	r2, r1, r2
 8002c92:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	225a      	movs	r2, #90	; 0x5a
 8002c98:	5a9b      	ldrh	r3, [r3, r2]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d100      	bne.n	8002ca2 <HAL_UART_IRQHandler+0x44a>
 8002ca0:	e0b2      	b.n	8002e08 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8002ca2:	183b      	adds	r3, r7, r0
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d100      	bne.n	8002cac <HAL_UART_IRQHandler+0x454>
 8002caa:	e0ad      	b.n	8002e08 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cac:	f3ef 8310 	mrs	r3, PRIMASK
 8002cb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cb4:	2488      	movs	r4, #136	; 0x88
 8002cb6:	193a      	adds	r2, r7, r4
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	2301      	movs	r3, #1
 8002cbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	f383 8810 	msr	PRIMASK, r3
}
 8002cc4:	46c0      	nop			; (mov r8, r8)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4951      	ldr	r1, [pc, #324]	; (8002e18 <HAL_UART_IRQHandler+0x5c0>)
 8002cd2:	400a      	ands	r2, r1
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	193b      	adds	r3, r7, r4
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f383 8810 	msr	PRIMASK, r3
}
 8002ce2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ce4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ce8:	61bb      	str	r3, [r7, #24]
  return(result);
 8002cea:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cec:	2484      	movs	r4, #132	; 0x84
 8002cee:	193a      	adds	r2, r7, r4
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	f383 8810 	msr	PRIMASK, r3
}
 8002cfc:	46c0      	nop			; (mov r8, r8)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2101      	movs	r1, #1
 8002d0a:	438a      	bics	r2, r1
 8002d0c:	609a      	str	r2, [r3, #8]
 8002d0e:	193b      	adds	r3, r7, r4
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	f383 8810 	msr	PRIMASK, r3
}
 8002d1a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2280      	movs	r2, #128	; 0x80
 8002d20:	2120      	movs	r1, #32
 8002d22:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d30:	f3ef 8310 	mrs	r3, PRIMASK
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d38:	2480      	movs	r4, #128	; 0x80
 8002d3a:	193a      	adds	r2, r7, r4
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	2301      	movs	r3, #1
 8002d40:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d44:	f383 8810 	msr	PRIMASK, r3
}
 8002d48:	46c0      	nop			; (mov r8, r8)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2110      	movs	r1, #16
 8002d56:	438a      	bics	r2, r1
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	193b      	adds	r3, r7, r4
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d62:	f383 8810 	msr	PRIMASK, r3
}
 8002d66:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d6e:	183b      	adds	r3, r7, r0
 8002d70:	881a      	ldrh	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	0011      	movs	r1, r2
 8002d76:	0018      	movs	r0, r3
 8002d78:	f000 f860 	bl	8002e3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d7c:	e044      	b.n	8002e08 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d7e:	23a4      	movs	r3, #164	; 0xa4
 8002d80:	18fb      	adds	r3, r7, r3
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	035b      	lsls	r3, r3, #13
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d010      	beq.n	8002dae <HAL_UART_IRQHandler+0x556>
 8002d8c:	239c      	movs	r3, #156	; 0x9c
 8002d8e:	18fb      	adds	r3, r7, r3
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	2380      	movs	r3, #128	; 0x80
 8002d94:	03db      	lsls	r3, r3, #15
 8002d96:	4013      	ands	r3, r2
 8002d98:	d009      	beq.n	8002dae <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2280      	movs	r2, #128	; 0x80
 8002da0:	0352      	lsls	r2, r2, #13
 8002da2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	0018      	movs	r0, r3
 8002da8:	f000 fdc1 	bl	800392e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002dac:	e02f      	b.n	8002e0e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002dae:	23a4      	movs	r3, #164	; 0xa4
 8002db0:	18fb      	adds	r3, r7, r3
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2280      	movs	r2, #128	; 0x80
 8002db6:	4013      	ands	r3, r2
 8002db8:	d00f      	beq.n	8002dda <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002dba:	23a0      	movs	r3, #160	; 0xa0
 8002dbc:	18fb      	adds	r3, r7, r3
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2280      	movs	r2, #128	; 0x80
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d009      	beq.n	8002dda <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d01e      	beq.n	8002e0c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	0010      	movs	r0, r2
 8002dd6:	4798      	blx	r3
    }
    return;
 8002dd8:	e018      	b.n	8002e0c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002dda:	23a4      	movs	r3, #164	; 0xa4
 8002ddc:	18fb      	adds	r3, r7, r3
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2240      	movs	r2, #64	; 0x40
 8002de2:	4013      	ands	r3, r2
 8002de4:	d013      	beq.n	8002e0e <HAL_UART_IRQHandler+0x5b6>
 8002de6:	23a0      	movs	r3, #160	; 0xa0
 8002de8:	18fb      	adds	r3, r7, r3
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2240      	movs	r2, #64	; 0x40
 8002dee:	4013      	ands	r3, r2
 8002df0:	d00d      	beq.n	8002e0e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	0018      	movs	r0, r3
 8002df6:	f000 fd6f 	bl	80038d8 <UART_EndTransmit_IT>
    return;
 8002dfa:	e008      	b.n	8002e0e <HAL_UART_IRQHandler+0x5b6>
      return;
 8002dfc:	46c0      	nop			; (mov r8, r8)
 8002dfe:	e006      	b.n	8002e0e <HAL_UART_IRQHandler+0x5b6>
    return;
 8002e00:	46c0      	nop			; (mov r8, r8)
 8002e02:	e004      	b.n	8002e0e <HAL_UART_IRQHandler+0x5b6>
      return;
 8002e04:	46c0      	nop			; (mov r8, r8)
 8002e06:	e002      	b.n	8002e0e <HAL_UART_IRQHandler+0x5b6>
      return;
 8002e08:	46c0      	nop			; (mov r8, r8)
 8002e0a:	e000      	b.n	8002e0e <HAL_UART_IRQHandler+0x5b6>
    return;
 8002e0c:	46c0      	nop			; (mov r8, r8)
  }

}
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b02b      	add	sp, #172	; 0xac
 8002e12:	bd90      	pop	{r4, r7, pc}
 8002e14:	fffffeff 	.word	0xfffffeff
 8002e18:	fffffedf 	.word	0xfffffedf

08002e1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002e24:	46c0      	nop			; (mov r8, r8)
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b002      	add	sp, #8
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e34:	46c0      	nop			; (mov r8, r8)
 8002e36:	46bd      	mov	sp, r7
 8002e38:	b002      	add	sp, #8
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	000a      	movs	r2, r1
 8002e46:	1cbb      	adds	r3, r7, #2
 8002e48:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	b002      	add	sp, #8
 8002e50:	bd80      	pop	{r7, pc}
	...

08002e54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e54:	b5b0      	push	{r4, r5, r7, lr}
 8002e56:	b08e      	sub	sp, #56	; 0x38
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e5c:	231a      	movs	r3, #26
 8002e5e:	2218      	movs	r2, #24
 8002e60:	189b      	adds	r3, r3, r2
 8002e62:	19db      	adds	r3, r3, r7
 8002e64:	2200      	movs	r2, #0
 8002e66:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	431a      	orrs	r2, r3
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4ab4      	ldr	r2, [pc, #720]	; (8003158 <UART_SetConfig+0x304>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	0019      	movs	r1, r3
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e92:	430a      	orrs	r2, r1
 8002e94:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	4aaf      	ldr	r2, [pc, #700]	; (800315c <UART_SetConfig+0x308>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	0019      	movs	r1, r3
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4aa9      	ldr	r2, [pc, #676]	; (8003160 <UART_SetConfig+0x30c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d004      	beq.n	8002ec8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	4aa5      	ldr	r2, [pc, #660]	; (8003164 <UART_SetConfig+0x310>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	0019      	movs	r1, r3
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002eda:	430a      	orrs	r2, r1
 8002edc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4aa1      	ldr	r2, [pc, #644]	; (8003168 <UART_SetConfig+0x314>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d131      	bne.n	8002f4c <UART_SetConfig+0xf8>
 8002ee8:	4ba0      	ldr	r3, [pc, #640]	; (800316c <UART_SetConfig+0x318>)
 8002eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eec:	220c      	movs	r2, #12
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b0c      	cmp	r3, #12
 8002ef2:	d01d      	beq.n	8002f30 <UART_SetConfig+0xdc>
 8002ef4:	d823      	bhi.n	8002f3e <UART_SetConfig+0xea>
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d00c      	beq.n	8002f14 <UART_SetConfig+0xc0>
 8002efa:	d820      	bhi.n	8002f3e <UART_SetConfig+0xea>
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <UART_SetConfig+0xb2>
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d00e      	beq.n	8002f22 <UART_SetConfig+0xce>
 8002f04:	e01b      	b.n	8002f3e <UART_SetConfig+0xea>
 8002f06:	231b      	movs	r3, #27
 8002f08:	2218      	movs	r2, #24
 8002f0a:	189b      	adds	r3, r3, r2
 8002f0c:	19db      	adds	r3, r3, r7
 8002f0e:	2200      	movs	r2, #0
 8002f10:	701a      	strb	r2, [r3, #0]
 8002f12:	e065      	b.n	8002fe0 <UART_SetConfig+0x18c>
 8002f14:	231b      	movs	r3, #27
 8002f16:	2218      	movs	r2, #24
 8002f18:	189b      	adds	r3, r3, r2
 8002f1a:	19db      	adds	r3, r3, r7
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	701a      	strb	r2, [r3, #0]
 8002f20:	e05e      	b.n	8002fe0 <UART_SetConfig+0x18c>
 8002f22:	231b      	movs	r3, #27
 8002f24:	2218      	movs	r2, #24
 8002f26:	189b      	adds	r3, r3, r2
 8002f28:	19db      	adds	r3, r3, r7
 8002f2a:	2204      	movs	r2, #4
 8002f2c:	701a      	strb	r2, [r3, #0]
 8002f2e:	e057      	b.n	8002fe0 <UART_SetConfig+0x18c>
 8002f30:	231b      	movs	r3, #27
 8002f32:	2218      	movs	r2, #24
 8002f34:	189b      	adds	r3, r3, r2
 8002f36:	19db      	adds	r3, r3, r7
 8002f38:	2208      	movs	r2, #8
 8002f3a:	701a      	strb	r2, [r3, #0]
 8002f3c:	e050      	b.n	8002fe0 <UART_SetConfig+0x18c>
 8002f3e:	231b      	movs	r3, #27
 8002f40:	2218      	movs	r2, #24
 8002f42:	189b      	adds	r3, r3, r2
 8002f44:	19db      	adds	r3, r3, r7
 8002f46:	2210      	movs	r2, #16
 8002f48:	701a      	strb	r2, [r3, #0]
 8002f4a:	e049      	b.n	8002fe0 <UART_SetConfig+0x18c>
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a83      	ldr	r2, [pc, #524]	; (8003160 <UART_SetConfig+0x30c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d13e      	bne.n	8002fd4 <UART_SetConfig+0x180>
 8002f56:	4b85      	ldr	r3, [pc, #532]	; (800316c <UART_SetConfig+0x318>)
 8002f58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f5a:	23c0      	movs	r3, #192	; 0xc0
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	4013      	ands	r3, r2
 8002f60:	22c0      	movs	r2, #192	; 0xc0
 8002f62:	0112      	lsls	r2, r2, #4
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d027      	beq.n	8002fb8 <UART_SetConfig+0x164>
 8002f68:	22c0      	movs	r2, #192	; 0xc0
 8002f6a:	0112      	lsls	r2, r2, #4
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d82a      	bhi.n	8002fc6 <UART_SetConfig+0x172>
 8002f70:	2280      	movs	r2, #128	; 0x80
 8002f72:	0112      	lsls	r2, r2, #4
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d011      	beq.n	8002f9c <UART_SetConfig+0x148>
 8002f78:	2280      	movs	r2, #128	; 0x80
 8002f7a:	0112      	lsls	r2, r2, #4
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d822      	bhi.n	8002fc6 <UART_SetConfig+0x172>
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d004      	beq.n	8002f8e <UART_SetConfig+0x13a>
 8002f84:	2280      	movs	r2, #128	; 0x80
 8002f86:	00d2      	lsls	r2, r2, #3
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d00e      	beq.n	8002faa <UART_SetConfig+0x156>
 8002f8c:	e01b      	b.n	8002fc6 <UART_SetConfig+0x172>
 8002f8e:	231b      	movs	r3, #27
 8002f90:	2218      	movs	r2, #24
 8002f92:	189b      	adds	r3, r3, r2
 8002f94:	19db      	adds	r3, r3, r7
 8002f96:	2200      	movs	r2, #0
 8002f98:	701a      	strb	r2, [r3, #0]
 8002f9a:	e021      	b.n	8002fe0 <UART_SetConfig+0x18c>
 8002f9c:	231b      	movs	r3, #27
 8002f9e:	2218      	movs	r2, #24
 8002fa0:	189b      	adds	r3, r3, r2
 8002fa2:	19db      	adds	r3, r3, r7
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	701a      	strb	r2, [r3, #0]
 8002fa8:	e01a      	b.n	8002fe0 <UART_SetConfig+0x18c>
 8002faa:	231b      	movs	r3, #27
 8002fac:	2218      	movs	r2, #24
 8002fae:	189b      	adds	r3, r3, r2
 8002fb0:	19db      	adds	r3, r3, r7
 8002fb2:	2204      	movs	r2, #4
 8002fb4:	701a      	strb	r2, [r3, #0]
 8002fb6:	e013      	b.n	8002fe0 <UART_SetConfig+0x18c>
 8002fb8:	231b      	movs	r3, #27
 8002fba:	2218      	movs	r2, #24
 8002fbc:	189b      	adds	r3, r3, r2
 8002fbe:	19db      	adds	r3, r3, r7
 8002fc0:	2208      	movs	r2, #8
 8002fc2:	701a      	strb	r2, [r3, #0]
 8002fc4:	e00c      	b.n	8002fe0 <UART_SetConfig+0x18c>
 8002fc6:	231b      	movs	r3, #27
 8002fc8:	2218      	movs	r2, #24
 8002fca:	189b      	adds	r3, r3, r2
 8002fcc:	19db      	adds	r3, r3, r7
 8002fce:	2210      	movs	r2, #16
 8002fd0:	701a      	strb	r2, [r3, #0]
 8002fd2:	e005      	b.n	8002fe0 <UART_SetConfig+0x18c>
 8002fd4:	231b      	movs	r3, #27
 8002fd6:	2218      	movs	r2, #24
 8002fd8:	189b      	adds	r3, r3, r2
 8002fda:	19db      	adds	r3, r3, r7
 8002fdc:	2210      	movs	r2, #16
 8002fde:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a5e      	ldr	r2, [pc, #376]	; (8003160 <UART_SetConfig+0x30c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d000      	beq.n	8002fec <UART_SetConfig+0x198>
 8002fea:	e084      	b.n	80030f6 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fec:	231b      	movs	r3, #27
 8002fee:	2218      	movs	r2, #24
 8002ff0:	189b      	adds	r3, r3, r2
 8002ff2:	19db      	adds	r3, r3, r7
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d01d      	beq.n	8003036 <UART_SetConfig+0x1e2>
 8002ffa:	dc20      	bgt.n	800303e <UART_SetConfig+0x1ea>
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d015      	beq.n	800302c <UART_SetConfig+0x1d8>
 8003000:	dc1d      	bgt.n	800303e <UART_SetConfig+0x1ea>
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <UART_SetConfig+0x1b8>
 8003006:	2b02      	cmp	r3, #2
 8003008:	d005      	beq.n	8003016 <UART_SetConfig+0x1c2>
 800300a:	e018      	b.n	800303e <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800300c:	f7fe fe5a 	bl	8001cc4 <HAL_RCC_GetPCLK1Freq>
 8003010:	0003      	movs	r3, r0
 8003012:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003014:	e01c      	b.n	8003050 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003016:	4b55      	ldr	r3, [pc, #340]	; (800316c <UART_SetConfig+0x318>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2210      	movs	r2, #16
 800301c:	4013      	ands	r3, r2
 800301e:	d002      	beq.n	8003026 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003020:	4b53      	ldr	r3, [pc, #332]	; (8003170 <UART_SetConfig+0x31c>)
 8003022:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003024:	e014      	b.n	8003050 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8003026:	4b53      	ldr	r3, [pc, #332]	; (8003174 <UART_SetConfig+0x320>)
 8003028:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800302a:	e011      	b.n	8003050 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800302c:	f7fe fd9a 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 8003030:	0003      	movs	r3, r0
 8003032:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003034:	e00c      	b.n	8003050 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003036:	2380      	movs	r3, #128	; 0x80
 8003038:	021b      	lsls	r3, r3, #8
 800303a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800303c:	e008      	b.n	8003050 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800303e:	2300      	movs	r3, #0
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003042:	231a      	movs	r3, #26
 8003044:	2218      	movs	r2, #24
 8003046:	189b      	adds	r3, r3, r2
 8003048:	19db      	adds	r3, r3, r7
 800304a:	2201      	movs	r2, #1
 800304c:	701a      	strb	r2, [r3, #0]
        break;
 800304e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003052:	2b00      	cmp	r3, #0
 8003054:	d100      	bne.n	8003058 <UART_SetConfig+0x204>
 8003056:	e12f      	b.n	80032b8 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	0013      	movs	r3, r2
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	189b      	adds	r3, r3, r2
 8003062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003064:	429a      	cmp	r2, r3
 8003066:	d305      	bcc.n	8003074 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800306e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003070:	429a      	cmp	r2, r3
 8003072:	d906      	bls.n	8003082 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8003074:	231a      	movs	r3, #26
 8003076:	2218      	movs	r2, #24
 8003078:	189b      	adds	r3, r3, r2
 800307a:	19db      	adds	r3, r3, r7
 800307c:	2201      	movs	r2, #1
 800307e:	701a      	strb	r2, [r3, #0]
 8003080:	e11a      	b.n	80032b8 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	6939      	ldr	r1, [r7, #16]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	000b      	movs	r3, r1
 8003090:	0e1b      	lsrs	r3, r3, #24
 8003092:	0010      	movs	r0, r2
 8003094:	0205      	lsls	r5, r0, #8
 8003096:	431d      	orrs	r5, r3
 8003098:	000b      	movs	r3, r1
 800309a:	021c      	lsls	r4, r3, #8
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	085b      	lsrs	r3, r3, #1
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	2300      	movs	r3, #0
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	68b8      	ldr	r0, [r7, #8]
 80030aa:	68f9      	ldr	r1, [r7, #12]
 80030ac:	1900      	adds	r0, r0, r4
 80030ae:	4169      	adcs	r1, r5
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	603b      	str	r3, [r7, #0]
 80030b6:	2300      	movs	r3, #0
 80030b8:	607b      	str	r3, [r7, #4]
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f7fd f8af 	bl	8000220 <__aeabi_uldivmod>
 80030c2:	0002      	movs	r2, r0
 80030c4:	000b      	movs	r3, r1
 80030c6:	0013      	movs	r3, r2
 80030c8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030cc:	23c0      	movs	r3, #192	; 0xc0
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d309      	bcc.n	80030e8 <UART_SetConfig+0x294>
 80030d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030d6:	2380      	movs	r3, #128	; 0x80
 80030d8:	035b      	lsls	r3, r3, #13
 80030da:	429a      	cmp	r2, r3
 80030dc:	d204      	bcs.n	80030e8 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030e4:	60da      	str	r2, [r3, #12]
 80030e6:	e0e7      	b.n	80032b8 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 80030e8:	231a      	movs	r3, #26
 80030ea:	2218      	movs	r2, #24
 80030ec:	189b      	adds	r3, r3, r2
 80030ee:	19db      	adds	r3, r3, r7
 80030f0:	2201      	movs	r2, #1
 80030f2:	701a      	strb	r2, [r3, #0]
 80030f4:	e0e0      	b.n	80032b8 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	69da      	ldr	r2, [r3, #28]
 80030fa:	2380      	movs	r3, #128	; 0x80
 80030fc:	021b      	lsls	r3, r3, #8
 80030fe:	429a      	cmp	r2, r3
 8003100:	d000      	beq.n	8003104 <UART_SetConfig+0x2b0>
 8003102:	e082      	b.n	800320a <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8003104:	231b      	movs	r3, #27
 8003106:	2218      	movs	r2, #24
 8003108:	189b      	adds	r3, r3, r2
 800310a:	19db      	adds	r3, r3, r7
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b08      	cmp	r3, #8
 8003110:	d834      	bhi.n	800317c <UART_SetConfig+0x328>
 8003112:	009a      	lsls	r2, r3, #2
 8003114:	4b18      	ldr	r3, [pc, #96]	; (8003178 <UART_SetConfig+0x324>)
 8003116:	18d3      	adds	r3, r2, r3
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800311c:	f7fe fdd2 	bl	8001cc4 <HAL_RCC_GetPCLK1Freq>
 8003120:	0003      	movs	r3, r0
 8003122:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003124:	e033      	b.n	800318e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003126:	f7fe fde3 	bl	8001cf0 <HAL_RCC_GetPCLK2Freq>
 800312a:	0003      	movs	r3, r0
 800312c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800312e:	e02e      	b.n	800318e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003130:	4b0e      	ldr	r3, [pc, #56]	; (800316c <UART_SetConfig+0x318>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2210      	movs	r2, #16
 8003136:	4013      	ands	r3, r2
 8003138:	d002      	beq.n	8003140 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800313a:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <UART_SetConfig+0x31c>)
 800313c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800313e:	e026      	b.n	800318e <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8003140:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <UART_SetConfig+0x320>)
 8003142:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003144:	e023      	b.n	800318e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003146:	f7fe fd0d 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 800314a:	0003      	movs	r3, r0
 800314c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800314e:	e01e      	b.n	800318e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003150:	2380      	movs	r3, #128	; 0x80
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003156:	e01a      	b.n	800318e <UART_SetConfig+0x33a>
 8003158:	efff69f3 	.word	0xefff69f3
 800315c:	ffffcfff 	.word	0xffffcfff
 8003160:	40004800 	.word	0x40004800
 8003164:	fffff4ff 	.word	0xfffff4ff
 8003168:	40004400 	.word	0x40004400
 800316c:	40021000 	.word	0x40021000
 8003170:	003d0900 	.word	0x003d0900
 8003174:	00f42400 	.word	0x00f42400
 8003178:	080039e0 	.word	0x080039e0
      default:
        pclk = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003180:	231a      	movs	r3, #26
 8003182:	2218      	movs	r2, #24
 8003184:	189b      	adds	r3, r3, r2
 8003186:	19db      	adds	r3, r3, r7
 8003188:	2201      	movs	r2, #1
 800318a:	701a      	strb	r2, [r3, #0]
        break;
 800318c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800318e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003190:	2b00      	cmp	r3, #0
 8003192:	d100      	bne.n	8003196 <UART_SetConfig+0x342>
 8003194:	e090      	b.n	80032b8 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003198:	005a      	lsls	r2, r3, #1
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	085b      	lsrs	r3, r3, #1
 80031a0:	18d2      	adds	r2, r2, r3
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	0019      	movs	r1, r3
 80031a8:	0010      	movs	r0, r2
 80031aa:	f7fc ffad 	bl	8000108 <__udivsi3>
 80031ae:	0003      	movs	r3, r0
 80031b0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b4:	2b0f      	cmp	r3, #15
 80031b6:	d921      	bls.n	80031fc <UART_SetConfig+0x3a8>
 80031b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031ba:	2380      	movs	r3, #128	; 0x80
 80031bc:	025b      	lsls	r3, r3, #9
 80031be:	429a      	cmp	r2, r3
 80031c0:	d21c      	bcs.n	80031fc <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	200e      	movs	r0, #14
 80031c8:	2418      	movs	r4, #24
 80031ca:	1903      	adds	r3, r0, r4
 80031cc:	19db      	adds	r3, r3, r7
 80031ce:	210f      	movs	r1, #15
 80031d0:	438a      	bics	r2, r1
 80031d2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d6:	085b      	lsrs	r3, r3, #1
 80031d8:	b29b      	uxth	r3, r3
 80031da:	2207      	movs	r2, #7
 80031dc:	4013      	ands	r3, r2
 80031de:	b299      	uxth	r1, r3
 80031e0:	1903      	adds	r3, r0, r4
 80031e2:	19db      	adds	r3, r3, r7
 80031e4:	1902      	adds	r2, r0, r4
 80031e6:	19d2      	adds	r2, r2, r7
 80031e8:	8812      	ldrh	r2, [r2, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	1902      	adds	r2, r0, r4
 80031f4:	19d2      	adds	r2, r2, r7
 80031f6:	8812      	ldrh	r2, [r2, #0]
 80031f8:	60da      	str	r2, [r3, #12]
 80031fa:	e05d      	b.n	80032b8 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80031fc:	231a      	movs	r3, #26
 80031fe:	2218      	movs	r2, #24
 8003200:	189b      	adds	r3, r3, r2
 8003202:	19db      	adds	r3, r3, r7
 8003204:	2201      	movs	r2, #1
 8003206:	701a      	strb	r2, [r3, #0]
 8003208:	e056      	b.n	80032b8 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 800320a:	231b      	movs	r3, #27
 800320c:	2218      	movs	r2, #24
 800320e:	189b      	adds	r3, r3, r2
 8003210:	19db      	adds	r3, r3, r7
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b08      	cmp	r3, #8
 8003216:	d822      	bhi.n	800325e <UART_SetConfig+0x40a>
 8003218:	009a      	lsls	r2, r3, #2
 800321a:	4b2f      	ldr	r3, [pc, #188]	; (80032d8 <UART_SetConfig+0x484>)
 800321c:	18d3      	adds	r3, r2, r3
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003222:	f7fe fd4f 	bl	8001cc4 <HAL_RCC_GetPCLK1Freq>
 8003226:	0003      	movs	r3, r0
 8003228:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800322a:	e021      	b.n	8003270 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800322c:	f7fe fd60 	bl	8001cf0 <HAL_RCC_GetPCLK2Freq>
 8003230:	0003      	movs	r3, r0
 8003232:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003234:	e01c      	b.n	8003270 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003236:	4b29      	ldr	r3, [pc, #164]	; (80032dc <UART_SetConfig+0x488>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2210      	movs	r2, #16
 800323c:	4013      	ands	r3, r2
 800323e:	d002      	beq.n	8003246 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003240:	4b27      	ldr	r3, [pc, #156]	; (80032e0 <UART_SetConfig+0x48c>)
 8003242:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003244:	e014      	b.n	8003270 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8003246:	4b27      	ldr	r3, [pc, #156]	; (80032e4 <UART_SetConfig+0x490>)
 8003248:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800324a:	e011      	b.n	8003270 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800324c:	f7fe fc8a 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 8003250:	0003      	movs	r3, r0
 8003252:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003254:	e00c      	b.n	8003270 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003256:	2380      	movs	r3, #128	; 0x80
 8003258:	021b      	lsls	r3, r3, #8
 800325a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800325c:	e008      	b.n	8003270 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003262:	231a      	movs	r3, #26
 8003264:	2218      	movs	r2, #24
 8003266:	189b      	adds	r3, r3, r2
 8003268:	19db      	adds	r3, r3, r7
 800326a:	2201      	movs	r2, #1
 800326c:	701a      	strb	r2, [r3, #0]
        break;
 800326e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003272:	2b00      	cmp	r3, #0
 8003274:	d020      	beq.n	80032b8 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	085a      	lsrs	r2, r3, #1
 800327c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327e:	18d2      	adds	r2, r2, r3
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	0019      	movs	r1, r3
 8003286:	0010      	movs	r0, r2
 8003288:	f7fc ff3e 	bl	8000108 <__udivsi3>
 800328c:	0003      	movs	r3, r0
 800328e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003292:	2b0f      	cmp	r3, #15
 8003294:	d90a      	bls.n	80032ac <UART_SetConfig+0x458>
 8003296:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003298:	2380      	movs	r3, #128	; 0x80
 800329a:	025b      	lsls	r3, r3, #9
 800329c:	429a      	cmp	r2, r3
 800329e:	d205      	bcs.n	80032ac <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	e005      	b.n	80032b8 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80032ac:	231a      	movs	r3, #26
 80032ae:	2218      	movs	r2, #24
 80032b0:	189b      	adds	r3, r3, r2
 80032b2:	19db      	adds	r3, r3, r7
 80032b4:	2201      	movs	r2, #1
 80032b6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	2200      	movs	r2, #0
 80032bc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	2200      	movs	r2, #0
 80032c2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80032c4:	231a      	movs	r3, #26
 80032c6:	2218      	movs	r2, #24
 80032c8:	189b      	adds	r3, r3, r2
 80032ca:	19db      	adds	r3, r3, r7
 80032cc:	781b      	ldrb	r3, [r3, #0]
}
 80032ce:	0018      	movs	r0, r3
 80032d0:	46bd      	mov	sp, r7
 80032d2:	b00e      	add	sp, #56	; 0x38
 80032d4:	bdb0      	pop	{r4, r5, r7, pc}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	08003a04 	.word	0x08003a04
 80032dc:	40021000 	.word	0x40021000
 80032e0:	003d0900 	.word	0x003d0900
 80032e4:	00f42400 	.word	0x00f42400

080032e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	2201      	movs	r2, #1
 80032f6:	4013      	ands	r3, r2
 80032f8:	d00b      	beq.n	8003312 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	4a4a      	ldr	r2, [pc, #296]	; (800342c <UART_AdvFeatureConfig+0x144>)
 8003302:	4013      	ands	r3, r2
 8003304:	0019      	movs	r1, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	2202      	movs	r2, #2
 8003318:	4013      	ands	r3, r2
 800331a:	d00b      	beq.n	8003334 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	4a43      	ldr	r2, [pc, #268]	; (8003430 <UART_AdvFeatureConfig+0x148>)
 8003324:	4013      	ands	r3, r2
 8003326:	0019      	movs	r1, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	2204      	movs	r2, #4
 800333a:	4013      	ands	r3, r2
 800333c:	d00b      	beq.n	8003356 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4a3b      	ldr	r2, [pc, #236]	; (8003434 <UART_AdvFeatureConfig+0x14c>)
 8003346:	4013      	ands	r3, r2
 8003348:	0019      	movs	r1, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	2208      	movs	r2, #8
 800335c:	4013      	ands	r3, r2
 800335e:	d00b      	beq.n	8003378 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4a34      	ldr	r2, [pc, #208]	; (8003438 <UART_AdvFeatureConfig+0x150>)
 8003368:	4013      	ands	r3, r2
 800336a:	0019      	movs	r1, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	2210      	movs	r2, #16
 800337e:	4013      	ands	r3, r2
 8003380:	d00b      	beq.n	800339a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	4a2c      	ldr	r2, [pc, #176]	; (800343c <UART_AdvFeatureConfig+0x154>)
 800338a:	4013      	ands	r3, r2
 800338c:	0019      	movs	r1, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	2220      	movs	r2, #32
 80033a0:	4013      	ands	r3, r2
 80033a2:	d00b      	beq.n	80033bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	4a25      	ldr	r2, [pc, #148]	; (8003440 <UART_AdvFeatureConfig+0x158>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	0019      	movs	r1, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	2240      	movs	r2, #64	; 0x40
 80033c2:	4013      	ands	r3, r2
 80033c4:	d01d      	beq.n	8003402 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	4a1d      	ldr	r2, [pc, #116]	; (8003444 <UART_AdvFeatureConfig+0x15c>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	0019      	movs	r1, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033e2:	2380      	movs	r3, #128	; 0x80
 80033e4:	035b      	lsls	r3, r3, #13
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d10b      	bne.n	8003402 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	4a15      	ldr	r2, [pc, #84]	; (8003448 <UART_AdvFeatureConfig+0x160>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	0019      	movs	r1, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	2280      	movs	r2, #128	; 0x80
 8003408:	4013      	ands	r3, r2
 800340a:	d00b      	beq.n	8003424 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	4a0e      	ldr	r2, [pc, #56]	; (800344c <UART_AdvFeatureConfig+0x164>)
 8003414:	4013      	ands	r3, r2
 8003416:	0019      	movs	r1, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	605a      	str	r2, [r3, #4]
  }
}
 8003424:	46c0      	nop			; (mov r8, r8)
 8003426:	46bd      	mov	sp, r7
 8003428:	b002      	add	sp, #8
 800342a:	bd80      	pop	{r7, pc}
 800342c:	fffdffff 	.word	0xfffdffff
 8003430:	fffeffff 	.word	0xfffeffff
 8003434:	fffbffff 	.word	0xfffbffff
 8003438:	ffff7fff 	.word	0xffff7fff
 800343c:	ffffefff 	.word	0xffffefff
 8003440:	ffffdfff 	.word	0xffffdfff
 8003444:	ffefffff 	.word	0xffefffff
 8003448:	ff9fffff 	.word	0xff9fffff
 800344c:	fff7ffff 	.word	0xfff7ffff

08003450 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b092      	sub	sp, #72	; 0x48
 8003454:	af02      	add	r7, sp, #8
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2284      	movs	r2, #132	; 0x84
 800345c:	2100      	movs	r1, #0
 800345e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003460:	f7fd fb38 	bl	8000ad4 <HAL_GetTick>
 8003464:	0003      	movs	r3, r0
 8003466:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2208      	movs	r2, #8
 8003470:	4013      	ands	r3, r2
 8003472:	2b08      	cmp	r3, #8
 8003474:	d12c      	bne.n	80034d0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003478:	2280      	movs	r2, #128	; 0x80
 800347a:	0391      	lsls	r1, r2, #14
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	4a46      	ldr	r2, [pc, #280]	; (8003598 <UART_CheckIdleState+0x148>)
 8003480:	9200      	str	r2, [sp, #0]
 8003482:	2200      	movs	r2, #0
 8003484:	f000 f88c 	bl	80035a0 <UART_WaitOnFlagUntilTimeout>
 8003488:	1e03      	subs	r3, r0, #0
 800348a:	d021      	beq.n	80034d0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800348c:	f3ef 8310 	mrs	r3, PRIMASK
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003494:	63bb      	str	r3, [r7, #56]	; 0x38
 8003496:	2301      	movs	r3, #1
 8003498:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800349a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349c:	f383 8810 	msr	PRIMASK, r3
}
 80034a0:	46c0      	nop			; (mov r8, r8)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2180      	movs	r1, #128	; 0x80
 80034ae:	438a      	bics	r2, r1
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b8:	f383 8810 	msr	PRIMASK, r3
}
 80034bc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2220      	movs	r2, #32
 80034c2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2278      	movs	r2, #120	; 0x78
 80034c8:	2100      	movs	r1, #0
 80034ca:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e05f      	b.n	8003590 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2204      	movs	r2, #4
 80034d8:	4013      	ands	r3, r2
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d146      	bne.n	800356c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e0:	2280      	movs	r2, #128	; 0x80
 80034e2:	03d1      	lsls	r1, r2, #15
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	4a2c      	ldr	r2, [pc, #176]	; (8003598 <UART_CheckIdleState+0x148>)
 80034e8:	9200      	str	r2, [sp, #0]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f000 f858 	bl	80035a0 <UART_WaitOnFlagUntilTimeout>
 80034f0:	1e03      	subs	r3, r0, #0
 80034f2:	d03b      	beq.n	800356c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f4:	f3ef 8310 	mrs	r3, PRIMASK
 80034f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80034fa:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034fc:	637b      	str	r3, [r7, #52]	; 0x34
 80034fe:	2301      	movs	r3, #1
 8003500:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f383 8810 	msr	PRIMASK, r3
}
 8003508:	46c0      	nop			; (mov r8, r8)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4921      	ldr	r1, [pc, #132]	; (800359c <UART_CheckIdleState+0x14c>)
 8003516:	400a      	ands	r2, r1
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f383 8810 	msr	PRIMASK, r3
}
 8003524:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003526:	f3ef 8310 	mrs	r3, PRIMASK
 800352a:	61bb      	str	r3, [r7, #24]
  return(result);
 800352c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800352e:	633b      	str	r3, [r7, #48]	; 0x30
 8003530:	2301      	movs	r3, #1
 8003532:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f383 8810 	msr	PRIMASK, r3
}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2101      	movs	r1, #1
 8003548:	438a      	bics	r2, r1
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	f383 8810 	msr	PRIMASK, r3
}
 8003556:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2280      	movs	r2, #128	; 0x80
 800355c:	2120      	movs	r1, #32
 800355e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2278      	movs	r2, #120	; 0x78
 8003564:	2100      	movs	r1, #0
 8003566:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e011      	b.n	8003590 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2220      	movs	r2, #32
 8003570:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2280      	movs	r2, #128	; 0x80
 8003576:	2120      	movs	r1, #32
 8003578:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2278      	movs	r2, #120	; 0x78
 800358a:	2100      	movs	r1, #0
 800358c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	0018      	movs	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	b010      	add	sp, #64	; 0x40
 8003596:	bd80      	pop	{r7, pc}
 8003598:	01ffffff 	.word	0x01ffffff
 800359c:	fffffedf 	.word	0xfffffedf

080035a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	1dfb      	adds	r3, r7, #7
 80035ae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b0:	e04b      	b.n	800364a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	3301      	adds	r3, #1
 80035b6:	d048      	beq.n	800364a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b8:	f7fd fa8c 	bl	8000ad4 <HAL_GetTick>
 80035bc:	0002      	movs	r2, r0
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d302      	bcc.n	80035ce <UART_WaitOnFlagUntilTimeout+0x2e>
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e04b      	b.n	800366a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2204      	movs	r2, #4
 80035da:	4013      	ands	r3, r2
 80035dc:	d035      	beq.n	800364a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	2208      	movs	r2, #8
 80035e6:	4013      	ands	r3, r2
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d111      	bne.n	8003610 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2208      	movs	r2, #8
 80035f2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	0018      	movs	r0, r3
 80035f8:	f000 f83c 	bl	8003674 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2284      	movs	r2, #132	; 0x84
 8003600:	2108      	movs	r1, #8
 8003602:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2278      	movs	r2, #120	; 0x78
 8003608:	2100      	movs	r1, #0
 800360a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e02c      	b.n	800366a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	69da      	ldr	r2, [r3, #28]
 8003616:	2380      	movs	r3, #128	; 0x80
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	401a      	ands	r2, r3
 800361c:	2380      	movs	r3, #128	; 0x80
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	429a      	cmp	r2, r3
 8003622:	d112      	bne.n	800364a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2280      	movs	r2, #128	; 0x80
 800362a:	0112      	lsls	r2, r2, #4
 800362c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	0018      	movs	r0, r3
 8003632:	f000 f81f 	bl	8003674 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2284      	movs	r2, #132	; 0x84
 800363a:	2120      	movs	r1, #32
 800363c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2278      	movs	r2, #120	; 0x78
 8003642:	2100      	movs	r1, #0
 8003644:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e00f      	b.n	800366a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	4013      	ands	r3, r2
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	425a      	negs	r2, r3
 800365a:	4153      	adcs	r3, r2
 800365c:	b2db      	uxtb	r3, r3
 800365e:	001a      	movs	r2, r3
 8003660:	1dfb      	adds	r3, r7, #7
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d0a4      	beq.n	80035b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	0018      	movs	r0, r3
 800366c:	46bd      	mov	sp, r7
 800366e:	b004      	add	sp, #16
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08e      	sub	sp, #56	; 0x38
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800367c:	f3ef 8310 	mrs	r3, PRIMASK
 8003680:	617b      	str	r3, [r7, #20]
  return(result);
 8003682:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003684:	637b      	str	r3, [r7, #52]	; 0x34
 8003686:	2301      	movs	r3, #1
 8003688:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	f383 8810 	msr	PRIMASK, r3
}
 8003690:	46c0      	nop			; (mov r8, r8)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4926      	ldr	r1, [pc, #152]	; (8003738 <UART_EndRxTransfer+0xc4>)
 800369e:	400a      	ands	r2, r1
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	f383 8810 	msr	PRIMASK, r3
}
 80036ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ae:	f3ef 8310 	mrs	r3, PRIMASK
 80036b2:	623b      	str	r3, [r7, #32]
  return(result);
 80036b4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b6:	633b      	str	r3, [r7, #48]	; 0x30
 80036b8:	2301      	movs	r3, #1
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	f383 8810 	msr	PRIMASK, r3
}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2101      	movs	r1, #1
 80036d0:	438a      	bics	r2, r1
 80036d2:	609a      	str	r2, [r3, #8]
 80036d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036da:	f383 8810 	msr	PRIMASK, r3
}
 80036de:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d118      	bne.n	800371a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036e8:	f3ef 8310 	mrs	r3, PRIMASK
 80036ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80036ee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036f2:	2301      	movs	r3, #1
 80036f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f383 8810 	msr	PRIMASK, r3
}
 80036fc:	46c0      	nop			; (mov r8, r8)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2110      	movs	r1, #16
 800370a:	438a      	bics	r2, r1
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003710:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f383 8810 	msr	PRIMASK, r3
}
 8003718:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2280      	movs	r2, #128	; 0x80
 800371e:	2120      	movs	r1, #32
 8003720:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	46bd      	mov	sp, r7
 8003732:	b00e      	add	sp, #56	; 0x38
 8003734:	bd80      	pop	{r7, pc}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	fffffedf 	.word	0xfffffedf

0800373c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003748:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	225a      	movs	r2, #90	; 0x5a
 800374e:	2100      	movs	r1, #0
 8003750:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2252      	movs	r2, #82	; 0x52
 8003756:	2100      	movs	r1, #0
 8003758:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	0018      	movs	r0, r3
 800375e:	f7ff fb65 	bl	8002e2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	46bd      	mov	sp, r7
 8003766:	b004      	add	sp, #16
 8003768:	bd80      	pop	{r7, pc}

0800376a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b08a      	sub	sp, #40	; 0x28
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003776:	2b21      	cmp	r3, #33	; 0x21
 8003778:	d14c      	bne.n	8003814 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2252      	movs	r2, #82	; 0x52
 800377e:	5a9b      	ldrh	r3, [r3, r2]
 8003780:	b29b      	uxth	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d132      	bne.n	80037ec <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003786:	f3ef 8310 	mrs	r3, PRIMASK
 800378a:	60bb      	str	r3, [r7, #8]
  return(result);
 800378c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
 8003790:	2301      	movs	r3, #1
 8003792:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f383 8810 	msr	PRIMASK, r3
}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2180      	movs	r1, #128	; 0x80
 80037a8:	438a      	bics	r2, r1
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f383 8810 	msr	PRIMASK, r3
}
 80037b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037b8:	f3ef 8310 	mrs	r3, PRIMASK
 80037bc:	617b      	str	r3, [r7, #20]
  return(result);
 80037be:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037c0:	623b      	str	r3, [r7, #32]
 80037c2:	2301      	movs	r3, #1
 80037c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	f383 8810 	msr	PRIMASK, r3
}
 80037cc:	46c0      	nop			; (mov r8, r8)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2140      	movs	r1, #64	; 0x40
 80037da:	430a      	orrs	r2, r1
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	f383 8810 	msr	PRIMASK, r3
}
 80037e8:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80037ea:	e013      	b.n	8003814 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f0:	781a      	ldrb	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2252      	movs	r2, #82	; 0x52
 8003806:	5a9b      	ldrh	r3, [r3, r2]
 8003808:	b29b      	uxth	r3, r3
 800380a:	3b01      	subs	r3, #1
 800380c:	b299      	uxth	r1, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2252      	movs	r2, #82	; 0x52
 8003812:	5299      	strh	r1, [r3, r2]
}
 8003814:	46c0      	nop			; (mov r8, r8)
 8003816:	46bd      	mov	sp, r7
 8003818:	b00a      	add	sp, #40	; 0x28
 800381a:	bd80      	pop	{r7, pc}

0800381c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08c      	sub	sp, #48	; 0x30
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003828:	2b21      	cmp	r3, #33	; 0x21
 800382a:	d151      	bne.n	80038d0 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2252      	movs	r2, #82	; 0x52
 8003830:	5a9b      	ldrh	r3, [r3, r2]
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d132      	bne.n	800389e <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003838:	f3ef 8310 	mrs	r3, PRIMASK
 800383c:	60fb      	str	r3, [r7, #12]
  return(result);
 800383e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003840:	62bb      	str	r3, [r7, #40]	; 0x28
 8003842:	2301      	movs	r3, #1
 8003844:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f383 8810 	msr	PRIMASK, r3
}
 800384c:	46c0      	nop			; (mov r8, r8)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2180      	movs	r1, #128	; 0x80
 800385a:	438a      	bics	r2, r1
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003860:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f383 8810 	msr	PRIMASK, r3
}
 8003868:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800386a:	f3ef 8310 	mrs	r3, PRIMASK
 800386e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003870:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
 8003874:	2301      	movs	r3, #1
 8003876:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f383 8810 	msr	PRIMASK, r3
}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2140      	movs	r1, #64	; 0x40
 800388c:	430a      	orrs	r2, r1
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	f383 8810 	msr	PRIMASK, r3
}
 800389a:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800389c:	e018      	b.n	80038d0 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80038a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	001a      	movs	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	05d2      	lsls	r2, r2, #23
 80038b0:	0dd2      	lsrs	r2, r2, #23
 80038b2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b8:	1c9a      	adds	r2, r3, #2
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2252      	movs	r2, #82	; 0x52
 80038c2:	5a9b      	ldrh	r3, [r3, r2]
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b299      	uxth	r1, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2252      	movs	r2, #82	; 0x52
 80038ce:	5299      	strh	r1, [r3, r2]
}
 80038d0:	46c0      	nop			; (mov r8, r8)
 80038d2:	46bd      	mov	sp, r7
 80038d4:	b00c      	add	sp, #48	; 0x30
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038e0:	f3ef 8310 	mrs	r3, PRIMASK
 80038e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80038e6:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	2301      	movs	r3, #1
 80038ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f383 8810 	msr	PRIMASK, r3
}
 80038f4:	46c0      	nop			; (mov r8, r8)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2140      	movs	r1, #64	; 0x40
 8003902:	438a      	bics	r2, r1
 8003904:	601a      	str	r2, [r3, #0]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f383 8810 	msr	PRIMASK, r3
}
 8003910:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2220      	movs	r2, #32
 8003916:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	0018      	movs	r0, r3
 8003922:	f7ff fa7b 	bl	8002e1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	46bd      	mov	sp, r7
 800392a:	b006      	add	sp, #24
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b082      	sub	sp, #8
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	46bd      	mov	sp, r7
 800393a:	b002      	add	sp, #8
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <__libc_init_array>:
 8003940:	b570      	push	{r4, r5, r6, lr}
 8003942:	2600      	movs	r6, #0
 8003944:	4d0c      	ldr	r5, [pc, #48]	; (8003978 <__libc_init_array+0x38>)
 8003946:	4c0d      	ldr	r4, [pc, #52]	; (800397c <__libc_init_array+0x3c>)
 8003948:	1b64      	subs	r4, r4, r5
 800394a:	10a4      	asrs	r4, r4, #2
 800394c:	42a6      	cmp	r6, r4
 800394e:	d109      	bne.n	8003964 <__libc_init_array+0x24>
 8003950:	2600      	movs	r6, #0
 8003952:	f000 f821 	bl	8003998 <_init>
 8003956:	4d0a      	ldr	r5, [pc, #40]	; (8003980 <__libc_init_array+0x40>)
 8003958:	4c0a      	ldr	r4, [pc, #40]	; (8003984 <__libc_init_array+0x44>)
 800395a:	1b64      	subs	r4, r4, r5
 800395c:	10a4      	asrs	r4, r4, #2
 800395e:	42a6      	cmp	r6, r4
 8003960:	d105      	bne.n	800396e <__libc_init_array+0x2e>
 8003962:	bd70      	pop	{r4, r5, r6, pc}
 8003964:	00b3      	lsls	r3, r6, #2
 8003966:	58eb      	ldr	r3, [r5, r3]
 8003968:	4798      	blx	r3
 800396a:	3601      	adds	r6, #1
 800396c:	e7ee      	b.n	800394c <__libc_init_array+0xc>
 800396e:	00b3      	lsls	r3, r6, #2
 8003970:	58eb      	ldr	r3, [r5, r3]
 8003972:	4798      	blx	r3
 8003974:	3601      	adds	r6, #1
 8003976:	e7f2      	b.n	800395e <__libc_init_array+0x1e>
 8003978:	08003a30 	.word	0x08003a30
 800397c:	08003a30 	.word	0x08003a30
 8003980:	08003a30 	.word	0x08003a30
 8003984:	08003a34 	.word	0x08003a34

08003988 <memset>:
 8003988:	0003      	movs	r3, r0
 800398a:	1882      	adds	r2, r0, r2
 800398c:	4293      	cmp	r3, r2
 800398e:	d100      	bne.n	8003992 <memset+0xa>
 8003990:	4770      	bx	lr
 8003992:	7019      	strb	r1, [r3, #0]
 8003994:	3301      	adds	r3, #1
 8003996:	e7f9      	b.n	800398c <memset+0x4>

08003998 <_init>:
 8003998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399a:	46c0      	nop			; (mov r8, r8)
 800399c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399e:	bc08      	pop	{r3}
 80039a0:	469e      	mov	lr, r3
 80039a2:	4770      	bx	lr

080039a4 <_fini>:
 80039a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039aa:	bc08      	pop	{r3}
 80039ac:	469e      	mov	lr, r3
 80039ae:	4770      	bx	lr
